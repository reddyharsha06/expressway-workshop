'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var backendPluginApi = require('@backstage/backend-plugin-api');
var alpha = require('@backstage/plugin-catalog-node/alpha');
var ScaffolderEntitiesProcessor = require('./cjs/ScaffolderEntitiesProcessor-4b7489dd.cjs.js');
var alpha$1 = require('@backstage/plugin-scaffolder-common/alpha');
var pluginPermissionNode = require('@backstage/plugin-permission-node');
var backendCommon = require('@backstage/backend-common');
var integration = require('@backstage/integration');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
require('@backstage/errors');
require('@backstage/catalog-model');
require('fs-extra');
require('yaml');
require('zod');
require('path');
require('luxon');
require('globby');
require('isbinaryfile');
require('isolated-vm');
require('lodash/get');
require('azure-devops-node-api');
require('node-fetch');
require('crypto');
require('octokit');
require('libsodium-wrappers');
require('octokit-plugin-create-pull-request');
require('fs');
require('p-limit');
require('@gitbeaker/node');
require('@octokit/webhooks');
require('zen-observable');
require('p-queue');
require('@backstage/plugin-scaffolder-common');
require('express');
require('express-promise-router');
require('jsonschema');
require('uuid');
require('winston');
require('nunjucks');
require('stream');
require('lodash');
require('prom-client');
require('@backstage/plugin-permission-common');
require('url');
require('os');
require('@backstage/plugin-catalog-node');

const catalogModuleTemplateKind = backendPluginApi.createBackendModule({
  moduleId: "templateKind",
  pluginId: "catalog",
  register(env) {
    env.registerInit({
      deps: {
        catalog: alpha.catalogProcessingExtensionPoint
      },
      async init({ catalog }) {
        catalog.addProcessor(new ScaffolderEntitiesProcessor.ScaffolderEntitiesProcessor());
      }
    });
  }
});

const templateConditionExports = pluginPermissionNode.createConditionExports({
  pluginId: "scaffolder",
  resourceType: alpha$1.RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,
  rules: ScaffolderEntitiesProcessor.scaffolderTemplateRules
});
const actionsConditionExports = pluginPermissionNode.createConditionExports({
  pluginId: "scaffolder",
  resourceType: alpha$1.RESOURCE_TYPE_SCAFFOLDER_ACTION,
  rules: ScaffolderEntitiesProcessor.scaffolderActionRules
});
const createScaffolderTemplateConditionalDecision = templateConditionExports.createConditionalDecision;
const scaffolderTemplateConditions = templateConditionExports.conditions;
const createScaffolderActionConditionalDecision = actionsConditionExports.createConditionalDecision;
const scaffolderActionConditions = actionsConditionExports.conditions;

const scaffolderPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "scaffolder",
  register(env) {
    const addedActions = new Array();
    env.registerExtensionPoint(pluginScaffolderNode.scaffolderActionsExtensionPoint, {
      addActions(...newActions) {
        addedActions.push(...newActions);
      }
    });
    let taskBroker;
    env.registerExtensionPoint(pluginScaffolderNode.scaffolderTaskBrokerExtensionPoint, {
      setTaskBroker(newTaskBroker) {
        if (taskBroker) {
          throw new Error("Task broker may only be set once");
        }
        taskBroker = newTaskBroker;
      }
    });
    const additionalTemplateFilters = {};
    const additionalTemplateGlobals = {};
    env.registerExtensionPoint(pluginScaffolderNode.scaffolderTemplatingExtensionPoint, {
      addTemplateFilters(newFilters) {
        Object.assign(additionalTemplateFilters, newFilters);
      },
      addTemplateGlobals(newGlobals) {
        Object.assign(additionalTemplateGlobals, newGlobals);
      }
    });
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        reader: backendPluginApi.coreServices.urlReader,
        permissions: backendPluginApi.coreServices.permissions,
        database: backendPluginApi.coreServices.database,
        httpRouter: backendPluginApi.coreServices.httpRouter,
        catalogClient: alpha.catalogServiceRef
      },
      async init({
        logger,
        config,
        reader,
        database,
        httpRouter,
        catalogClient,
        permissions
      }) {
        const log = backendCommon.loggerToWinstonLogger(logger);
        const actions = [
          ...addedActions,
          ...ScaffolderEntitiesProcessor.createBuiltinActions({
            integrations: integration.ScmIntegrations.fromConfig(config),
            catalogClient,
            reader,
            config,
            additionalTemplateFilters,
            additionalTemplateGlobals
          })
        ];
        const actionIds = actions.map((action) => action.id).join(", ");
        log.info(
          `Starting scaffolder with the following actions enabled ${actionIds}`
        );
        const router = await ScaffolderEntitiesProcessor.createRouter({
          logger: log,
          config,
          database,
          catalogClient,
          reader,
          actions,
          taskBroker,
          additionalTemplateFilters,
          additionalTemplateGlobals,
          permissions
        });
        httpRouter.use(router);
      }
    });
  }
});

exports.catalogModuleTemplateKind = catalogModuleTemplateKind;
exports.createScaffolderActionConditionalDecision = createScaffolderActionConditionalDecision;
exports.createScaffolderTemplateConditionalDecision = createScaffolderTemplateConditionalDecision;
exports.scaffolderActionConditions = scaffolderActionConditions;
exports.scaffolderPlugin = scaffolderPlugin;
exports.scaffolderTemplateConditions = scaffolderTemplateConditions;
//# sourceMappingURL=alpha.cjs.js.map
