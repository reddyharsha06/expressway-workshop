'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PromiseRouter = require('express-promise-router');
var express = require('express');
var errors = require('@backstage/errors');
var expressOpenapiValidator = require('express-openapi-validator');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PromiseRouter__default = /*#__PURE__*/_interopDefaultLegacy(PromiseRouter);

var index = /*#__PURE__*/Object.freeze({
  __proto__: null
});

const baseUrlSymbol = Symbol();
const originalUrlSymbol = Symbol();
function validatorErrorTransformer() {
  return (error, _, _2, next) => {
    next(new errors.InputError(error.message));
  };
}
function getDefaultRouterMiddleware() {
  return [express.json()];
}
function createValidatedOpenApiRouter(spec, options) {
  const router = PromiseRouter__default["default"]();
  router.use((options == null ? void 0 : options.middleware) || getDefaultRouterMiddleware());
  router.use((req, _, next) => {
    const customRequest = req;
    customRequest[baseUrlSymbol] = customRequest.baseUrl;
    customRequest.baseUrl = "";
    customRequest[originalUrlSymbol] = customRequest.originalUrl;
    customRequest.originalUrl = customRequest.url;
    next();
  });
  router.use(
    expressOpenapiValidator.middleware({
      validateRequests: {
        coerceTypes: false,
        allowUnknownQueryParameters: false
      },
      ignoreUndocumented: true,
      validateResponses: false,
      ...options == null ? void 0 : options.validatorOptions,
      apiSpec: spec
    })
  );
  router.use((req, _, next) => {
    const customRequest = req;
    customRequest.baseUrl = customRequest[baseUrlSymbol];
    customRequest.originalUrl = customRequest[originalUrlSymbol];
    delete customRequest[baseUrlSymbol];
    delete customRequest[originalUrlSymbol];
    next();
  });
  router.use(validatorErrorTransformer());
  return router;
}

exports.createValidatedOpenApiRouter = createValidatedOpenApiRouter;
exports.internal = index;
//# sourceMappingURL=index.cjs.js.map
