'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createAjvInstance = require('./createAjvInstance-0cd8cfba.js');
var fs = require('fs');
var standaloneCode = require('ajv/dist/standalone');
var utils = require('@rjsf/utils');
require('ajv');
require('ajv-formats');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var standaloneCode__default = /*#__PURE__*/_interopDefaultLegacy(standaloneCode);

/** The function used to compile a schema into an output file in the form that allows it to be used as a precompiled
 * validator. The main reasons for using a precompiled validator is reducing code size, improving validation speed and,
 * most importantly, avoiding dynamic code compilation when prohibited by a browser's Content Security Policy. For more
 * information about AJV code compilation see: https://ajv.js.org/standalone.html
 *
 * @param schema - The schema to be compiled into a set of precompiled validators functions
 * @param output - The name of the file into which the precompiled validator functions will be generated
 * @param [options={}] - The set of `CustomValidatorOptionsType` information used to alter the AJV validator used for
 *        compiling the schema. They are the same options that are passed to the `customizeValidator()` function in
 *        order to modify the behavior of the regular AJV-based validator.
 */
function compileSchemaValidators(schema, output, options) {
  if (options === void 0) {
    options = {};
  }
  console.log('parsing the schema');
  var schemaMaps = utils.schemaParser(schema);
  var schemas = Object.values(schemaMaps);
  var _options = options,
    additionalMetaSchemas = _options.additionalMetaSchemas,
    customFormats = _options.customFormats,
    _options$ajvOptionsOv = _options.ajvOptionsOverrides,
    ajvOptionsOverrides = _options$ajvOptionsOv === void 0 ? {} : _options$ajvOptionsOv,
    ajvFormatOptions = _options.ajvFormatOptions,
    AjvClass = _options.AjvClass;
  // Allow users to turn off the `lines: true` feature in their own overrides, but NOT the `source: true`
  var compileOptions = createAjvInstance._extends({}, ajvOptionsOverrides, {
    code: createAjvInstance._extends({
      lines: true
    }, ajvOptionsOverrides.code, {
      source: true
    }),
    schemas: schemas
  });
  var ajv = createAjvInstance.createAjvInstance(additionalMetaSchemas, customFormats, compileOptions, ajvFormatOptions, AjvClass);
  var moduleCode = standaloneCode__default["default"](ajv);
  console.log("writing " + output);
  fs__default["default"].writeFileSync(output, moduleCode);
}

exports["default"] = compileSchemaValidators;
//# sourceMappingURL=compileSchemaValidators.cjs.development.js.map
