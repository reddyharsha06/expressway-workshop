import * as _rjsf_utils from '@rjsf/utils';
import { StrictRJSFSchema, RJSFSchema, FormContextType, ValidatorType } from '@rjsf/utils';
import Ajv, { Options, ErrorObject } from 'ajv';
import { FormatsPluginOptions } from 'ajv-formats';

/** The type describing how to customize the AJV6 validator
 */
interface CustomValidatorOptionsType {
    /** The list of additional meta schemas that the validator can access */
    additionalMetaSchemas?: ReadonlyArray<object>;
    /** The set of additional custom formats that the validator will support */
    customFormats?: {
        [k: string]: string | RegExp | ((data: string) => boolean);
    };
    /** The set of config overrides that will be passed to the AJV validator constructor on top of the defaults */
    ajvOptionsOverrides?: Options;
    /** The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it */
    ajvFormatOptions?: FormatsPluginOptions | false;
    /** The AJV class to construct */
    AjvClass?: typeof Ajv;
}
/** The type describing a function that takes a list of Ajv `ErrorObject`s and localizes them
 */
type Localizer = (errors?: null | ErrorObject[]) => void;
/** This is a simplification of the `ValidateFunction` type provided by the AJV validator down to its minimal form so
 * that the code still works properly with precompiled validator functions generated by the AJV standalone code
 * compilation but does not rely on any of the internal AJV types which causes Typescript issue for library consumers
 */
interface CompiledValidateFunction {
    /** The errors produced by the precompiled validator */
    errors?: null | ErrorObject[];
    /** This is simplified version of a `ValidateFunction` type definition which describes the interface that our
     * precompiled validator will call.
     */
    (this: Ajv | any, data: any): boolean;
}
/** The definition of precompiled validator functions
 */
type ValidatorFunctions = {
    [key: string]: CompiledValidateFunction;
};

/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if
 * provided. If a `localizer` is provided, it is used to translate the messages generated by the underlying AJV
 * validation.
 *
 * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance
 * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
 * @returns - The custom validator implementation resulting from the set of parameters provided
 */
declare function customizeValidator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(options?: CustomValidatorOptionsType, localizer?: Localizer): ValidatorType<T, S, F>;

/** Creates and returns a `ValidatorType` interface that is implemented with a precompiled validator. If a `localizer`
 * is provided, it is used to translate the messages generated by the underlying AJV validation.
 *
 * NOTE: The `validateFns` parameter is an object obtained by importing from a precompiled validation file created via
 * the `compileSchemaValidators()` function.
 *
 * @param validateFns - The map of the validation functions that are created by the `compileSchemaValidators()` function
 * @param rootSchema - The root schema that was used with the `compileSchemaValidators()` function
 * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
 * @returns - The precompiled validator implementation resulting from the set of parameters provided
 */
declare function createPrecompiledValidator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validateFns: ValidatorFunctions, rootSchema: S, localizer?: Localizer): ValidatorType<T, S, F>;

declare const _default: _rjsf_utils.ValidatorType<any, _rjsf_utils.RJSFSchema, any>;

export { CompiledValidateFunction, CustomValidatorOptionsType, Localizer, ValidatorFunctions, createPrecompiledValidator, customizeValidator, _default as default };
