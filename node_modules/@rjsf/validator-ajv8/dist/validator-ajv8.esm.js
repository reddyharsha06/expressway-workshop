import { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG, toErrorSchema, getDefaultFormState, createErrorHandler, unwrapErrorHandler, validationDataMerge, getUiOptions, PROPERTIES_KEY, toErrorList, ID_KEY, withIdRefPrefix, ROOT_SCHEMA_PREFIX, hashForSchema, JUNK_OPTION_ID } from '@rjsf/utils';
import Ajv from 'ajv';
import addFormats from 'ajv-formats';
import isObject from 'lodash-es/isObject';
import get from 'lodash-es/get';
import isEqual from 'lodash-es/isEqual';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

var AJV_CONFIG = {
  allErrors: true,
  multipleOfPrecision: 8,
  strict: false,
  verbose: true
};
var COLOR_FORMAT_REGEX = /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/;
var DATA_URL_FORMAT_REGEX = /^data:([a-z]+\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;
/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.
 * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the
 * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If
 * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing
 * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By
 * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`
 * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of
 * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.
 *
 * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access
 * @param [customFormats] - The set of additional custom formats that the validator will support
 * @param [ajvOptionsOverrides={}] - The set of validator config override options
 * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it
 * @param [AjvClass] - The `Ajv` class to use when creating the validator instance
 */
function createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass) {
  if (ajvOptionsOverrides === void 0) {
    ajvOptionsOverrides = {};
  }
  if (AjvClass === void 0) {
    AjvClass = Ajv;
  }
  var ajv = new AjvClass(_extends({}, AJV_CONFIG, ajvOptionsOverrides));
  if (ajvFormatOptions) {
    addFormats(ajv, ajvFormatOptions);
  } else if (ajvFormatOptions !== false) {
    addFormats(ajv);
  }
  // add custom formats
  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);
  ajv.addFormat('color', COLOR_FORMAT_REGEX);
  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.
  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);
  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);
  // add more schemas to validate against
  if (Array.isArray(additionalMetaSchemas)) {
    ajv.addMetaSchema(additionalMetaSchemas);
  }
  // add more custom formats to validate against
  if (isObject(customFormats)) {
    Object.keys(customFormats).forEach(function (formatName) {
      ajv.addFormat(formatName, customFormats[formatName]);
    });
  }
  return ajv;
}

var _excluded = ["instancePath", "keyword", "params", "schemaPath", "parentSchema"];
/** Transforming the error output from ajv to format used by @rjsf/utils.
 * At some point, components should be updated to support ajv.
 *
 * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`
 * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`
 */
function transformRJSFValidationErrors(errors, uiSchema) {
  if (errors === void 0) {
    errors = [];
  }
  return errors.map(function (e) {
    var instancePath = e.instancePath,
      keyword = e.keyword,
      params = e.params,
      schemaPath = e.schemaPath,
      parentSchema = e.parentSchema,
      rest = _objectWithoutPropertiesLoose(e, _excluded);
    var _rest$message = rest.message,
      message = _rest$message === void 0 ? '' : _rest$message;
    var property = instancePath.replace(/\//g, '.');
    var stack = (property + " " + message).trim();
    if ('missingProperty' in params) {
      property = property ? property + "." + params.missingProperty : params.missingProperty;
      var currentProperty = params.missingProperty;
      var uiSchemaTitle = getUiOptions(get(uiSchema, "" + property.replace(/^\./, ''))).title;
      if (uiSchemaTitle) {
        message = message.replace(currentProperty, uiSchemaTitle);
      } else {
        var parentSchemaTitle = get(parentSchema, [PROPERTIES_KEY, currentProperty, 'title']);
        if (parentSchemaTitle) {
          message = message.replace(currentProperty, parentSchemaTitle);
        }
      }
      stack = message;
    } else {
      var _uiSchemaTitle = getUiOptions(get(uiSchema, "" + property.replace(/^\./, ''))).title;
      if (_uiSchemaTitle) {
        stack = ("'" + _uiSchemaTitle + "' " + message).trim();
      } else {
        var _parentSchemaTitle = parentSchema === null || parentSchema === void 0 ? void 0 : parentSchema.title;
        if (_parentSchemaTitle) {
          stack = ("'" + _parentSchemaTitle + "' " + message).trim();
        }
      }
    }
    // put data in expected format
    return {
      name: keyword,
      property: property,
      message: message,
      params: params,
      stack: stack,
      schemaPath: schemaPath
    };
  });
}
/** This function processes the `formData` with an optional user contributed `customValidate` function, which receives
 * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also
 * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and
 * transform them in what ever way it chooses.
 *
 * @param validator - The `ValidatorType` implementation used for the `getDefaultFormState()` call
 * @param rawErrors - The list of raw `ErrorObject`s to process
 * @param formData - The form data to validate
 * @param schema - The schema against which to validate the form data
 * @param [customValidate] - An optional function that is used to perform custom validation
 * @param [transformErrors] - An optional function that is used to transform errors after AJV validation
 * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`
 */
function processRawValidationErrors(validator, rawErrors, formData, schema, customValidate, transformErrors, uiSchema) {
  var invalidSchemaError = rawErrors.validationError;
  var errors = transformRJSFValidationErrors(rawErrors.errors, uiSchema);
  if (invalidSchemaError) {
    errors = [].concat(errors, [{
      stack: invalidSchemaError.message
    }]);
  }
  if (typeof transformErrors === 'function') {
    errors = transformErrors(errors, uiSchema);
  }
  var errorSchema = toErrorSchema(errors);
  if (invalidSchemaError) {
    errorSchema = _extends({}, errorSchema, {
      $schema: {
        __errors: [invalidSchemaError.message]
      }
    });
  }
  if (typeof customValidate !== 'function') {
    return {
      errors: errors,
      errorSchema: errorSchema
    };
  }
  // Include form data with undefined values, which is required for custom validation.
  var newFormData = getDefaultFormState(validator, schema, formData, schema, true);
  var errorHandler = customValidate(newFormData, createErrorHandler(newFormData), uiSchema);
  var userErrorSchema = unwrapErrorHandler(errorHandler);
  return validationDataMerge({
    errors: errors,
    errorSchema: errorSchema
  }, userErrorSchema);
}

/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.
 */
var AJV8Validator = /*#__PURE__*/function () {
  /** Constructs an `AJV8Validator` instance using the `options`
   *
   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance
   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
   */
  function AJV8Validator(options, localizer) {
    /** The AJV instance to use for all validations
     *
     * @private
     */
    this.ajv = void 0;
    /** The Localizer function to use for localizing Ajv errors
     *
     * @private
     */
    this.localizer = void 0;
    var additionalMetaSchemas = options.additionalMetaSchemas,
      customFormats = options.customFormats,
      ajvOptionsOverrides = options.ajvOptionsOverrides,
      ajvFormatOptions = options.ajvFormatOptions,
      AjvClass = options.AjvClass;
    this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);
    this.localizer = localizer;
  }
  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`
   *
   * @param errorSchema - The `ErrorSchema` instance to convert
   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified
   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in
   *        the next major release.
   */
  var _proto = AJV8Validator.prototype;
  _proto.toErrorList = function toErrorList$1(errorSchema, fieldPath) {
    if (fieldPath === void 0) {
      fieldPath = [];
    }
    return toErrorList(errorSchema, fieldPath);
  }
  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use
   * by the playground. Returns the `errors` from the validation
   *
   * @param schema - The schema against which to validate the form data   * @param schema
   * @param formData - The form data to validate
   */;
  _proto.rawValidation = function rawValidation(schema, formData) {
    var compilationError = undefined;
    var compiledValidator;
    if (schema[ID_KEY]) {
      compiledValidator = this.ajv.getSchema(schema[ID_KEY]);
    }
    try {
      if (compiledValidator === undefined) {
        compiledValidator = this.ajv.compile(schema);
      }
      compiledValidator(formData);
    } catch (err) {
      compilationError = err;
    }
    var errors;
    if (compiledValidator) {
      if (typeof this.localizer === 'function') {
        this.localizer(compiledValidator.errors);
      }
      errors = compiledValidator.errors || undefined;
      // Clear errors to prevent persistent errors, see #1104
      compiledValidator.errors = null;
    }
    return {
      errors: errors,
      validationError: compilationError
    };
  }
  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives
   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also
   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and
   * transform them in what ever way it chooses.
   *
   * @param formData - The form data to validate
   * @param schema - The schema against which to validate the form data
   * @param [customValidate] - An optional function that is used to perform custom validation
   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation
   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`
   */;
  _proto.validateFormData = function validateFormData(formData, schema, customValidate, transformErrors, uiSchema) {
    var rawErrors = this.rawValidation(schema, formData);
    return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);
  }
  /** Validates data against a schema, returning true if the data is valid, or
   * false otherwise. If the schema is invalid, then this function will return
   * false.
   *
   * @param schema - The schema against which to validate the form data
   * @param formData - The form data to validate
   * @param rootSchema - The root schema used to provide $ref resolutions
   */;
  _proto.isValid = function isValid(schema, formData, rootSchema) {
    var _rootSchema$ID_KEY;
    var rootSchemaId = (_rootSchema$ID_KEY = rootSchema[ID_KEY]) != null ? _rootSchema$ID_KEY : ROOT_SCHEMA_PREFIX;
    try {
      // add the rootSchema ROOT_SCHEMA_PREFIX as id.
      // then rewrite the schema ref's to point to the rootSchema
      // this accounts for the case where schema have references to models
      // that lives in the rootSchema but not in the schema in question.
      if (this.ajv.getSchema(rootSchemaId) === undefined) {
        this.ajv.addSchema(rootSchema, rootSchemaId);
      }
      var schemaWithIdRefPrefix = withIdRefPrefix(schema);
      var compiledValidator;
      if (schemaWithIdRefPrefix[ID_KEY]) {
        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix[ID_KEY]);
      }
      if (compiledValidator === undefined) {
        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);
      }
      var result = compiledValidator(formData);
      return result;
    } catch (e) {
      console.warn('Error encountered compiling schema:', e);
      return false;
    } finally {
      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.
      // make sure we remove the rootSchema from the global ajv instance
      this.ajv.removeSchema(rootSchemaId);
    }
  };
  return AJV8Validator;
}();

/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if
 * provided. If a `localizer` is provided, it is used to translate the messages generated by the underlying AJV
 * validation.
 *
 * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance
 * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
 * @returns - The custom validator implementation resulting from the set of parameters provided
 */
function customizeValidator(options, localizer) {
  if (options === void 0) {
    options = {};
  }
  return new AJV8Validator(options, localizer);
}

/** `ValidatorType` implementation that uses an AJV 8 precompiled validator as created by the
 * `compileSchemaValidators()` function provided by the `@rjsf/validator-ajv8` library.
 */
var AJV8PrecompiledValidator = /*#__PURE__*/function () {
  /** Constructs an `AJV8PrecompiledValidator` instance using the `validateFns` and `rootSchema`
   *
   * @param validateFns - The map of the validation functions that are generated by the `schemaCompile()` function
   * @param rootSchema - The root schema that was used with the `compileSchema()` function
   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
   * @throws - Error when the base schema of the precompiled validator does not have a matching validator function
   */
  function AJV8PrecompiledValidator(validateFns, rootSchema, localizer) {
    /** The root schema object used to construct this validator
     *
     * @private
     */
    this.rootSchema = void 0;
    /** The `ValidatorFunctions` map used to construct this validator
     *
     * @private
     */
    this.validateFns = void 0;
    /** The main validator function associated with the base schema in the `precompiledValidator`
     *
     * @private
     */
    this.mainValidator = void 0;
    /** The Localizer function to use for localizing Ajv errors
     *
     * @private
     */
    this.localizer = void 0;
    this.rootSchema = rootSchema;
    this.validateFns = validateFns;
    this.localizer = localizer;
    this.mainValidator = this.getValidator(rootSchema);
  }
  /** Returns the precompiled validator associated with the given `schema` from the map of precompiled validator
   * functions.
   *
   * @param schema - The schema for which a precompiled validator function is desired
   * @returns - The precompiled validator function associated with this schema
   */
  var _proto = AJV8PrecompiledValidator.prototype;
  _proto.getValidator = function getValidator(schema) {
    var key = get(schema, ID_KEY) || hashForSchema(schema);
    var validator = this.validateFns[key];
    if (!validator) {
      throw new Error("No precompiled validator function was found for the given schema for \"" + key + "\"");
    }
    return validator;
  }
  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`
   *
   * @param errorSchema - The `ErrorSchema` instance to convert
   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified
   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in
   *        the next major release.
   */;
  _proto.toErrorList = function toErrorList$1(errorSchema, fieldPath) {
    if (fieldPath === void 0) {
      fieldPath = [];
    }
    return toErrorList(errorSchema, fieldPath);
  }
  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use
   * by the playground. Returns the `errors` from the validation
   *
   * @param schema - The schema against which to validate the form data   * @param schema
   * @param formData - The form data to validate
   * @throws - Error when the schema provided does not match the base schema of the precompiled validator
   */;
  _proto.rawValidation = function rawValidation(schema, formData) {
    if (!isEqual(schema, this.rootSchema)) {
      throw new Error('The schema associated with the precompiled schema differs from the schema provided for validation');
    }
    this.mainValidator(formData);
    if (typeof this.localizer === 'function') {
      this.localizer(this.mainValidator.errors);
    }
    var errors = this.mainValidator.errors || undefined;
    // Clear errors to prevent persistent errors, see #1104
    this.mainValidator.errors = null;
    return {
      errors: errors
    };
  }
  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives
   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also
   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and
   * transform them in what ever way it chooses.
   *
   * @param formData - The form data to validate
   * @param schema - The schema against which to validate the form data
   * @param [customValidate] - An optional function that is used to perform custom validation
   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation
   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`
   */;
  _proto.validateFormData = function validateFormData(formData, schema, customValidate, transformErrors, uiSchema) {
    var rawErrors = this.rawValidation(schema, formData);
    return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);
  }
  /** Validates data against a schema, returning true if the data is valid, or false otherwise. If the schema is
   * invalid, then this function will return false.
   *
   * @param schema - The schema against which to validate the form data
   * @param formData - The form data to validate
   * @param rootSchema - The root schema used to provide $ref resolutions
   * @returns - true if the formData validates against the schema, false otherwise
   * @throws - Error when the schema provided does not match the base schema of the precompiled validator OR if there
   *        isn't a precompiled validator function associated with the schema
   */;
  _proto.isValid = function isValid(schema, formData, rootSchema) {
    if (!isEqual(rootSchema, this.rootSchema)) {
      throw new Error('The schema associated with the precompiled validator differs from the rootSchema provided for validation');
    }
    if (get(schema, ID_KEY) === JUNK_OPTION_ID) {
      return false;
    }
    var validator = this.getValidator(schema);
    return validator(formData);
  };
  return AJV8PrecompiledValidator;
}();

/** Creates and returns a `ValidatorType` interface that is implemented with a precompiled validator. If a `localizer`
 * is provided, it is used to translate the messages generated by the underlying AJV validation.
 *
 * NOTE: The `validateFns` parameter is an object obtained by importing from a precompiled validation file created via
 * the `compileSchemaValidators()` function.
 *
 * @param validateFns - The map of the validation functions that are created by the `compileSchemaValidators()` function
 * @param rootSchema - The root schema that was used with the `compileSchemaValidators()` function
 * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s
 * @returns - The precompiled validator implementation resulting from the set of parameters provided
 */
function createPrecompiledValidator(validateFns, rootSchema, localizer) {
  return new AJV8PrecompiledValidator(validateFns, rootSchema, localizer);
}

var index = /*#__PURE__*/customizeValidator();

export { createPrecompiledValidator, customizeValidator, index as default };
//# sourceMappingURL=validator-ajv8.esm.js.map
