{"version":3,"file":"compileSchemaValidators.cjs.production.min.js","sources":["../src/compileSchemaValidators.ts"],"sourcesContent":["import fs from 'fs';\nimport standaloneCode from 'ajv/dist/standalone';\nimport { RJSFSchema, StrictRJSFSchema, schemaParser } from '@rjsf/utils';\n\nimport createAjvInstance from './createAjvInstance';\nimport { CustomValidatorOptionsType } from './types';\n\n/** The function used to compile a schema into an output file in the form that allows it to be used as a precompiled\n * validator. The main reasons for using a precompiled validator is reducing code size, improving validation speed and,\n * most importantly, avoiding dynamic code compilation when prohibited by a browser's Content Security Policy. For more\n * information about AJV code compilation see: https://ajv.js.org/standalone.html\n *\n * @param schema - The schema to be compiled into a set of precompiled validators functions\n * @param output - The name of the file into which the precompiled validator functions will be generated\n * @param [options={}] - The set of `CustomValidatorOptionsType` information used to alter the AJV validator used for\n *        compiling the schema. They are the same options that are passed to the `customizeValidator()` function in\n *        order to modify the behavior of the regular AJV-based validator.\n */\nexport default function compileSchemaValidators<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  output: string,\n  options: CustomValidatorOptionsType = {}\n) {\n  console.log('parsing the schema');\n  const schemaMaps = schemaParser(schema);\n  const schemas = Object.values(schemaMaps);\n\n  const { additionalMetaSchemas, customFormats, ajvOptionsOverrides = {}, ajvFormatOptions, AjvClass } = options;\n  // Allow users to turn off the `lines: true` feature in their own overrides, but NOT the `source: true`\n  const compileOptions = {\n    ...ajvOptionsOverrides,\n    code: { lines: true, ...ajvOptionsOverrides.code, source: true },\n    schemas,\n  };\n  const ajv = createAjvInstance(additionalMetaSchemas, customFormats, compileOptions, ajvFormatOptions, AjvClass);\n\n  const moduleCode = standaloneCode(ajv);\n  console.log(`writing ${output}`);\n  fs.writeFileSync(output, moduleCode);\n}\n"],"names":["schema","output","options","console","log","schemaMaps","schemaParser","schemas","Object","values","additionalMetaSchemas","customFormats","_options$ajvOptionsOv","ajvOptionsOverrides","ajvFormatOptions","AjvClass","compileOptions","_extends","code","lines","source","ajv","createAjvInstance","moduleCode","standaloneCode","fs","writeFileSync"],"mappings":"0WAkBc,SACZA,EACAC,EACAC,QAAA,IAAAA,IAAAA,EAAsC,CAAA,GAEtCC,QAAQC,IAAI,sBACZ,IAAMC,EAAaC,eAAaN,GAC1BO,EAAUC,OAAOC,OAAOJ,GAEtBK,EAA+FR,EAA/FQ,sBAAuBC,EAAwET,EAAxES,cAAaC,EAA2DV,EAAzDW,oBAAAA,OAAmB,IAAAD,EAAG,CAAE,EAAAA,EAAEE,EAA+BZ,EAA/BY,iBAAkBC,EAAab,EAAba,SAEpFC,EAAcC,EAAAA,SAAA,CAAA,EACfJ,EAAmB,CACtBK,KAAID,EAAAA,SAAA,CAAIE,OAAO,GAASN,EAAoBK,KAAI,CAAEE,QAAQ,IAC1Db,QAAAA,IAEIc,EAAMC,EAAAA,kBAAkBZ,EAAuBC,EAAeK,EAAgBF,EAAkBC,GAEhGQ,EAAaC,UAAeH,GAClClB,QAAQC,IAAeH,WAAAA,GACvBwB,EAAAA,QAAGC,cAAczB,EAAQsB,EAC3B"}