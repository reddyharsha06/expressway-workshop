{"version":3,"file":"validator-ajv8.esm.js","sources":["../src/createAjvInstance.ts","../src/processRawValidationErrors.ts","../src/validator.ts","../src/customizeValidator.ts","../src/precompiledValidator.ts","../src/createPrecompiledValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from 'ajv';\nimport addFormats, { FormatsPluginOptions } from 'ajv-formats';\nimport isObject from 'lodash/isObject';\n\nimport { CustomValidatorOptionsType } from './types';\nimport { ADDITIONAL_PROPERTY_FLAG, RJSF_ADDITONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX = /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType['additionalMetaSchemas'],\n  customFormats?: CustomValidatorOptionsType['customFormats'],\n  ajvOptionsOverrides: CustomValidatorOptionsType['ajvOptionsOverrides'] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat('data-url', DATA_URL_FORMAT_REGEX);\n  ajv.addFormat('color', COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import { ErrorObject } from 'ajv';\nimport get from 'lodash/get';\nimport {\n  createErrorHandler,\n  CustomValidator,\n  ErrorTransformer,\n  FormContextType,\n  getDefaultFormState,\n  getUiOptions,\n  PROPERTIES_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  toErrorSchema,\n  UiSchema,\n  unwrapErrorHandler,\n  validationDataMerge,\n  ValidatorType,\n} from '@rjsf/utils';\n\nexport type RawValidationErrorsType<Result = any> = { errors?: Result[]; validationError?: Error };\n\n/** Transforming the error output from ajv to format used by @rjsf/utils.\n * At some point, components should be updated to support ajv.\n *\n * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n */\nexport function transformRJSFValidationErrors<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(errors: ErrorObject[] = [], uiSchema?: UiSchema<T, S, F>): RJSFValidationError[] {\n  return errors.map((e: ErrorObject) => {\n    const { instancePath, keyword, params, schemaPath, parentSchema, ...rest } = e;\n    let { message = '' } = rest;\n    let property = instancePath.replace(/\\//g, '.');\n    let stack = `${property} ${message}`.trim();\n\n    if ('missingProperty' in params) {\n      property = property ? `${property}.${params.missingProperty}` : params.missingProperty;\n      const currentProperty: string = params.missingProperty;\n      const uiSchemaTitle = getUiOptions(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n      if (uiSchemaTitle) {\n        message = message.replace(currentProperty, uiSchemaTitle);\n      } else {\n        const parentSchemaTitle = get(parentSchema, [PROPERTIES_KEY, currentProperty, 'title']);\n\n        if (parentSchemaTitle) {\n          message = message.replace(currentProperty, parentSchemaTitle);\n        }\n      }\n\n      stack = message;\n    } else {\n      const uiSchemaTitle = getUiOptions<T, S, F>(get(uiSchema, `${property.replace(/^\\./, '')}`)).title;\n\n      if (uiSchemaTitle) {\n        stack = `'${uiSchemaTitle}' ${message}`.trim();\n      } else {\n        const parentSchemaTitle = parentSchema?.title;\n\n        if (parentSchemaTitle) {\n          stack = `'${parentSchemaTitle}' ${message}`.trim();\n        }\n      }\n    }\n\n    // put data in expected format\n    return {\n      name: keyword,\n      property,\n      message,\n      params, // specific to ajv\n      stack,\n      schemaPath,\n    };\n  });\n}\n\n/** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n * transform them in what ever way it chooses.\n *\n * @param validator - The `ValidatorType` implementation used for the `getDefaultFormState()` call\n * @param rawErrors - The list of raw `ErrorObject`s to process\n * @param formData - The form data to validate\n * @param schema - The schema against which to validate the form data\n * @param [customValidate] - An optional function that is used to perform custom validation\n * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n */\nexport default function processRawValidationErrors<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rawErrors: RawValidationErrorsType<ErrorObject>,\n  formData: T | undefined,\n  schema: S,\n  customValidate?: CustomValidator<T, S, F>,\n  transformErrors?: ErrorTransformer<T, S, F>,\n  uiSchema?: UiSchema<T, S, F>\n) {\n  const { validationError: invalidSchemaError } = rawErrors;\n  let errors = transformRJSFValidationErrors<T, S, F>(rawErrors.errors, uiSchema);\n\n  if (invalidSchemaError) {\n    errors = [...errors, { stack: invalidSchemaError!.message }];\n  }\n  if (typeof transformErrors === 'function') {\n    errors = transformErrors(errors, uiSchema);\n  }\n\n  let errorSchema = toErrorSchema<T>(errors);\n\n  if (invalidSchemaError) {\n    errorSchema = {\n      ...errorSchema,\n      $schema: {\n        __errors: [invalidSchemaError!.message],\n      },\n    };\n  }\n\n  if (typeof customValidate !== 'function') {\n    return { errors, errorSchema };\n  }\n\n  // Include form data with undefined values, which is required for custom validation.\n  const newFormData = getDefaultFormState<T, S, F>(validator, schema, formData, schema, true) as T;\n\n  const errorHandler = customValidate(newFormData, createErrorHandler<T>(newFormData), uiSchema);\n  const userErrorSchema = unwrapErrorHandler<T>(errorHandler);\n  return validationDataMerge<T>({ errors, errorSchema }, userErrorSchema);\n}\n","import Ajv, { ErrorObject, ValidateFunction } from 'ajv';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  ID_KEY,\n  RJSFSchema,\n  ROOT_SCHEMA_PREFIX,\n  StrictRJSFSchema,\n  toErrorList,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  withIdRefPrefix,\n} from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport createAjvInstance from './createAjvInstance';\nimport processRawValidationErrors, { RawValidationErrorsType } from './processRawValidationErrors';\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const { additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass } = options;\n    this.ajv = createAjvInstance(additionalMetaSchemas, customFormats, ajvOptionsOverrides, ajvFormatOptions, AjvClass);\n    this.localizer = localizer;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n   *        the next major release.\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    return toErrorList(errorSchema, fieldPath);\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(schema: S, formData?: T): RawValidationErrorsType<Result> {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema[ID_KEY]) {\n      compiledValidator = this.ajv.getSchema(schema[ID_KEY]);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === 'function') {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    const rootSchemaId = rootSchema[ID_KEY] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = withIdRefPrefix<S>(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix[ID_KEY]) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix[ID_KEY]);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn('Error encountered compiling schema:', e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '@rjsf/utils';\n\nimport { CustomValidatorOptionsType, Localizer } from './types';\nimport AJV8Validator from './validator';\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided. If a `localizer` is provided, it is used to translate the messages generated by the underlying AJV\n * validation.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n * @returns - The custom validator implementation resulting from the set of parameters provided\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(options: CustomValidatorOptionsType = {}, localizer?: Localizer): ValidatorType<T, S, F> {\n  return new AJV8Validator<T, S, F>(options, localizer);\n}\n","import { ErrorObject } from 'ajv';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  hashForSchema,\n  ID_KEY,\n  JUNK_OPTION_ID,\n  RJSFSchema,\n  StrictRJSFSchema,\n  toErrorList,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from '@rjsf/utils';\n\nimport { CompiledValidateFunction, Localizer, ValidatorFunctions } from './types';\nimport processRawValidationErrors, { RawValidationErrorsType } from './processRawValidationErrors';\n\n/** `ValidatorType` implementation that uses an AJV 8 precompiled validator as created by the\n * `compileSchemaValidators()` function provided by the `@rjsf/validator-ajv8` library.\n */\nexport default class AJV8PrecompiledValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> implements ValidatorType<T, S, F>\n{\n  /** The root schema object used to construct this validator\n   *\n   * @private\n   */\n  readonly rootSchema: S;\n\n  /** The `ValidatorFunctions` map used to construct this validator\n   *\n   * @private\n   */\n  readonly validateFns: ValidatorFunctions;\n\n  /** The main validator function associated with the base schema in the `precompiledValidator`\n   *\n   * @private\n   */\n  readonly mainValidator: CompiledValidateFunction;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8PrecompiledValidator` instance using the `validateFns` and `rootSchema`\n   *\n   * @param validateFns - The map of the validation functions that are generated by the `schemaCompile()` function\n   * @param rootSchema - The root schema that was used with the `compileSchema()` function\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   * @throws - Error when the base schema of the precompiled validator does not have a matching validator function\n   */\n  constructor(validateFns: ValidatorFunctions, rootSchema: S, localizer?: Localizer) {\n    this.rootSchema = rootSchema;\n    this.validateFns = validateFns;\n    this.localizer = localizer;\n    this.mainValidator = this.getValidator(rootSchema);\n  }\n\n  /** Returns the precompiled validator associated with the given `schema` from the map of precompiled validator\n   * functions.\n   *\n   * @param schema - The schema for which a precompiled validator function is desired\n   * @returns - The precompiled validator function associated with this schema\n   */\n  getValidator(schema: S) {\n    const key = get(schema, ID_KEY) || hashForSchema(schema);\n    const validator = this.validateFns[key];\n    if (!validator) {\n      throw new Error(`No precompiled validator function was found for the given schema for \"${key}\"`);\n    }\n    return validator;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   * @deprecated - Use the `toErrorList()` function provided by `@rjsf/utils` instead. This function will be removed in\n   *        the next major release.\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    return toErrorList(errorSchema, fieldPath);\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   * @throws - Error when the schema provided does not match the base schema of the precompiled validator\n   */\n  rawValidation<Result = any>(schema: S, formData?: T): RawValidationErrorsType<Result> {\n    if (!isEqual(schema, this.rootSchema)) {\n      throw new Error(\n        'The schema associated with the precompiled schema differs from the schema provided for validation'\n      );\n    }\n    this.mainValidator(formData);\n\n    if (typeof this.localizer === 'function') {\n      this.localizer(this.mainValidator.errors);\n    }\n    const errors = this.mainValidator.errors || undefined;\n\n    // Clear errors to prevent persistent errors, see #1104\n    this.mainValidator.errors = null;\n\n    return { errors: errors as unknown as Result[] };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    return processRawValidationErrors(this, rawErrors, formData, schema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or false otherwise. If the schema is\n   * invalid, then this function will return false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   * @returns - true if the formData validates against the schema, false otherwise\n   * @throws - Error when the schema provided does not match the base schema of the precompiled validator OR if there\n   *        isn't a precompiled validator function associated with the schema\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    if (!isEqual(rootSchema, this.rootSchema)) {\n      throw new Error(\n        'The schema associated with the precompiled validator differs from the rootSchema provided for validation'\n      );\n    }\n    if (get(schema, ID_KEY) === JUNK_OPTION_ID) {\n      return false;\n    }\n    const validator = this.getValidator(schema);\n    return validator(formData);\n  }\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '@rjsf/utils';\n\nimport { Localizer, ValidatorFunctions } from './types';\nimport AJV8PrecompiledValidator from './precompiledValidator';\n\n/** Creates and returns a `ValidatorType` interface that is implemented with a precompiled validator. If a `localizer`\n * is provided, it is used to translate the messages generated by the underlying AJV validation.\n *\n * NOTE: The `validateFns` parameter is an object obtained by importing from a precompiled validation file created via\n * the `compileSchemaValidators()` function.\n *\n * @param validateFns - The map of the validation functions that are created by the `compileSchemaValidators()` function\n * @param rootSchema - The root schema that was used with the `compileSchemaValidators()` function\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n * @returns - The precompiled validator implementation resulting from the set of parameters provided\n */\nexport default function createPrecompiledValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validateFns: ValidatorFunctions, rootSchema: S, localizer?: Localizer): ValidatorType<T, S, F> {\n  return new AJV8PrecompiledValidator<T, S, F>(validateFns, rootSchema, localizer);\n}\n","import customizeValidator from './customizeValidator';\nimport createPrecompiledValidator from './createPrecompiledValidator';\n\nexport { customizeValidator, createPrecompiledValidator };\nexport * from './types';\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","verbose","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","ajv","_extends","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","transformRJSFValidationErrors","errors","uiSchema","map","e","instancePath","keyword","params","schemaPath","parentSchema","rest","_objectWithoutPropertiesLoose","_excluded","_rest$message","message","property","replace","stack","trim","missingProperty","currentProperty","uiSchemaTitle","getUiOptions","get","title","parentSchemaTitle","PROPERTIES_KEY","name","processRawValidationErrors","validator","rawErrors","formData","schema","customValidate","transformErrors","invalidSchemaError","validationError","concat","errorSchema","toErrorSchema","$schema","__errors","newFormData","getDefaultFormState","errorHandler","createErrorHandler","userErrorSchema","unwrapErrorHandler","validationDataMerge","AJV8Validator","options","localizer","_proto","prototype","toErrorList","fieldPath","rawValidation","compilationError","undefined","compiledValidator","ID_KEY","getSchema","compile","err","validateFormData","isValid","rootSchema","_rootSchema$ID_KEY","rootSchemaId","ROOT_SCHEMA_PREFIX","addSchema","schemaWithIdRefPrefix","withIdRefPrefix","result","console","warn","removeSchema","customizeValidator","AJV8PrecompiledValidator","validateFns","mainValidator","getValidator","key","hashForSchema","Error","isEqual","JUNK_OPTION_ID","createPrecompiledValidator"],"mappings":"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"}