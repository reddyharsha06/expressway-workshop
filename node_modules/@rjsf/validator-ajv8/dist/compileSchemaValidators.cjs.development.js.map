{"version":3,"file":"compileSchemaValidators.cjs.development.js","sources":["../src/compileSchemaValidators.ts"],"sourcesContent":["import fs from 'fs';\nimport standaloneCode from 'ajv/dist/standalone';\nimport { RJSFSchema, StrictRJSFSchema, schemaParser } from '@rjsf/utils';\n\nimport createAjvInstance from './createAjvInstance';\nimport { CustomValidatorOptionsType } from './types';\n\n/** The function used to compile a schema into an output file in the form that allows it to be used as a precompiled\n * validator. The main reasons for using a precompiled validator is reducing code size, improving validation speed and,\n * most importantly, avoiding dynamic code compilation when prohibited by a browser's Content Security Policy. For more\n * information about AJV code compilation see: https://ajv.js.org/standalone.html\n *\n * @param schema - The schema to be compiled into a set of precompiled validators functions\n * @param output - The name of the file into which the precompiled validator functions will be generated\n * @param [options={}] - The set of `CustomValidatorOptionsType` information used to alter the AJV validator used for\n *        compiling the schema. They are the same options that are passed to the `customizeValidator()` function in\n *        order to modify the behavior of the regular AJV-based validator.\n */\nexport default function compileSchemaValidators<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  output: string,\n  options: CustomValidatorOptionsType = {}\n) {\n  console.log('parsing the schema');\n  const schemaMaps = schemaParser(schema);\n  const schemas = Object.values(schemaMaps);\n\n  const { additionalMetaSchemas, customFormats, ajvOptionsOverrides = {}, ajvFormatOptions, AjvClass } = options;\n  // Allow users to turn off the `lines: true` feature in their own overrides, but NOT the `source: true`\n  const compileOptions = {\n    ...ajvOptionsOverrides,\n    code: { lines: true, ...ajvOptionsOverrides.code, source: true },\n    schemas,\n  };\n  const ajv = createAjvInstance(additionalMetaSchemas, customFormats, compileOptions, ajvFormatOptions, AjvClass);\n\n  const moduleCode = standaloneCode(ajv);\n  console.log(`writing ${output}`);\n  fs.writeFileSync(output, moduleCode);\n}\n"],"names":["compileSchemaValidators","schema","output","options","console","log","schemaMaps","schemaParser","schemas","Object","values","_options","additionalMetaSchemas","customFormats","_options$ajvOptionsOv","ajvOptionsOverrides","ajvFormatOptions","AjvClass","compileOptions","_extends","code","lines","source","ajv","createAjvInstance","moduleCode","standaloneCode","fs","writeFileSync"],"mappings":";;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;AAUG;AACW,SAAUA,uBAAuBA,CAC7CC,MAAS,EACTC,MAAc,EACdC,OAAA,EAAwC;AAAA,EAAA,IAAxCA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,OAAA,GAAsC,EAAE,CAAA;AAAA,GAAA;AAExCC,EAAAA,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAAA;AACjC,EAAA,IAAMC,UAAU,GAAGC,kBAAY,CAACN,MAAM,CAAC,CAAA;AACvC,EAAA,IAAMO,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACJ,UAAU,CAAC,CAAA;EAEzC,IAAAK,QAAA,GAAuGR,OAAO;IAAtGS,qBAAqB,GAAAD,QAAA,CAArBC,qBAAqB;IAAEC,aAAa,GAAAF,QAAA,CAAbE,aAAa;IAAAC,qBAAA,GAAAH,QAAA,CAAEI,mBAAmB;AAAnBA,IAAAA,mBAAmB,GAAAD,qBAAA,KAAA,KAAA,CAAA,GAAG,EAAE,GAAAA,qBAAA;IAAEE,gBAAgB,GAAAL,QAAA,CAAhBK,gBAAgB;IAAEC,QAAQ,GAAAN,QAAA,CAARM,QAAQ,CAAA;AAClG;AACA,EAAA,IAAMC,cAAc,GAAAC,0BAAA,CAAA,EAAA,EACfJ,mBAAmB,EAAA;AACtBK,IAAAA,IAAI,EAAAD,0BAAA,CAAA;AAAIE,MAAAA,KAAK,EAAE,IAAA;KAASN,EAAAA,mBAAmB,CAACK,IAAI,EAAA;AAAEE,MAAAA,MAAM,EAAE,IAAA;KAAM,CAAA;AAChEd,IAAAA,OAAO,EAAPA,OAAAA;GACD,CAAA,CAAA;AACD,EAAA,IAAMe,GAAG,GAAGC,mCAAiB,CAACZ,qBAAqB,EAAEC,aAAa,EAAEK,cAAc,EAAEF,gBAAgB,EAAEC,QAAQ,CAAC,CAAA;AAE/G,EAAA,IAAMQ,UAAU,GAAGC,kCAAc,CAACH,GAAG,CAAC,CAAA;AACtCnB,EAAAA,OAAO,CAACC,GAAG,CAAYH,UAAAA,GAAAA,MAAQ,CAAC,CAAA;AAChCyB,EAAAA,sBAAE,CAACC,aAAa,CAAC1B,MAAM,EAAEuB,UAAU,CAAC,CAAA;AACtC;;;;"}