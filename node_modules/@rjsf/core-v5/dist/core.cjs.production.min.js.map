{"version":3,"file":"core.cjs.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/TimeWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget, title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext, globalUiOptions } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget = 'files', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label={label}\n        hideLabel={!displayLabel}\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString, globalUiOptions } = registry;\n  const {\n    widget = 'checkbox',\n    title: uiTitle,\n    // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type\n    label: displayLabel = true,\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n  const label = uiTitle ?? title ?? name;\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport {\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getDiscriminatorFieldFromSchema,\n  getUiOptions,\n  getWidget,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /* The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const {\n      schema,\n      registry: { schemaUtils },\n    } = this.props;\n\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);\n    if (option > 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString, globalUiOptions, schemaUtils } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type ? option : Object.assign({}, option, { type: baseType });\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label={title ?? name}\n            hideLabel={!displayLabel}\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString, globalUiOptions } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = uiOptions.title ?? schema.title ?? name;\n    const description = uiOptions.description ?? schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`\n      title: uiOptions.label === false ? '' : title,\n      description: uiOptions.label === false ? undefined : description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      errorSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${getSchemaType(schema)}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions<T, S, F>(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = uiTitle ?? title ?? name;\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className || ''}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n","import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n  const description = options.description ?? schema.description;\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        {labelValue(<span>{label}</span>, hideLabel)}\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n","import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n","import { ChangeEvent, useCallback, useState } from 'react';\nimport {\n  dataURItoBlob,\n  FormContextType,\n  getTemplate,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FileInfoPreview<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  fileInfo,\n  registry,\n}: {\n  fileInfo: FileInfoType;\n  registry: Registry<T, S, F>;\n}) {\n  const { translateString } = registry;\n  const { dataURL, type, name } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n\n  if (type.indexOf('image') !== -1) {\n    return <img src={dataURL} style={{ maxWidth: '100%' }} className='file-preview' />;\n  }\n\n  return (\n    <>\n      {' '}\n      <a download={`preview-${name}`} href={dataURL} className='file-download'>\n        {translateString(TranslatableString.PreviewLabel)}\n      </a>\n    </>\n  );\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n  preview,\n}: {\n  filesInfo: FileInfoType[];\n  registry: Registry<T, S, F>;\n  preview?: boolean;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n            {preview && <FileInfoPreview<T, S, F> fileInfo={fileInfo} registry={registry} />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]): FileInfoType[] {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        dataURL,\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(\n    Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      // Due to variances in themes, dealing with multiple files for the array case now happens one file at a time.\n      // This is because we don't pass `multiple` into the `BaseInputTemplate` anymore. Instead, we deal with the single\n      // file in each event and concatenate them together ourselves\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          setFilesInfo(filesInfo.concat(filesInfoEvent[0]));\n          onChange(value.concat(newValue[0]));\n        } else {\n          setFilesInfo(filesInfoEvent);\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, value, filesInfo, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        required={value ? false : required} // this turns off HTML required validation when a value exists\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} preview={options.filePreview} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n","import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={id}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n","import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n","import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n","import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n","import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  SUBMIT_BTN_OPTIONS_KEY,\n  TemplatesType,\n  toErrorList,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  UI_OPTIONS_KEY,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n  Experimental_DefaultFormStateBehavior,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean | ((error: RJSFValidationError) => void);\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  /** Optional configuration object with flags, if provided, allows users to override default form state behavior\n   * Currently only affecting minItems on array fields and handling of setting defaults based on the value of\n   * `emptyObjectFields`\n   */\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    const experimental_defaultFormStateBehavior =\n      'experimental_defaultFormStateBehavior' in props\n        ? props.experimental_defaultFormStateBehavior\n        : this.props.experimental_defaultFormStateBehavior;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema, experimental_defaultFormStateBehavior)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema, experimental_defaultFormStateBehavior);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field && field.length) {\n      // If we got a list with length > 0\n      field = field[0];\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        if (typeof focusOnFirstError === 'function') {\n          focusOnFirstError(schemaValidation.errors[0]);\n        } else {\n          this.focusOnError(schemaValidation.errors[0]);\n        }\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions<T, S, F>(uiSchema);\n    if (disabled) {\n      submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };\n    }\n    const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n\n        {children ? children : <SubmitButton uiSchema={submitUiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","_Component","props","_this","call","this","_getNewFormDataRow","_this$props","schema","schemaUtils","registry","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","_handleAddClick","onAddIndexClick","index","onCopyIndexClick","preventDefault","onChange","state","newKeyedFormDataRow","cloneDeep","newKeyedFormData","concat","undefined","splice","push","setState","updatedKeyedFormData","onDropIndexClick","newErrorSchema","_this$props2","errorSchema","idx","i","parseInt","set","filter","_","onReorderClick","newIndex","currentTarget","blur","_this$props3","_newKeyedFormData","slice","onChangeForIndex","value","id","_extends2","_this$props4","_extends","onSelectChange","_this$props5","idSchema","$id","_props$formData","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","_proto","prototype","isItemRequired","type","includes","canAddItem","formItems","_this$props6","addable","getUiOptions","uiSchema","globalUiOptions","maxItems","render","_this$props7","translateString","ITEMS_KEY","uiOptions","UnsupportedFieldTemplate","getTemplate","_jsx","reason","TranslatableString","MissingItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_this2","_this$props8","_this$props8$uiSchema","name","_this$props8$disabled","disabled","_this$props8$readonly","readonly","_this$props8$autofocu","autofocus","_this$props8$required","required","onBlur","onFocus","idPrefix","_this$props8$idSepara","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","_ref","_this$props9","_this$props9$disabled","_this$props9$readonly","_this$props9$autofocu","_this$props9$required","hideError","placeholder","_this$props9$formData","widgets","_getUiOptions2","widget","uiTitle","options","_objectWithoutPropertiesLoose","_excluded","Widget","getWidget","label","displayLabel","getDisplayLabel","multiple","hideLabel","_ref2","_this$props10","_this$props10$formDat","_this$props10$disable","_this$props10$readonl","_this$props10$autofoc","_this$props10$require","enumOptions","optionsList","_getUiOptions3","_getUiOptions3$widget","_excluded2","_ref3","_this$props11","_this$props11$disable","_this$props11$readonl","_this$props11$autofoc","_this$props11$require","_this$props11$formDat","_getUiOptions4","_getUiOptions4$widget","_excluded3","_this3","_this$props12","_this$props12$uiSchem","_this$props12$formDat","_this$props12$idSepar","_this$props12$disable","_this$props12$readonl","_this$props12$autofoc","_this$props12$require","_this$props$formData","itemSchemas","additionalSchema","additional","canRemove","_props$canRemove","_this$props13","_registry$fields","fields","ItemSchemaField","ArraySchemaField","SchemaField","_getUiOptions5","_getUiOptions5$ordera","orderable","_getUiOptions5$remova","removable","_getUiOptions5$copyab","copyable","has","moveUp","moveDown","copy","remove","toolbar","Object","keys","some","children","jsx","hasCopy","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","get","_this$props14","ArrayItemTitle","Component","BooleanField","_getUiOptions","_getUiOptions$widget","_getUiOptions$label","yes","YesLabel","no","NoLabel","oneOf","option","o","_schema$enum","schemaWithEnumNames","enums","enumNames","every","v","enum","AnyOfField","onOptionChange","_this$state","selectedOption","retrievedOptions","intOption","newOption","newFormData","sanitizeDataForNewSchema","getFieldId","opt","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","discriminator","getDiscriminatorFieldFromSchema","getClosestMatchingOption","optionSchema","baseType","_this$props6$disabled","_this$props6$errorSch","_SchemaField","_this$state2","autocomplete","_getUiOptions$title","ERRORS_KEY","fieldErrorSchema","omit","assign","translateEnum","TitleOptionPrefix","OptionPrefix","translateParams","String","_jsxs","default","isEmpty","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","_useState","useState","lastValue","setLastValue","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_len","arguments","args","_key","apply","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","_extends3","onDropPropertyClick","copiedFormData","unset","getAvailableKey","preferredKey","_getUiOptions$duplica","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","_newKeys","_extends4","newKeys","keyValues","renamedObj","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","getDefaultValue","isRequired","indexOf","NewStringDefault","_uiOptions$title","_uiOptions$descriptio","orderedProperties","_this$props6$uiSchema","_this$props6$required","_this$props6$readonly","_schema$properties","properties","schemaProperties","description","orderProperties","order","err","style","color","Markdown","InvalidObjectField","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","_props$wasPropertyKey","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnknownFieldType","getFieldComponent","Boolean","readOnly","uiSchemaHideError","__errors","UI_OPTIONS_KEY","help","classNames","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","jsxs","_Fragment","isSelect","shouldComponentUpdate","_props$disabled","_props$readonly","_props$autofocus","format","defaultWidget","hasWidget","_getUiOptions$placeho","NullField","useEffect","ArrayFieldDescriptionTemplate","_options$label","ArrayFieldItemTemplate","_registry$templates$B","templates","ButtonTemplates","CopyButton","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","BaseInputTemplate","onChangeOverride","rest","console","log","Error","inputValue","inputProps","getInputProps","_onChange","target","emptyValue","_onBlur","_onFocus","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","_getSubmitButtonOptio","getSubmitButtonOptions","_getSubmitButtonOptio2","submitButtonProps","norender","submitText","IconButton","_props$iconType","iconType","icon","otherProps","DescriptionField","ErrorList","ErrorsLabel","error","stack","REQUIRED_FIELD_SYMBOL","Label","htmlFor","WrapIfAdditionalTemplate","_props$errors","errorId","elem","helpId","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","UnsupportedFieldWithId","UnsupportedFieldWithReason","UnsupportedFieldWithIdAndReason","keyLabel","KeyLabel","defaultValue","border","rangeOptions","start","stop","pad","dateElementProps","time","yearsRange","Date","getFullYear","data","range","year","month","day","hour","minute","second","DateElement","select","rootId","SelectWidget","AltDateWidget","_ref2$time","_ref2$disabled","_ref2$readonly","_ref2$autofocus","_useReducer","useReducer","action","parseDateString","stateValue","toDateString","values","readyForChange","property","_setState","handleSetNow","nextState","toJSON","handleClear","elemProps","hideNowButton","href","NowLabel","hideClearButton","ClearLabel","AltDateTimeWidget","_ref$time","CheckboxWidget","_options$description","_ref$autofocus","schemaRequiresTrueValue","checked","handleBlur","handleFocus","labelValue","CheckboxesWidget","_ref$options","_ref$options$inline","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","checkbox","optionId","enumOptionsSelectValue","enumOptionsDeselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FileInfoPreview","fileInfo","src","maxWidth","download","PreviewLabel","FilesInfo","filesInfo","preview","extractFileInfo","dataURLs","_dataURItoBlob","dataURItoBlob","blob","FileWidget","setFilesInfo","files","all","from","then","filesInfoEvent","newValue","accept","filePreview","HiddenWidget","PasswordWidget","RadioWidget","radio","RangeWidget","getValue","selected","_ref$multiple","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","_ref4","rows","TextWidget","TimeWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","englishStringTranslator","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","validationDataMerge","toErrorList","reset","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","inputFormData","edit","experimental_defaultFormStateBehavior","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","getValidator","validateFormData","renderErrors","_this$state3","getRegistry","_this$props$templates","customTranslateString","_this$props4$uiSchema","_getDefaultRegistry","UI_GLOBAL_OPTIONS_KEY","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_this$props5$idPrefix","_this$props5$idSepara","_toPath","unshift","elementId","elements","querySelector","focus","focusOnFirstError","onError","_UI_OPTIONS_KEY","_submitUiSchema","_this$props7$classNam","tagName","method","autoComplete","enctype","acceptcharset","_this$props7$noHtml5V","noHtml5Validate","_this$props7$disabled","_this$props7$readonly","_this$props7$showErro","showErrorList","_internalFormWrapper","_this$state4","as","FormTag","_getUiOptions$SUBMIT_","SUBMIT_BTN_OPTIONS_KEY","submitOptions","submitUiSchema","encType","acceptCharset","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}