{"version":3,"file":"utils.esm.js","sources":["../src/isObject.ts","../src/allowAdditionalItems.ts","../src/asNumber.ts","../src/constants.ts","../src/getUiOptions.ts","../src/canExpand.ts","../src/createErrorHandler.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/schema/getFirstMatchingOption.ts","../src/getDiscriminatorFieldFromSchema.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/mergeSchemas.ts","../src/schema/retrieveSchema.ts","../src/schema/getClosestMatchingOption.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/schema/getDefaultFormState.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/sanitizeDataForNewSchema.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/dataURItoBlob.ts","../src/replaceStringParameters.ts","../src/englishStringTranslator.ts","../src/enumOptionsValueForIndex.ts","../src/enumOptionsDeselectValue.ts","../src/enumOptionsIsSelected.ts","../src/enumOptionsIndexForValue.ts","../src/enumOptionsSelectValue.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getInputProps.ts","../src/getSubmitButtonOptions.ts","../src/getTemplate.ts","../src/getWidget.tsx","../src/hashForSchema.ts","../src/hasWidget.ts","../src/idGenerators.ts","../src/labelValue.ts","../src/localToUTC.ts","../src/toConstant.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/pad.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/toErrorList.ts","../src/toErrorSchema.ts","../src/unwrapErrorHandler.ts","../src/utcToLocal.ts","../src/validationDataMerge.ts","../src/withIdRefPrefix.ts","../src/enums.ts","../src/parser/ParserValidator.ts","../src/parser/schemaParser.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== 'undefined' && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== 'undefined' && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === 'object' && thing !== null && !Array.isArray(thing);\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn('additionalItems=true is currently not supported');\n  }\n  return isObject(schema.additionalItems);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property';\nexport const ADDITIONAL_PROPERTIES_KEY = 'additionalProperties';\nexport const ALL_OF_KEY = 'allOf';\nexport const ANY_OF_KEY = 'anyOf';\nexport const CONST_KEY = 'const';\nexport const DEFAULT_KEY = 'default';\nexport const DEFINITIONS_KEY = 'definitions';\nexport const DEPENDENCIES_KEY = 'dependencies';\nexport const ENUM_KEY = 'enum';\nexport const ERRORS_KEY = '__errors';\nexport const ID_KEY = '$id';\nexport const IF_KEY = 'if';\nexport const ITEMS_KEY = 'items';\nexport const JUNK_OPTION_ID = '_$junk_option_schema_id$_';\nexport const NAME_KEY = '$name';\nexport const ONE_OF_KEY = 'oneOf';\nexport const PROPERTIES_KEY = 'properties';\nexport const REQUIRED_KEY = 'required';\nexport const SUBMIT_BTN_OPTIONS_KEY = 'submitButtonOptions';\nexport const REF_KEY = '$ref';\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = '__rjsf_additionalProperties';\nexport const ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\nexport const UI_FIELD_KEY = 'ui:field';\nexport const UI_WIDGET_KEY = 'ui:widget';\nexport const UI_OPTIONS_KEY = 'ui:options';\nexport const UI_GLOBAL_OPTIONS_KEY = 'ui:globalOptions';\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\nimport { FormContextType, GlobalUISchemaOptions, RJSFSchema, StrictRJSFSchema, UIOptionsType, UiSchema } from './types';\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  uiSchema: UiSchema<T, S, F> = {},\n  globalOptions: GlobalUISchemaOptions = {}\n): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf('ui:') === 0)\n    .reduce(\n      (options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n          console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n          return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n          return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n      },\n      { ...globalOptions }\n    );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\nimport getUiOptions from './getUiOptions';\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  uiSchema: UiSchema<T, S, F> = {},\n  formData?: T\n) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { FieldValidation, FormValidation, GenericObjectType } from './types';\n\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler<T = any>(formData: T): FormValidation<T> {\n  const handler: FieldValidation = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message: string) {\n      this[ERRORS_KEY]!.push(message);\n    },\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return { ...acc, [key]: createErrorHandler(value) };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject: GenericObjectType = formData as GenericObjectType;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return { ...acc, [key]: createErrorHandler(formObject[key]) };\n    }, handler as FormValidation<T>);\n  }\n  return handler as FormValidation<T>;\n}\n","import isEqualWith from 'lodash/isEqualWith';\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === 'function' && typeof other === 'function') {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from 'jsonpointer';\nimport omit from 'lodash/omit';\n\nimport { REF_KEY } from './constants';\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(key: string, object: GenericObjectType) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<S extends StrictRJSFSchema = RJSFSchema>(\n  $ref?: string,\n  rootSchema: S = {} as S\n): S {\n  let ref = $ref || '';\n  if (ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { PROPERTIES_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If we have a discriminator field, then we will use this to make the determination\n    if (discriminatorField && has(option, [PROPERTIES_KEY, discriminatorField])) {\n      const value = get(formData, discriminatorField);\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n      if (validator.isValid(discriminator, value, rootSchema)) {\n        return i;\n      }\n    } else if (option[PROPERTIES_KEY]) {\n      // If the schema describes an object then we need to add slightly more\n      // strict matching to the schema, because unless the schema uses the\n      // \"requires\" keyword, an object will match the schema as long as it\n      // doesn't have matching keys with a conflicting type. To do this we use an\n      // \"anyOf\" with an array of requires. This augmentation expresses that the\n      // schema should match if any of the keys in the schema are present on the\n      // object and pass validation.\n      //\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","import getMatchingOption from './getMatchingOption';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema, discriminatorField);\n}\n","import get from 'lodash/get';\nimport isString from 'lodash/isString';\n\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the `discriminator.propertyName` when defined in the `schema` if it is a string. A warning is generated when\n * it is not a string. Returns `undefined` when a valid discriminator is not present.\n *\n * @param schema - The schema from which the discriminator is potentially obtained\n * @returns - The `discriminator.propertyName` if it exists in the schema, otherwise `undefined`\n */\nexport default function getDiscriminatorFieldFromSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  let discriminator: string | undefined;\n  const maybeString = get(schema, 'discriminator.propertyName', undefined);\n  if (isString(maybeString)) {\n    discriminator = maybeString;\n  } else if (maybeString !== undefined) {\n    console.warn(`Expecting discriminator to be a string, got \"${typeof maybeString}\" instead`);\n  }\n  return discriminator;\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}\n","import guessType from './guessType';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return 'string';\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes('null')) {\n    type = type.find((type) => type !== 'null');\n  }\n\n  return type;\n}\n","import union from 'lodash/union';\n\nimport { REQUIRED_KEY } from './constants';\nimport getSchemaType from './getSchemaType';\nimport isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(obj1: GenericObjectType, obj2: GenericObjectType) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from 'lodash/get';\nimport set from 'lodash/set';\nimport times from 'lodash/times';\nimport mergeAllOf, { Options } from 'json-schema-merge-allof';\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  DEPENDENCIES_KEY,\n  IF_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from '../constants';\nimport findSchemaDefinition, { splitKeyElementFromObject } from '../findSchemaDefinition';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport guessType from '../guessType';\nimport isObject from '../isObject';\nimport mergeSchemas from '../mergeSchemas';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getFirstMatchingOption from './getFirstMatchingOption';\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S = {} as S, rawFormData?: T): S {\n  return retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, rawFormData)[0];\n}\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema. If `expandAllBranches` is true, then the `retrieveSchemaInteral()` results for both\n * conditions will be returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A list of schemas with the appropriate conditions resolved, possibly with all branches expanded\n */\nexport function resolveCondition<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;\n\n  const conditionValue = validator.isValid(expression as S, formData, rootSchema);\n  let resolvedSchemas = [resolvedSchemaLessConditional as S];\n  let schemas: S[] = [];\n  if (expandAllBranches) {\n    if (then && typeof then !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, then as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n    if (otherwise && typeof otherwise !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, otherwise as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n  } else {\n    const conditionalSchema = conditionValue ? then : otherwise;\n    if (conditionalSchema && typeof conditionalSchema !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, conditionalSchema as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n  }\n  if (schemas.length) {\n    resolvedSchemas = schemas.map((s) => mergeSchemas(resolvedSchemaLessConditional, s) as S);\n  }\n  return resolvedSchemas.flatMap((s) =>\n    retrieveSchemaInternal<T, S, F>(validator, s, rootSchema, formData, expandAllBranches)\n  );\n}\n\n/** Given a list of lists of allOf, anyOf or oneOf values, create a list of lists of all permutations of the values. The\n * `listOfLists` is expected to be all resolved values of the 1st...nth schemas within an `allOf`, `anyOf` or `oneOf`.\n * From those lists, build a matrix for each `xxxOf` where there is more than one schema for a row in the list of lists.\n *\n * For example:\n * - If there are three xxxOf rows (A, B, C) and they have been resolved such that there is only one A, two B and three\n *   C schemas then:\n *   - The permutation for the first row is `[[A]]`\n *   - The permutations for the second row are `[[A,B1], [A,B2]]`\n *   - The permutations for the third row are `[[A,B1,C1], [A,B1,C2], [A,B1,C3], [A,B2,C1], [A,B2,C2], [A,B2,C3]]`\n *\n * @param listOfLists - The list of lists of elements that represent the allOf, anyOf or oneOf resolved values in order\n * @returns - The list of all permutations of schemas for a set of `xxxOf`s\n */\nexport function getAllPermutationsOfXxxOf<S extends StrictRJSFSchema = RJSFSchema>(listOfLists: S[][]) {\n  const allPermutations: S[][] = listOfLists.reduce<S[][]>(\n    (permutations, list) => {\n      // When there are more than one set of schemas for a row, duplicate the set of permutations and add in the values\n      if (list.length > 1) {\n        return list.flatMap((element) => times(permutations.length, (i) => [...permutations[i]].concat(element)));\n      }\n      // Otherwise just push in the single value into the current set of permutations\n      permutations.forEach((permutation) => permutation.push(list[0]));\n      return permutations;\n    },\n    [[]] as S[][] // Start with an empty list\n  );\n\n  return allPermutations;\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `resolveDependencies()` helper calls. If\n * `expandAllBranches` is true, then all possible dependencies and/or allOf branches are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas having its references, dependencies and allOf schemas resolved\n */\nexport function resolveSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S, F>(validator, schema, rootSchema, expandAllBranches, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchemas = resolveDependencies<T, S, F>(validator, schema, rootSchema, expandAllBranches, formData);\n    return resolvedSchemas.flatMap((s) => {\n      return retrieveSchemaInternal<T, S, F>(validator, s, rootSchema, formData, expandAllBranches);\n    });\n  }\n  if (ALL_OF_KEY in schema && Array.isArray(schema.allOf)) {\n    const allOfSchemaElements: S[][] = schema.allOf.map((allOfSubschema) =>\n      retrieveSchemaInternal<T, S, F>(validator, allOfSubschema as S, rootSchema, formData, expandAllBranches)\n    );\n    const allPermutations = getAllPermutationsOfXxxOf<S>(allOfSchemaElements);\n    return allPermutations.map((permutation) => ({ ...schema, allOf: permutation }));\n  }\n  // No $ref or dependencies or allOf attribute was found, returning the original schema.\n  return [schema];\n}\n\n/** Resolves references within a schema and then returns the `retrieveSchemaInternal()` of the resolved schema. Passes\n * the `expandAllBranches` flag down to the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list schemas retrieved after having all references resolved\n */\nexport function resolveReference<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Retrieve the referenced schema definition.\n  const refSchema = findSchemaDefinition<S>($ref, rootSchema);\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchemaInternal<T, S, F>(\n    validator,\n    { ...refSchema, ...localSchema },\n    rootSchema,\n    formData,\n    expandAllBranches\n  );\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, theSchema: S, rootSchema?: S, aFormData?: T): S {\n  // Clone the schema so that we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType = aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S['additionalProperties'] = {};\n    if (typeof schema.additionalProperties !== 'boolean') {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S, F>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if ('type' in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else if (ANY_OF_KEY in schema.additionalProperties! || ONE_OF_KEY in schema.additionalProperties!) {\n        additionalProperties = {\n          type: 'object',\n          ...schema.additionalProperties,\n        };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Internal handler that retrieves an expanded schema that has had all of its conditions, additional properties,\n * references and dependencies resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData`\n * that is used to do the potentially recursive resolution. If `expandAllBranches` is true, then all possible branches\n * of the schema and its references, conditions and dependencies are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @param [expandAllBranches=false] - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @returns - The schema(s) resulting from having its conditions, additional properties, references and dependencies\n *          resolved. Multiple schemas may be returned if `expandAllBranches` is true.\n */\nexport function retrieveSchemaInternal<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, rawFormData?: T, expandAllBranches = false): S[] {\n  if (!isObject(schema)) {\n    return [{} as S];\n  }\n  const resolvedSchemas = resolveSchema<T, S, F>(validator, schema, rootSchema, expandAllBranches, rawFormData);\n  return resolvedSchemas.flatMap((s: S) => {\n    let resolvedSchema = s;\n    if (IF_KEY in resolvedSchema) {\n      return resolveCondition<T, S, F>(validator, resolvedSchema, rootSchema, expandAllBranches, rawFormData as T);\n    }\n    if (ALL_OF_KEY in schema) {\n      try {\n        resolvedSchema = mergeAllOf(s, {\n          deep: false,\n        } as Options) as S;\n      } catch (e) {\n        console.warn('could not merge subschemas in allOf:\\n', e);\n        const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n        return resolvedSchemaWithoutAllOf as S;\n      }\n    }\n    const hasAdditionalProperties =\n      ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;\n    if (hasAdditionalProperties) {\n      return stubExistingAdditionalProperties<T, S, F>(validator, resolvedSchema, rootSchema, rawFormData as T);\n    }\n\n    return resolvedSchema;\n  });\n}\n\n/** Resolves an `anyOf` or `oneOf` within a schema (if present) to the list of schemas returned from\n * `retrieveSchemaInternal()` for the best matching option. If `expandAllBranches` is true, then a list of schemas for ALL\n * options are retrieved and returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema, defaults to an empty object\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function resolveAnyOrOneOfSchemas<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, expandAllBranches: boolean, rawFormData?: T) {\n  let anyOrOneOf: S[] | undefined;\n  if (Array.isArray(schema.oneOf)) {\n    anyOrOneOf = schema.oneOf as S[];\n  } else if (Array.isArray(schema.anyOf)) {\n    anyOrOneOf = schema.anyOf as S[];\n  }\n  if (anyOrOneOf) {\n    // Ensure that during expand all branches we pass an object rather than undefined so that all options are interrogated\n    const formData = rawFormData === undefined && expandAllBranches ? ({} as T) : rawFormData;\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    anyOrOneOf = anyOrOneOf.map((s) => {\n      if (REF_KEY in s) {\n        // For this ref situation, don't expand all branches and just pick the first/only schema result\n        return resolveReference<T, S, F>(validator, s, rootSchema, false, formData)[0];\n      }\n      return s;\n    });\n    // Call this to trigger the set of isValid() calls that the schema parser will need\n    const option = getFirstMatchingOption<T, S, F>(validator, formData, anyOrOneOf, rootSchema, discriminator);\n    if (expandAllBranches) {\n      return anyOrOneOf;\n    }\n    schema = anyOrOneOf[option] as S;\n  }\n  return [schema];\n}\n\n/** Resolves dependencies within a schema and its 'anyOf/oneOf' children. Passes the `expandAllBranches` flag down to\n * the `resolveAnyOrOneOfSchema()` and `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas with their dependencies resolved\n */\nexport function resolveDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  const resolvedSchemas = resolveAnyOrOneOfSchemas<T, S, F>(\n    validator,\n    remainingSchema as S,\n    rootSchema,\n    expandAllBranches,\n    formData\n  );\n  return resolvedSchemas.flatMap((resolvedSchema) =>\n    processDependencies<T, S, F>(validator, dependencies, resolvedSchema, rootSchema, expandAllBranches, formData)\n  );\n}\n\n/** Processes all the `dependencies` recursively into the list of `resolvedSchema`s as needed. Passes the\n * `expandAllBranches` flag down to the `withDependentSchema()` and the recursive `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  dependencies: S['dependencies'],\n  resolvedSchema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  let schemas = [resolvedSchema];\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (!expandAllBranches && get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (resolvedSchema.properties && !(dependencyKey in resolvedSchema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schemas[0] = withDependentProperties<S>(resolvedSchema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schemas = withDependentSchema<T, S, F>(\n        validator,\n        resolvedSchema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        expandAllBranches,\n        formData\n      );\n    }\n    return schemas.flatMap((schema) =>\n      processDependencies<T, S, F>(validator, remainingDependencies, schema, rootSchema, expandAllBranches, formData)\n    );\n  }\n  return schemas;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionallyRequired?: string[]\n) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `withExactlyOneSubschema()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData]- The current formData to assist retrieving a schema\n * @returns - The list of schemas with the dependent schema resolved into them\n */\nexport function withDependentSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const dependentSchemas = retrieveSchemaInternal<T, S, F>(\n    validator,\n    dependencyValue,\n    rootSchema,\n    formData,\n    expandAllBranches\n  );\n  return dependentSchemas.flatMap((dependent) => {\n    const { oneOf, ...dependentSchema } = dependent;\n    schema = mergeSchemas(schema, dependentSchema) as S;\n    // Since it does not contain oneOf, we return the original schema.\n    if (oneOf === undefined) {\n      return schema;\n    }\n    // Resolve $refs inside oneOf.\n    const resolvedOneOfs = oneOf.map((subschema) => {\n      if (typeof subschema === 'boolean' || !(REF_KEY in subschema)) {\n        return [subschema as S];\n      }\n      return resolveReference<T, S, F>(validator, subschema as S, rootSchema, expandAllBranches, formData);\n    });\n    const allPermutations = getAllPermutationsOfXxxOf(resolvedOneOfs);\n    return allPermutations.flatMap((resolvedOneOf) =>\n      withExactlyOneSubschema<T, S, F>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        resolvedOneOf,\n        expandAllBranches,\n        formData\n      )\n    );\n  });\n}\n\n/** Returns a list of `schema`s with the best choice from the `oneOf` options merged into it. If `expandAllBranches` is\n * true, then a list of schemas for ALL options are retrieved and returned. Passes the `expandAllBranches` flag down to\n * the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S['oneOf'],\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === 'boolean' || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: 'object',\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      return validator.isValid(conditionSchema, formData, rootSchema) || expandAllBranches;\n    }\n    return false;\n  });\n\n  if (!expandAllBranches && validSubschemas!.length !== 1) {\n    console.warn(\"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\");\n    return [schema];\n  }\n  return validSubschemas.flatMap((s) => {\n    const subschema: S = s as S;\n    const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties as GenericObjectType);\n    const dependentSchema = { ...subschema, properties: dependentSubschema };\n    const schemas = retrieveSchemaInternal<T, S, F>(\n      validator,\n      dependentSchema,\n      rootSchema,\n      formData,\n      expandAllBranches\n    );\n    return schemas.map((s) => mergeSchemas(schema, s) as S);\n  });\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport reduce from 'lodash/reduce';\nimport times from 'lodash/times';\n\nimport getFirstMatchingOption from './getFirstMatchingOption';\nimport retrieveSchema from './retrieveSchema';\nimport { ONE_OF_KEY, REF_KEY, JUNK_OPTION_ID } from '../constants';\nimport guessType from '../guessType';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION: StrictRJSFSchema = {\n  type: 'object',\n  $id: JUNK_OPTION_ID,\n  properties: {\n    __not_really_there__: {\n      type: 'number',\n    },\n  },\n};\n\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  schema?: S,\n  formData: any = {}\n): number {\n  let totalScore = 0;\n  if (schema) {\n    if (isObject(schema.properties)) {\n      totalScore += reduce(\n        schema.properties,\n        (score, value, key) => {\n          const formValue = get(formData, key);\n          if (typeof value === 'boolean') {\n            return score;\n          }\n          if (has(value, REF_KEY)) {\n            const newSchema = retrieveSchema<T, S, F>(validator, value as S, rootSchema, formValue);\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, newSchema, formValue || {});\n          }\n          if (has(value, ONE_OF_KEY) && formValue) {\n            return (\n              score + getClosestMatchingOption<T, S, F>(validator, rootSchema, formValue, get(value, ONE_OF_KEY) as S[])\n            );\n          }\n          if (value.type === 'object') {\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, value as S, formValue || {});\n          }\n          if (value.type === guessType(formValue)) {\n            // If the types match, then we bump the score by one\n            let newScore = score + 1;\n            if (value.default) {\n              // If the schema contains a readonly default value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.default ? 1 : -1;\n            } else if (value.const) {\n              // If the schema contains a const value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.const ? 1 : -1;\n            }\n            // TODO eventually, deal with enums/arrays\n            return newScore;\n          }\n          return score;\n        },\n        0\n      );\n    } else if (isString(schema.type) && schema.type === guessType(formData)) {\n      totalScore += 1;\n    }\n  }\n  return totalScore;\n}\n\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  formData: T | undefined,\n  options: S[],\n  selectedOption = -1,\n  discriminatorField?: string\n): number {\n  // Reduce the array of options down to a list of the indexes that are considered matching options\n  const allValidIndexes = options.reduce((validList: number[], option, index: number) => {\n    const testOptions: S[] = [JUNK_OPTION as S, option];\n    const match = getFirstMatchingOption<T, S, F>(validator, formData, testOptions, rootSchema, discriminatorField);\n    // The match is the real option, so add its index to list of valid indexes\n    if (match === 1) {\n      validList.push(index);\n    }\n    return validList;\n  }, []);\n\n  // There is only one valid index, so return it!\n  if (allValidIndexes.length === 1) {\n    return allValidIndexes[0];\n  }\n  if (!allValidIndexes.length) {\n    // No indexes were valid, so we'll score all the options, add all the indexes\n    times(options.length, (i) => allValidIndexes.push(i));\n  }\n  type BestType = { bestIndex: number; bestScore: number };\n  // Score all the options in the list of valid indexes and return the index with the best score\n  const { bestIndex }: BestType = allValidIndexes.reduce(\n    (scoreData: BestType, index: number) => {\n      const { bestScore } = scoreData;\n      let option = options[index];\n      if (has(option, REF_KEY)) {\n        option = retrieveSchema<T, S, F>(validator, option, rootSchema, formData);\n      }\n      const score = calculateIndexScore(validator, rootSchema, option, formData);\n      if (score > bestScore) {\n        return { bestIndex: index, bestScore: score };\n      }\n      return scoreData;\n    },\n    { bestIndex: selectedOption, bestScore: 0 }\n  );\n  return bestIndex;\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n","import get from 'lodash/get';\n\nimport isObject from './isObject';\nimport { GenericObjectType } from '../src';\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(defaults?: T, formData?: T): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value);\n      }\n      return value;\n    });\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(defaults ? get(defaults, key) : {}, get(formData, key));\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | 'preventDuplicates' = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === 'preventDuplicates') {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return (Array.isArray(schema.enum) && schema.enum.length === 1) || CONST_KEY in schema;\n}\n","import isConstant from '../isConstant';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema: S = {} as S\n) {\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\nimport isSelect from './isSelect';\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema?: S) {\n  if (!schema.uniqueItems || !schema.items || typeof schema.items === 'boolean') {\n    return false;\n  }\n  return isSelect<T, S, F>(validator, schema.items as S, rootSchema);\n}\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { ANY_OF_KEY, DEFAULT_KEY, DEPENDENCIES_KEY, PROPERTIES_KEY, ONE_OF_KEY, REF_KEY } from '../constants';\nimport findSchemaDefinition from '../findSchemaDefinition';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport getSchemaType from '../getSchemaType';\nimport isObject from '../isObject';\nimport isFixedItems from '../isFixedItems';\nimport mergeDefaultsWithFormData from '../mergeDefaultsWithFormData';\nimport mergeObjects from '../mergeObjects';\nimport {\n  Experimental_DefaultFormStateBehavior,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from '../types';\nimport isMultiSelect from './isMultiSelect';\nimport retrieveSchema, { resolveDependencies } from './retrieveSchema';\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== 'boolean') {\n        return item as S;\n      }\n    }\n  } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n    return schema.items as S;\n  }\n  if (additionalItems !== AdditionalItemsHandling.Ignore && isObject(schema.additionalItems)) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value, the value of\n * `includeUndefinedValues`, the value of `emptyObjectFields` and if its parent field is required. Generally undefined\n * `computedDefault` values are added only when `includeUndefinedValues` is either true/\"excludeObjectChildren\". If `\n * includeUndefinedValues` is false and `emptyObjectFields` is not \"skipDefaults\", then non-undefined and non-empty-object\n * values will be added based on certain conditions.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param isParentRequired - The optional boolean that indicates whether the parent field is required\n * @param requiredFields - The list of fields that are required\n * @param experimental_defaultFormStateBehavior - Optional configuration object, if provided, allows users to override\n *        default form state behavior\n */\nfunction maybeAddDefaultToObject<T = any>(\n  obj: GenericObjectType,\n  key: string,\n  computedDefault: T | T[] | undefined,\n  includeUndefinedValues: boolean | 'excludeObjectChildren',\n  isParentRequired: boolean,\n  requiredFields: string[] = [],\n  experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior = {}\n) {\n  const { emptyObjectFields = 'populateAllDefaults' } = experimental_defaultFormStateBehavior;\n  if (includeUndefinedValues) {\n    obj[key] = computedDefault;\n  } else if (emptyObjectFields !== 'skipDefaults') {\n    if (isObject(computedDefault)) {\n      // Store computedDefault if it's a non-empty object(e.g. not {}) and satisfies certain conditions\n      // Condition 1: If computedDefault is not empty or if the key is a required field\n      // Condition 2: If the parent object is required or emptyObjectFields is not 'populateRequiredDefaults'\n      if (\n        (!isEmpty(computedDefault) || requiredFields.includes(key)) &&\n        (isParentRequired || emptyObjectFields !== 'populateRequiredDefaults')\n      ) {\n        obj[key] = computedDefault;\n      }\n    } else if (\n      // Store computedDefault if it's a defined primitive (e.g., true) and satisfies certain conditions\n      // Condition 1: computedDefault is not undefined\n      // Condition 2: If emptyObjectFields is 'populateAllDefaults' or if the key is a required field\n      computedDefault !== undefined &&\n      (emptyObjectFields === 'populateAllDefaults' || requiredFields.includes(key))\n    ) {\n      obj[key] = computedDefault;\n    }\n  }\n}\n\ninterface ComputeDefaultsProps<T = any, S extends StrictRJSFSchema = RJSFSchema> {\n  parentDefaults?: T;\n  rootSchema?: S;\n  rawFormData?: T;\n  includeUndefinedValues?: boolean | 'excludeObjectChildren';\n  _recurseList?: string[];\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  required?: boolean;\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [props] - Optional props for this function\n * @param [props.parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [props.rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [props.rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [props.includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [props._recurseList=[]] - The list of ref names currently being recursed, used to prevent infinite recursion\n * @param [props.experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @param [props.required] - Optional flag, if true, indicates this schema was required in the parent schema.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rawSchema: S,\n  {\n    parentDefaults,\n    rawFormData,\n    rootSchema = {} as S,\n    includeUndefinedValues = false,\n    _recurseList = [],\n    experimental_defaultFormStateBehavior = undefined,\n    required = false,\n  }: ComputeDefaultsProps<T, S> = {}\n): T | T[] | undefined {\n  const formData: T = (isObject(rawFormData) ? rawFormData : {}) as T;\n  const schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  // If we get a new schema, then we need to recompute defaults again for the new schema found.\n  let schemaToCompute: S | null = null;\n  let updatedRecurseList = _recurseList;\n\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(defaults!, schema.default as GenericObjectType) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    const refName = schema[REF_KEY];\n    // Use referenced schema defaults for this node.\n    if (!_recurseList.includes(refName!)) {\n      updatedRecurseList = _recurseList.concat(refName!);\n      schemaToCompute = findSchemaDefinition<S>(refName, rootSchema);\n    }\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, false, formData);\n    schemaToCompute = resolvedSchema[0]; // pick the first element from resolve dependencies\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(validator, itemSchema, {\n        rootSchema,\n        includeUndefinedValues,\n        _recurseList,\n        experimental_defaultFormStateBehavior,\n        parentDefaults: Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rawFormData: formData as T,\n      })\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    if (schema.oneOf!.length === 0) {\n      return undefined;\n    }\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    schemaToCompute = schema.oneOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.oneOf as S[],\n        0,\n        discriminator\n      )\n    ] as S;\n  } else if (ANY_OF_KEY in schema) {\n    if (schema.anyOf!.length === 0) {\n      return undefined;\n    }\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    schemaToCompute = schema.anyOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.anyOf as S[],\n        0,\n        discriminator\n      )\n    ] as S;\n  }\n\n  if (schemaToCompute) {\n    return computeDefaults<T, S, F>(validator, schemaToCompute, {\n      rootSchema,\n      includeUndefinedValues,\n      _recurseList: updatedRecurseList,\n      experimental_defaultFormStateBehavior,\n      parentDefaults: defaults as T | undefined,\n      rawFormData: formData as T,\n    });\n  }\n\n  // No defaults defined for this node, fallback to generic typed ones.\n  if (defaults === undefined) {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType<S>(schema)) {\n    // We need to recurse for object schema inner default values.\n    case 'object': {\n      const objectDefaults = Object.keys(schema.properties || {}).reduce((acc: GenericObjectType, key: string) => {\n        // Compute the defaults for this node, with the parent defaults we might\n        // have from a previous run: defaults[key].\n        const computedDefault = computeDefaults<T, S, F>(validator, get(schema, [PROPERTIES_KEY, key]), {\n          rootSchema,\n          _recurseList,\n          experimental_defaultFormStateBehavior,\n          includeUndefinedValues: includeUndefinedValues === true,\n          parentDefaults: get(defaults, [key]),\n          rawFormData: get(formData, [key]),\n          required: schema.required?.includes(key),\n        });\n        maybeAddDefaultToObject<T>(\n          acc,\n          key,\n          computedDefault,\n          includeUndefinedValues,\n          required,\n          schema.required,\n          experimental_defaultFormStateBehavior\n        );\n        return acc;\n      }, {}) as T;\n      if (schema.additionalProperties) {\n        // as per spec additionalProperties may be either schema or boolean\n        const additionalPropertiesSchema = isObject(schema.additionalProperties) ? schema.additionalProperties : {};\n        const keys = new Set<string>();\n        if (isObject(defaults)) {\n          Object.keys(defaults as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        let formDataRequired: string[];\n        if (isObject(formData)) {\n          formDataRequired = [];\n          Object.keys(formData as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => {\n              keys.add(key);\n              formDataRequired.push(key);\n            });\n        }\n        keys.forEach((key) => {\n          const computedDefault = computeDefaults(validator, additionalPropertiesSchema as S, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            includeUndefinedValues: includeUndefinedValues === true,\n            parentDefaults: get(defaults, [key]),\n            rawFormData: get(formData, [key]),\n            required: schema.required?.includes(key),\n          });\n          // Since these are additional properties we don’t need to add the `experimental_defaultFormStateBehavior` prop\n          maybeAddDefaultToObject<T>(\n            objectDefaults as GenericObjectType,\n            key,\n            computedDefault,\n            includeUndefinedValues,\n            required,\n            formDataRequired\n          );\n        });\n      }\n      return objectDefaults;\n    }\n    case 'array': {\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Fallback, idx);\n          return computeDefaults<T, S, F>(validator, schemaItem, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            parentDefaults: item,\n          });\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S, F>(validator, schemaItem, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            rawFormData: item,\n            parentDefaults: get(defaults, [idx]),\n          });\n        }) as T[];\n      }\n\n      const ignoreMinItemsFlagSet = experimental_defaultFormStateBehavior?.arrayMinItems === 'requiredOnly';\n      if (ignoreMinItemsFlagSet && !required) {\n        // If no form data exists or defaults are set leave the field empty/non-existent, otherwise\n        // return form data/defaults\n        return defaults ? defaults : undefined;\n      }\n\n      const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n      if (\n        !schema.minItems ||\n        isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n        schema.minItems <= defaultsLength\n      ) {\n        return defaults ? defaults : [];\n      }\n\n      const defaultEntries: T[] = (defaults || []) as T[];\n      const fillerSchema: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Invert);\n      const fillerDefault = fillerSchema.default;\n\n      // Calculate filler entries for remaining items (minItems - existing raw data/defaults)\n      const fillerEntries: T[] = new Array(schema.minItems - defaultsLength).fill(\n        computeDefaults<any, S, F>(validator, fillerSchema, {\n          parentDefaults: fillerDefault,\n          rootSchema,\n          _recurseList,\n          experimental_defaultFormStateBehavior,\n        })\n      ) as T[];\n      // then fill up the rest with either the item default or empty, up to minItems\n      return defaultEntries.concat(fillerEntries);\n    }\n  }\n\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false,\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior\n) {\n  if (!isObject(theSchema)) {\n    throw new Error('Invalid schema: ' + theSchema);\n  }\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, formData);\n  const defaults = computeDefaults<T, S, F>(validator, schema, {\n    rootSchema,\n    includeUndefinedValues,\n    experimental_defaultFormStateBehavior,\n    rawFormData: formData,\n  });\n  if (formData === undefined || formData === null || (typeof formData === 'number' && isNaN(formData))) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData);\n  }\n  return formData;\n}\n","import getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions<T, S, F>(uiSchema) && getUiOptions<T, S, F>(uiSchema)['widget'] !== 'hidden'\n  );\n}\n","import { UI_WIDGET_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(validator, schema.items as S, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport {\n  FormContextType,\n  GlobalUISchemaOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from '../types';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S,\n  globalOptions?: GlobalUISchemaOptions\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalOptions);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === 'array') {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from '../mergeObjects';\nimport { ErrorSchema, FormContextType, RJSFSchema, StrictRJSFSchema, ValidationData, ValidatorType } from '../types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport { PROPERTIES_KEY, REF_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n\nconst NO_VALUE = Symbol('no Value');\n\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S, newSchema?: S, oldSchema?: S, data: any = {}): T {\n  // By default, we will clear the form data\n  let newFormData;\n  // If the new schema is of type object and that object contains a list of properties\n  if (has(newSchema, PROPERTIES_KEY)) {\n    // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n    const removeOldSchemaData: GenericObjectType = {};\n    if (has(oldSchema, PROPERTIES_KEY)) {\n      const properties = get(oldSchema, PROPERTIES_KEY, {});\n      Object.keys(properties).forEach((key) => {\n        if (has(data, key)) {\n          removeOldSchemaData[key] = undefined;\n        }\n      });\n    }\n    const keys: string[] = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n    // Create a place to store nested data that will be a side-effect of the filter\n    const nestedData: GenericObjectType = {};\n    keys.forEach((key) => {\n      const formValue = get(data, key);\n      let oldKeyedSchema: S = get(oldSchema, [PROPERTIES_KEY, key], {});\n      let newKeyedSchema: S = get(newSchema, [PROPERTIES_KEY, key], {});\n      // Resolve the refs if they exist\n      if (has(oldKeyedSchema, REF_KEY)) {\n        oldKeyedSchema = retrieveSchema<T, S, F>(validator, oldKeyedSchema, rootSchema, formValue);\n      }\n      if (has(newKeyedSchema, REF_KEY)) {\n        newKeyedSchema = retrieveSchema<T, S, F>(validator, newKeyedSchema, rootSchema, formValue);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaTypeForKey = get(oldKeyedSchema, 'type');\n      const newSchemaTypeForKey = get(newKeyedSchema, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n        if (has(removeOldSchemaData, key)) {\n          // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n          delete removeOldSchemaData[key];\n        }\n        // If it is an object, we'll recurse and store the resulting sanitized data for the key\n        if (newSchemaTypeForKey === 'object' || (newSchemaTypeForKey === 'array' && Array.isArray(formValue))) {\n          // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n          const itemData = sanitizeDataForNewSchema<T, S, F>(\n            validator,\n            rootSchema,\n            newKeyedSchema,\n            oldKeyedSchema,\n            formValue\n          );\n          if (itemData !== undefined || newSchemaTypeForKey === 'array') {\n            // only put undefined values for the array type and not the object type\n            nestedData[key] = itemData;\n          }\n        } else {\n          // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n          // with the new default or const. This allows the case where two schemas differ that only by the default/const\n          // value to be properly selected\n          const newOptionDefault = get(newKeyedSchema, 'default', NO_VALUE);\n          const oldOptionDefault = get(oldKeyedSchema, 'default', NO_VALUE);\n          if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n            if (oldOptionDefault === formValue) {\n              // If the old default matches the formValue, we'll update the new value to match the new default\n              removeOldSchemaData[key] = newOptionDefault;\n            } else if (get(newKeyedSchema, 'readOnly') === true) {\n              // If the new schema has the default set to read-only, treat it like a const and remove the value\n              removeOldSchemaData[key] = undefined;\n            }\n          }\n\n          const newOptionConst = get(newKeyedSchema, 'const', NO_VALUE);\n          const oldOptionConst = get(oldKeyedSchema, 'const', NO_VALUE);\n          if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n            // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n            removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : undefined;\n          }\n        }\n      }\n    });\n\n    newFormData = {\n      ...data,\n      ...removeOldSchemaData,\n      ...nestedData,\n    };\n    // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n  } else if (get(oldSchema, 'type') === 'array' && get(newSchema, 'type') === 'array' && Array.isArray(data)) {\n    let oldSchemaItems = get(oldSchema, 'items');\n    let newSchemaItems = get(newSchema, 'items');\n    // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n    // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n    if (\n      typeof oldSchemaItems === 'object' &&\n      typeof newSchemaItems === 'object' &&\n      !Array.isArray(oldSchemaItems) &&\n      !Array.isArray(newSchemaItems)\n    ) {\n      if (has(oldSchemaItems, REF_KEY)) {\n        oldSchemaItems = retrieveSchema<T, S, F>(validator, oldSchemaItems as S, rootSchema, data as T);\n      }\n      if (has(newSchemaItems, REF_KEY)) {\n        newSchemaItems = retrieveSchema<T, S, F>(validator, newSchemaItems as S, rootSchema, data as T);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaType = get(oldSchemaItems, 'type');\n      const newSchemaType = get(newSchemaItems, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaType || oldSchemaType === newSchemaType) {\n        const maxItems = get(newSchema, 'maxItems', -1);\n        if (newSchemaType === 'object') {\n          newFormData = data.reduce((newValue, aValue) => {\n            const itemValue = sanitizeDataForNewSchema<T, S, F>(\n              validator,\n              rootSchema,\n              newSchemaItems as S,\n              oldSchemaItems as S,\n              aValue\n            );\n            if (itemValue !== undefined && (maxItems < 0 || newValue.length < maxItems)) {\n              newValue.push(itemValue);\n            }\n            return newValue;\n          }, []);\n        } else {\n          newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;\n        }\n      }\n    } else if (\n      typeof oldSchemaItems === 'boolean' &&\n      typeof newSchemaItems === 'boolean' &&\n      oldSchemaItems === newSchemaItems\n    ) {\n      // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n      newFormData = data;\n    }\n    // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n  }\n  return newFormData as T;\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ALL_OF_KEY, DEPENDENCIES_KEY, ID_KEY, ITEMS_KEY, PROPERTIES_KEY, REF_KEY } from '../constants';\nimport isObject from '../isObject';\nimport { FormContextType, IdSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\nimport getSchemaType from '../getSchemaType';\n\n/** An internal helper that generates an `IdSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param idPrefix - The prefix to use for the id\n * @param idSeparator - The separator to use for the path segments in the id\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `IdSchema` object for the `schema`\n */\nfunction toIdSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  idPrefix: string,\n  idSeparator: string,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toIdSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        idPrefix,\n        idSeparator,\n        id,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchemaInternal<T, S, F>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      idPrefix,\n      idSeparator,\n      id,\n      rootSchema,\n      formData,\n      _recurseList\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (getSchemaType<S>(schema) === 'object' && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchemaInternal<T, S, F>(\n        validator,\n        isObject(field) ? field : {},\n        idPrefix,\n        idSeparator,\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        _recurseList\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = 'root',\n  idSeparator = '_'\n): IdSchema<T> {\n  return toIdSchemaInternal<T, S, F>(validator, schema, idPrefix, idSeparator, id, rootSchema, formData);\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\n\nimport {\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  ONE_OF_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from '../constants';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport { FormContextType, PathSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport retrieveSchema from './retrieveSchema';\n\n/** An internal helper that generates an `PathSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `PathSchema` object for the `schema`\n */\nfunction toPathSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name: string,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toPathSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        name,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n\n  let pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, ''),\n  } as PathSchema;\n\n  if (ONE_OF_KEY in schema || ANY_OF_KEY in schema) {\n    const xxxOf: S[] = ONE_OF_KEY in schema ? (schema.oneOf as S[]) : (schema.anyOf as S[]);\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, xxxOf, 0, discriminator);\n    const _schema: S = xxxOf![index] as S;\n    pathSchema = {\n      ...pathSchema,\n      ...toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList),\n    };\n  }\n\n  if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchemaInternal<T, S, F>(\n        validator,\n        schema.items as S,\n        `${name}.${i}`,\n        rootSchema,\n        element,\n        _recurseList\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchemaInternal<T, S, F>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property]),\n        _recurseList\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name = '',\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  return toPathSchemaInternal(validator, schema, name, rootSchema, formData);\n}\n","import deepEquals from './deepEquals';\nimport {\n  ErrorSchema,\n  Experimental_DefaultFormStateBehavior,\n  FormContextType,\n  GlobalUISchemaOptions,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from './types';\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getClosestMatchingOption,\n  getFirstMatchingOption,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  sanitizeDataForNewSchema,\n  toIdSchema,\n  toPathSchema,\n} from './schema';\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator`, `rootSchema`, or `experimental_defaultFormStateBehavior` to each method.\n * Since these generally do not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements SchemaUtilsType<T, S, F>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S, F>;\n  experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   * @param experimental_defaultFormStateBehavior - Configuration flags to allow users to override default form state behavior\n   */\n  constructor(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S,\n    experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior\n  ) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n    this.experimental_defaultFormStateBehavior = experimental_defaultFormStateBehavior;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S,\n    experimental_defaultFormStateBehavior = {}\n  ): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return (\n      this.validator !== validator ||\n      !deepEquals(this.rootSchema, rootSchema) ||\n      !deepEquals(this.experimental_defaultFormStateBehavior, experimental_defaultFormStateBehavior)\n    );\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S, F>(\n      this.validator,\n      schema,\n      formData,\n      this.rootSchema,\n      includeUndefinedValues,\n      this.experimental_defaultFormStateBehavior\n    );\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>, globalOptions?: GlobalUISchemaOptions) {\n    return getDisplayLabel<T, S, F>(this.validator, schema, uiSchema, this.rootSchema, globalOptions);\n  }\n\n  /** Determines which of the given `options` provided most closely matches the `formData`.\n   * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n   *\n   * The closest match is determined using the number of matching properties, and more heavily favors options with\n   * matching readOnly, default, or const values.\n   *\n   * @param formData - The form data associated with the schema\n   * @param options - The list of options that can be selected from\n   * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n   */\n  getClosestMatchingOption(\n    formData: T | undefined,\n    options: S[],\n    selectedOption?: number,\n    discriminatorField?: string\n  ): number {\n    return getClosestMatchingOption<T, S, F>(\n      this.validator,\n      this.rootSchema,\n      formData,\n      options,\n      selectedOption,\n      discriminatorField\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n   * Always returns the first option if there is nothing that matches.\n   *\n   * @param formData - The current formData, if any, used to figure out a match\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The firstindex of the matched option or 0 if none is available\n   */\n  getFirstMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string): number {\n    return getFirstMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   * Deprecated, use `getFirstMatchingOption()` instead.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the matched option or 0 if none is available\n   * @deprecated\n   */\n  getMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string) {\n    return getMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(this.validator, schema, uiSchema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n   *        removed in the next major release.\n   */\n  mergeValidationData(validationData: ValidationData<T>, additionalErrorSchema?: ErrorSchema<T>): ValidationData<T> {\n    return mergeValidationData<T, S, F>(this.validator, validationData, additionalErrorSchema);\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData?: T) {\n    return retrieveSchema<T, S, F>(this.validator, schema, this.rootSchema, rawFormData);\n  }\n\n  /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n   * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n   * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n   * old schemas that are non-existent in the new schema are set to `undefined`.\n   *\n   * @param [newSchema] - The new schema for which the data is being sanitized\n   * @param [oldSchema] - The old schema from which the data originated\n   * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n   * @returns - The new form data, with all the fields uniquely associated with the old schema set\n   *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n   */\n  sanitizeDataForNewSchema(newSchema?: S, oldSchema?: S, data?: any): T {\n    return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data);\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(schema: S, id?: string | null, formData?: T, idPrefix = 'root', idSeparator = '_'): IdSchema<T> {\n    return toIdSchema<T, S, F>(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S, F>(this.validator, schema, name, this.rootSchema, formData);\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  experimental_defaultFormStateBehavior = {}\n): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema, experimental_defaultFormStateBehavior);\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(',');\n  // Split params\n  const params: string[] = splitted[0].split(';');\n  // Get mime-type from params\n  const type: string = params[0].replace('data:', '');\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split('=')[0] === 'name';\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = 'unknown';\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here, which we decode to make it human-readable\n    name = decodeURI(properties[0].split('=')[1]);\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  try {\n    const binary = atob(splitted[1]);\n    const array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    // Create the blob object\n    const blob = new window.Blob([new Uint8Array(array)], { type });\n\n    return { blob, name };\n  } catch (error) {\n    return { blob: { size: 0, type: (error as Error).message }, name: dataURI };\n  }\n}\n","/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString: string, params?: string[]) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}\n","import { TranslatableString } from './enums';\nimport replaceStringParameters from './replaceStringParameters';\n\n/** Translates a `TranslatableString` value `stringToTranslate` into english. When a `params` array is provided, each\n * value in the array is used to replace any of the replaceable parameters in the `stringToTranslate` using the `%1`,\n * `%2`, etc. replacement specifiers.\n *\n * @param stringToTranslate - The `TranslatableString` value to convert to english\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The `stringToTranslate` itself with any replaceable parameter values substituted\n */\nexport default function englishStringTranslator(stringToTranslate: TranslatableString, params?: string[]): string {\n  return replaceStringParameters(stringToTranslate, params);\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>['value']\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'],\n  selected: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsIsSelected from './enumOptionsIsSelected';\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n    .filter((opt) => typeof opt !== 'undefined') as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (value) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { ErrorSchema } from './types';\nimport { ERRORS_KEY } from './constants';\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n    let errorBlock: ErrorSchema = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from './types';\nimport { RJSFSchema } from './types';\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import rangeSpec from './rangeSpec';\nimport { FormContextType, InputPropsType, RJSFSchema, StrictRJSFSchema, UIOptionsType } from './types';\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from './constants';\nimport getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, UISchemaSubmitButtonOptions } from './types';\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: 'Submit',\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","import { FormContextType, TemplatesType, Registry, UIOptionsType, StrictRJSFSchema, RJSFSchema } from './types';\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(name: Name, registry: Registry<T, S, F>, uiOptions: UIOptionsType<T, S, F> = {}): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) || templates[name]\n  );\n}\n","import { createElement } from 'react';\nimport ReactIs from 'react-is';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { FormContextType, RJSFSchema, Widget, RegistryWidgetsType, StrictRJSFSchema } from './types';\nimport getSchemaType from './getSchemaType';\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: 'CheckboxWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    hidden: 'HiddenWidget',\n  },\n  string: {\n    text: 'TextWidget',\n    password: 'PasswordWidget',\n    email: 'EmailWidget',\n    hostname: 'TextWidget',\n    ipv4: 'TextWidget',\n    ipv6: 'TextWidget',\n    uri: 'URLWidget',\n    'data-url': 'FileWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    textarea: 'TextareaWidget',\n    hidden: 'HiddenWidget',\n    date: 'DateWidget',\n    datetime: 'DateTimeWidget',\n    'date-time': 'DateTimeWidget',\n    'alt-date': 'AltDateWidget',\n    'alt-datetime': 'AltDateTimeWidget',\n    time: 'TimeWidget',\n    color: 'ColorWidget',\n    file: 'FileWidget',\n  },\n  number: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  integer: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  array: {\n    select: 'SelectWidget',\n    checkboxes: 'CheckboxesWidget',\n    files: 'FileWidget',\n    hidden: 'HiddenWidget',\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  AWidget: Widget<T, S, F>\n) {\n  let MergedWidget: Widget<T, S, F> | undefined = get(AWidget, 'MergedWidget');\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions = (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, 'MergedWidget', MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === 'function' ||\n    (widget && ReactIs.isForwardRef(createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== 'string') {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === 'string') {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** JS has no built-in hashing function, so rolling our own\n *  based on Java's hashing fn:\n *  http://www.java2s.com/example/nodejs-utility-method/string-hash/hashcode-4dc2b.html\n *\n * @param string - The string for which to get the hash\n * @returns - The resulting hash of the string in hex format\n */\nfunction hashString(string: string): string {\n  let hash = 0;\n  for (let i = 0; i < string.length; i += 1) {\n    const chr = string.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash.toString(16);\n}\n\n/** Stringifies the schema and returns the hash of the resulting string.\n *\n * @param schema - The schema for which the hash is desired\n * @returns - The string obtained from the hash of the stringified schema\n */\nexport default function hashForSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return hashString(JSON.stringify(schema));\n}\n","import getWidget from './getWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema, Widget } from './types';\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}\n","import isString from 'lodash/isString';\n\nimport { IdSchema } from './types';\nimport { ID_KEY } from './constants';\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'description');\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'error');\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'examples');\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'help');\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'title');\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(id: IdSchema<T> | string, includeExamples = false) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : '';\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(id)}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n","import { ReactElement } from 'react';\n\n/** Helper function that will return the value to use for a widget `label` based on `hideLabel`. The `fallback` is used\n * as the return value from the function when `hideLabel` is true. Due to the implementation of theme components, it\n * may be necessary to return something other than `undefined` to cause the theme component to not render a label. Some\n * themes require may `false` and others may require an empty string.\n *\n * @param [label] - The label string or component to render when not hidden\n * @param [hideLabel] - Flag, if true, will cause the label to be hidden\n * @param [fallback] - One of 3 values, `undefined` (the default), `false` or an empty string\n * @returns - `fallback` if `hideLabel` is true, otherwise `label`\n */\nexport function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: ''): undefined | string;\nexport default function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: false | '') {\n  return hideLabel ? fallback : label;\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import { CONST_KEY, ENUM_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error('schema cannot be inferred as a constant');\n}\n","import toConstant from './toConstant';\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from './types';\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from './types';\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(properties: string[], order?: string[]): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1 ? `properties '${arr.join(\"', '\")}'` : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter((prop) => prop === '*' || propertyHash[prop]);\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf('*');\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf('*')) {\n    throw new Error('uiSchema order list contains more than one wildcard item');\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = '0' + s;\n  }\n  return s;\n}\n","import { DateObject } from './types';\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString?: string, includeTime = true): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<S extends StrictRJSFSchema = RJSFSchema>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S['additionalProperties']) => schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from 'react';\n\nimport deepEquals from './deepEquals';\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(component: React.Component, nextProps: any, nextState: any) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from './types';\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { ErrorSchema, GenericObjectType, RJSFValidationError } from './types';\n\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList<T = any>(\n  errorSchema?: ErrorSchema<T>,\n  fieldPath: string[] = []\n): RJSFValidationError[] {\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList: RJSFValidationError[] = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(\n      errorSchema[ERRORS_KEY]!.map((message: string) => {\n        const property = `.${fieldPath.join('.')}`;\n        return {\n          property,\n          message,\n          stack: `${property} ${message}`,\n        };\n      })\n    );\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = (errorSchema as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}\n","import toPath from 'lodash/toPath';\n\nimport { ErrorSchema, RJSFValidationError } from './types';\nimport ErrorSchemaBuilder from './ErrorSchemaBuilder';\n\n/** Transforms a rjsf validation errors list:\n * [\n *   {property: '.level1.level2[2].level3', message: 'err a'},\n *   {property: '.level1.level2[2].level3', message: 'err b'},\n *   {property: '.level1.level2[4].level3', message: 'err b'},\n * ]\n * Into an error tree:\n * {\n *   level1: {\n *     level2: {\n *       2: {level3: {errors: ['err a', 'err b']}},\n *       4: {level3: {errors: ['err b']}},\n *     }\n *   }\n * };\n *\n * @param errors - The list of RJSFValidationError objects\n * @returns - The `ErrorSchema` built from the list of `RJSFValidationErrors`\n */\nexport default function toErrorSchema<T = any>(errors: RJSFValidationError[]): ErrorSchema<T> {\n  const builder = new ErrorSchemaBuilder<T>();\n  if (errors.length) {\n    errors.forEach((error) => {\n      const { property, message } = error;\n      // When the property is the root element, just use an empty array for the path\n      const path = property === '.' ? [] : toPath(property);\n      // If the property is at the root (.level1) then toPath creates\n      // an empty array element at the first index. Remove it.\n      if (path.length > 0 && path[0] === '') {\n        path.splice(0, 1);\n      }\n      if (message) {\n        builder.addErrors(message, path);\n      }\n    });\n  }\n  return builder.ErrorSchema;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ErrorSchema, FormValidation, GenericObjectType } from './types';\n\n/** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError()` functions from it\n *\n * @param errorHandler - The `FormValidation` error handling structure\n * @returns - The `ErrorSchema` resulting from the stripping of the `addError()` function\n */\nexport default function unwrapErrorHandler<T = any>(errorHandler: FormValidation<T>): ErrorSchema<T> {\n  return Object.keys(errorHandler).reduce((acc, key) => {\n    if (key === 'addError') {\n      return acc;\n    } else {\n      const childSchema = (errorHandler as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        return {\n          ...acc,\n          [key]: unwrapErrorHandler(childSchema),\n        };\n      }\n      return { ...acc, [key]: childSchema };\n    }\n  }, {} as ErrorSchema<T>);\n}\n","import pad from './pad';\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return '';\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from './mergeObjects';\nimport toErrorList from './toErrorList';\nimport { ErrorSchema, ValidationData } from './types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `toErrorList()` on the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The optional additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function validationDataMerge<T = any>(\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject<S extends StrictRJSFSchema = RJSFSchema>(node: S): S {\n  for (const key in node) {\n    const realObj: { [k: string]: any } = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix<S>(value);\n    }\n  }\n  return node;\n}\n\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray<S extends StrictRJSFSchema = RJSFSchema>(node: S[]): S[] {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix<S>(node[i]) as S;\n  }\n  return node;\n}\n\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix<S extends StrictRJSFSchema = RJSFSchema>(schemaNode: S): S | S[] {\n  if (schemaNode.constructor === Object) {\n    return withIdRefPrefixObject<S>({ ...schemaNode });\n  }\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray<S>([...schemaNode]);\n  }\n  return schemaNode;\n}\n","/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport enum TranslatableString {\n  /** Fallback title of an array item, used by ArrayField */\n  ArrayItemTitle = 'Item',\n  /** Missing items reason, used by ArrayField */\n  MissingItems = 'Missing items definition',\n  /** Yes label, used by BooleanField */\n  YesLabel = 'Yes',\n  /** No label, used by BooleanField */\n  NoLabel = 'No',\n  /** Close label, used by ErrorList */\n  CloseLabel = 'Close',\n  /** Errors label, used by ErrorList */\n  ErrorsLabel = 'Errors',\n  /** New additionalProperties string default value, used by ObjectField */\n  NewStringDefault = 'New Value',\n  /** Add button title, used by AddButton */\n  AddButton = 'Add',\n  /** Add button title, used by AddButton */\n  AddItemButton = 'Add Item',\n  /** Copy button title, used by IconButton */\n  CopyButton = 'Copy',\n  /** Move down button title, used by IconButton */\n  MoveDownButton = 'Move down',\n  /** Move up button title, used by IconButton */\n  MoveUpButton = 'Move up',\n  /** Remove button title, used by IconButton */\n  RemoveButton = 'Remove',\n  /** Now label, used by AltDateWidget */\n  NowLabel = 'Now',\n  /** Clear label, used by AltDateWidget */\n  ClearLabel = 'Clear',\n  /** Aria date label, used by DateWidget */\n  AriaDateLabel = 'Select a date',\n  /** File preview label, used by FileWidget */\n  PreviewLabel = 'Preview',\n  /** Decrement button aria label, used by UpDownWidget */\n  DecrementAriaLabel = 'Decrease value by 1',\n  /** Increment button aria label, used by UpDownWidget */\n  IncrementAriaLabel = 'Increase value by 1',\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  UnknownFieldType = 'Unknown field type %1',\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  OptionPrefix = 'Option %1',\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TitleOptionPrefix = '%1 option %2',\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  KeyLabel = '%1 Key',\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  InvalidObjectField = 'Invalid \"%1\" object field configuration: <em>%2</em>.',\n  /** Unsupported field schema, used by UnsupportedField */\n  UnsupportedField = 'Unsupported field schema.',\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  UnsupportedFieldWithId = 'Unsupported field schema for field <code>%1</code>.',\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  UnsupportedFieldWithReason = 'Unsupported field schema: <em>%1</em>.',\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  UnsupportedFieldWithIdAndReason = 'Unsupported field schema for field <code>%1</code>: <em>%2</em>.',\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  FilesInfo = '<strong>%1</strong> (%2, %3 bytes)',\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ID_KEY } from '../constants';\nimport hashForSchema from '../hashForSchema';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from '../types';\n\n/** The type of the map of schema hash to schema\n */\nexport type SchemaMap<S extends StrictRJSFSchema = RJSFSchema> = {\n  [hash: string]: S;\n};\n\n/** An implementation of the `ValidatorType` interface that is designed for use in capturing schemas used by the\n * `isValid()` function. The rest of the implementation of the interface throws errors when it is attempted to be used.\n * An instance of the object allows the caller to capture the schemas used in calls to the `isValid()` function. These\n * captured schema, along with the root schema used to construct the object are stored in the map of schemas keyed by\n * the hashed value of the schema. NOTE: After hashing the schema, an $id with the hash value is added to the\n * schema IF that schema doesn't already have an $id, prior to putting the schema into the map.\n */\nexport default class ParserValidator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The rootSchema provided during construction of the class */\n  readonly rootSchema: S;\n\n  /** The map of schemas encountered by the ParserValidator */\n  schemaMap: SchemaMap<S> = {};\n\n  /** Construct the ParserValidator for the given `rootSchema`. This `rootSchema` will be stashed in the `schemaMap`\n   * first.\n   *\n   * @param rootSchema - The root schema against which this validator will be executed\n   */\n  constructor(rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.addSchema(rootSchema, hashForSchema<S>(rootSchema));\n  }\n\n  /** Adds the given `schema` to the `schemaMap` keyed by the `hash` or `ID_KEY` if present on the `schema`. If the\n   * schema does not have an `ID_KEY`, then the `hash` will be added as the `ID_KEY` to allow the schema to be\n   * associated with it's `hash` for future use (by a schema compiler).\n   *\n   * @param schema - The schema which is to be added to the map\n   * @param hash - The hash value at which to map the schema\n   */\n  addSchema(schema: S, hash: string) {\n    const key = get(schema, ID_KEY, hash);\n    const identifiedSchema = { ...schema, [ID_KEY]: key };\n    const existing = this.schemaMap[key];\n    if (!existing) {\n      this.schemaMap[key] = identifiedSchema;\n    } else if (!isEqual(existing, identifiedSchema)) {\n      console.error('existing schema:', JSON.stringify(existing, null, 2));\n      console.error('new schema:', JSON.stringify(identifiedSchema, null, 2));\n      throw new Error(\n        `Two different schemas exist with the same key ${key}! What a bad coincidence. If possible, try adding an $id to one of the schemas`\n      );\n    }\n  }\n\n  /** Returns the current `schemaMap` to the caller\n   */\n  getSchemaMap() {\n    return this.schemaMap;\n  }\n\n  /** Implements the `ValidatorType` `isValid()` method to capture the `schema` in the `schemaMap`. Throws an error when\n   * the `rootSchema` is not the same as the root schema provided during construction.\n   *\n   * @param schema - The schema to record in the `schemaMap`\n   * @param _formData - The formData parameter that is ignored\n   * @param rootSchema - The root schema associated with the schema\n   * @throws - Error when the given `rootSchema` differs from the root schema provided during construction\n   */\n  isValid(schema: S, _formData: T, rootSchema: S): boolean {\n    if (!isEqual(rootSchema, this.rootSchema)) {\n      throw new Error('Unexpectedly calling isValid() with a rootSchema that differs from the construction rootSchema');\n    }\n    this.addSchema(schema, hashForSchema<S>(schema));\n\n    return false;\n  }\n\n  /** Implements the `ValidatorType` `rawValidation()` method to throw an error since it is never supposed to be called\n   *\n   * @param _schema - The schema parameter that is ignored\n   * @param _formData - The formData parameter that is ignored\n   */\n  rawValidation<Result = any>(_schema: S, _formData?: T): { errors?: Result[]; validationError?: Error } {\n    throw new Error('Unexpectedly calling the `rawValidation()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `toErrorList()` method to throw an error since it is never supposed to be called\n   *\n   * @param _errorSchema - The error schema parameter that is ignored\n   * @param _fieldPath - The field path parameter that is ignored\n   */\n  toErrorList(_errorSchema?: ErrorSchema<T>, _fieldPath?: string[]): RJSFValidationError[] {\n    throw new Error('Unexpectedly calling the `toErrorList()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `validateFormData()` method to throw an error since it is never supposed to be\n   * called\n   *\n   * @param _formData - The formData parameter that is ignored\n   * @param _schema - The schema parameter that is ignored\n   * @param _customValidate - The customValidate parameter that is ignored\n   * @param _transformErrors - The transformErrors parameter that is ignored\n   * @param _uiSchema - The uiSchema parameter that is ignored\n   */\n  validateFormData(\n    _formData: T,\n    _schema: S,\n    _customValidate?: CustomValidator<T, S, F>,\n    _transformErrors?: ErrorTransformer<T, S, F>,\n    _uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    throw new Error('Unexpectedly calling the `validateFormData()` method during schema parsing');\n  }\n}\n","import forEach from 'lodash/forEach';\nimport isEqual from 'lodash/isEqual';\n\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '../types';\nimport { PROPERTIES_KEY, ITEMS_KEY } from '../constants';\nimport ParserValidator, { SchemaMap } from './ParserValidator';\nimport { retrieveSchemaInternal, resolveAnyOrOneOfSchemas } from '../schema/retrieveSchema';\n\n/** Recursive function used to parse the given `schema` belonging to the `rootSchema`. The `validator` is used to\n * capture the sub-schemas that the `isValid()` function is called with. For each schema returned by the\n * `retrieveSchemaInternal()`, the `resolveAnyOrOneOfSchemas()` function is called. For each of the schemas returned\n * from THAT call have `properties`, then each of the sub-schema property objects are then recursively parsed.\n *\n * @param validator - The `ParserValidator` implementation used to capture `isValid()` calls during parsing\n * @param recurseList - The list of schemas returned from the `retrieveSchemaInternal`, preventing infinite recursion\n * @param rootSchema - The root schema from which the schema parsing began\n * @param schema - The current schema element being parsed\n */\nfunction parseSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ParserValidator<T, S, F>,\n  recurseList: S[],\n  rootSchema: S,\n  schema: S\n) {\n  const schemas = retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, undefined, true);\n  schemas.forEach((schema) => {\n    const sameSchemaIndex = recurseList.findIndex((item) => isEqual(item, schema));\n    if (sameSchemaIndex === -1) {\n      recurseList.push(schema);\n      const allOptions = resolveAnyOrOneOfSchemas<T, S, F>(validator, schema, rootSchema, true);\n      allOptions.forEach((s) => {\n        if (PROPERTIES_KEY in s && s[PROPERTIES_KEY]) {\n          forEach(schema[PROPERTIES_KEY], (value) => {\n            parseSchema<T, S, F>(validator, recurseList, rootSchema, value as S);\n          });\n        }\n      });\n      if (ITEMS_KEY in schema && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n        parseSchema<T, S, F>(validator, recurseList, rootSchema, schema.items as S);\n      }\n    }\n  });\n}\n\n/** Parses the given `rootSchema` to extract out all the sub-schemas that maybe contained within it. Returns a map of\n * the hash of the schema to schema/sub-schema.\n *\n * @param rootSchema - The root schema to parse for sub-schemas used by `isValid()` calls\n * @returns - The `SchemaMap` of all schemas that were parsed\n */\nexport default function schemaParser<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  rootSchema: S\n): SchemaMap<S> {\n  const validator = new ParserValidator<T, S, F>(rootSchema);\n  const recurseList: S[] = [];\n\n  parseSchema(validator, recurseList, rootSchema, rootSchema);\n\n  return validator.getSchemaMap();\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","allowAdditionalItems","schema","additionalItems","console","warn","asNumber","value","undefined","test","n","Number","valid","isNaN","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEFINITIONS_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ID_KEY","IF_KEY","ITEMS_KEY","JUNK_OPTION_ID","NAME_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","SUBMIT_BTN_OPTIONS_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","ROOT_SCHEMA_PREFIX","UI_FIELD_KEY","UI_WIDGET_KEY","UI_OPTIONS_KEY","UI_GLOBAL_OPTIONS_KEY","getUiOptions","uiSchema","globalOptions","Object","keys","filter","key","indexOf","reduce","options","_extends2","error","_extends","substring","canExpand","formData","additionalProperties","_getUiOptions","_getUiOptions$expanda","expandable","maxProperties","length","createErrorHandler","_handler","handler","addError","message","push","acc","isPlainObject","formObject","_extends3","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","remaining","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","decodeURIComponent","Error","current","jsonpointer","get","_splitKeyElementFromO","theRef","subSchema","getMatchingOption","validator","discriminatorField","i","option","has","discriminator","isValid","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","_objectDestructuringEmpty","allOf","slice","assign","getFirstMatchingOption","getDiscriminatorFieldFromSchema","maybeString","isString","guessType","getSchemaType","type","properties","includes","find","mergeSchemas","obj1","obj2","left","right","union","retrieveSchema","rawFormData","retrieveSchemaInternal","resolveCondition","expandAllBranches","expression","then","otherwise","resolvedSchemaLessConditional","_objectWithoutPropertiesLoose","_excluded","conditionValue","resolvedSchemas","schemas","concat","conditionalSchema","s","flatMap","getAllPermutationsOfXxxOf","listOfLists","allPermutations","permutations","list","element","times","forEach","permutation","resolveSchema","resolveReference","resolveDependencies","allOfSchemaElements","allOfSubschema","localSchema","_excluded2","refSchema","stubExistingAdditionalProperties","theSchema","aFormData","set","resolvedSchema","mergeAllOf","deep","e","_resolvedSchema","resolvedSchemaWithoutAllOf","_excluded3","hasAdditionalProperties","resolveAnyOrOneOfSchemas","anyOrOneOf","oneOf","dependencies","remainingSchema","_excluded4","processDependencies","_loop","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","v","_ret","additionallyRequired","from","Set","dependentSchemas","dependent","dependentSchema","_excluded5","resolvedOneOfs","subschema","resolvedOneOf","withExactlyOneSubschema","validSubschemas","conditionPropertySchema","_properties","conditionSchema","_splitKeyElementFromO2","dependentSubschema","JUNK_OPTION","$id","__not_really_there__","calculateIndexScore","totalScore","score","formValue","newSchema","getClosestMatchingOption","newScore","selectedOption","allValidIndexes","validList","index","testOptions","match","_allValidIndexes$redu","scoreData","bestScore","bestIndex","isFixedItems","items","every","item","mergeDefaultsWithFormData","defaults","defaultsArray","mapped","idx","mergeObjects","concatArrays","toMerge","result","isConstant","isSelect","altSchemas","isMultiSelect","uniqueItems","AdditionalItemsHandling","getInnerSchemaForArrayItem","Ignore","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","isParentRequired","requiredFields","experimental_defaultFormStateBehavior","_experimental_default","_experimental_default2","emptyObjectFields","isEmpty","computeDefaults","rawSchema","_temp","_ref","parentDefaults","_ref$rootSchema","_ref$includeUndefined","_ref$_recurseList","_recurseList","_ref$experimental_def","_ref$required","schemaToCompute","updatedRecurseList","refName","itemSchema","objectDefaults","_schema$required","additionalPropertiesSchema","add","formDataRequired","_schema$required2","schemaItem","Fallback","ignoreMinItemsFlagSet","arrayMinItems","defaultsLength","minItems","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","uiOptions","_uiOptions$label","label","displayLabel","schemaType","mergeValidationData","validationData","additionalErrorSchema","oldErrors","errors","oldErrorSchema","errorSchema","toErrorList","NO_VALUE","Symbol","sanitizeDataForNewSchema","oldSchema","data","newFormData","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","itemData","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","newValue","aValue","itemValue","toIdSchemaInternal","idPrefix","idSeparator","id","_schema","sameSchemaIndex","findIndex","isEqual","idSchema","name","field","fieldId","toIdSchema","toPathSchemaInternal","_pathSchema","pathSchema","replace","xxxOf","property","toPathSchema","SchemaUtils","_proto","prototype","getValidator","doesSchemaUtilsDiffer","createSchemaUtils","dataURItoBlob","dataURI","splitted","split","params","param","decodeURI","binary","atob","array","charCodeAt","blob","window","Blob","Uint8Array","size","replaceStringParameters","inputString","output","parts","partIndex","part","join","englishStringTranslator","stringToTranslate","enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","val","enumOptionsDeselectValue","selected","enumOptionsIsSelected","some","sel","enumOptionsIndexForValue","multiple","selectedIndexes","opt","String","enumOptionsSelectValue","all","updated","sort","ErrorSchemaBuilder","initialSchema","resetAllErrors","getOrCreateErrorBlock","pathOfError","hasPath","errorBlock","cloneDeep","addErrors","errorOrList","errorsList","_errorsList","apply","setErrors","listToAdd","clearErrors","_createClass","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","getInputProps","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","DEFAULT_OPTIONS","props","disabled","submitText","norender","getSubmitButtonOptions","getTemplate","registry","templates","widgetMap","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","time","color","file","number","updown","range","integer","checkboxes","files","mergeWidgetOptions","AWidget","MergedWidget","defaultOptions","defaultProps","_jsx","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","createElement","isMemo","registeredWidget","hashString","hash","chr","toString","hashForSchema","JSON","stringify","hasWidget","err","idGenerator","suffix","theId","descriptionId","errorId","examplesId","helpId","titleId","ariaDescribedByIds","includeExamples","examples","optionId","optionIndex","labelValue","hideLabel","fallback","localToUTC","dateString","toJSON","toConstant","optionsList","schemaWithEnumNames","enumNames","process","env","NODE_ENV","aSchemaDef","aSchema","title","orderProperties","order","arrayToHash","arr","prev","curr","errorPropList","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","lastIndexOf","complete","splice","pad","num","width","parseDateString","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaRequiresTrueValue","schemaSome","shouldRender","component","nextProps","nextState","state","toDateString","dateObject","_dateObject$hour","_dateObject$minute","_dateObject$second","utcTime","UTC","fieldPath","errorList","stack","childSchema","toErrorSchema","builder","path","toPath","ErrorSchema","unwrapErrorHandler","errorHandler","utcToLocal","jsonDate","yyyy","getFullYear","MM","getMonth","dd","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds","validationDataMerge","withIdRefPrefixObject","node","realObj","withIdRefPrefix","withIdRefPrefixArray","schemaNode","constructor","TranslatableString","ParserValidator","schemaMap","addSchema","identifiedSchema","existing","getSchemaMap","_formData","rawValidation","_errorSchema","_fieldPath","validateFormData","_customValidate","_transformErrors","_uiSchema","parseSchema","recurseList","allOptions","schemaParser"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAKG;AACqB,SAAAA,QAAQA,CAACC,KAAU,EAAA;EACzC,IAAI,OAAOC,IAAI,KAAK,WAAW,IAAID,KAAK,YAAYC,IAAI,EAAE;AACxD,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;EACD,IAAI,OAAOC,IAAI,KAAK,WAAW,IAAIF,KAAK,YAAYE,IAAI,EAAE;AACxD,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;AACD,EAAA,OAAO,OAAOF,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,CAAA;AAC7E;;ACXA;;;;;AAKG;AACqB,SAAAK,oBAAoBA,CAA0CC,MAAS,EAAA;AAC7F,EAAA,IAAIA,MAAM,CAACC,eAAe,KAAK,IAAI,EAAE;AACnCC,IAAAA,OAAO,CAACC,IAAI,CAAC,iDAAiD,CAAC,CAAA;AAChE,GAAA;AACD,EAAA,OAAOV,QAAQ,CAACO,MAAM,CAACC,eAAe,CAAC,CAAA;AACzC;;ACdA;;;;;;;;AAQG;AACqB,SAAAG,QAAQA,CAACC,KAAoB,EAAA;EACnD,IAAIA,KAAK,KAAK,EAAE,EAAE;AAChB,IAAA,OAAOC,SAAS,CAAA;AACjB,GAAA;EACD,IAAID,KAAK,KAAK,IAAI,EAAE;AAClB,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AACD,EAAA,IAAI,KAAK,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;AACrB;AACA;AACA,IAAA,OAAOA,KAAK,CAAA;AACb,GAAA;AACD,EAAA,IAAI,MAAM,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;AACtB;AACA,IAAA,OAAOA,KAAK,CAAA;AACb,GAAA;AAED,EAAA,IAAI,SAAS,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;AACzB;AACA;AACA;AACA,IAAA,OAAOA,KAAK,CAAA;AACb,GAAA;AAED,EAAA,IAAMG,CAAC,GAAGC,MAAM,CAACJ,KAAK,CAAC,CAAA;AACvB,EAAA,IAAMK,KAAK,GAAG,OAAOF,CAAC,KAAK,QAAQ,IAAI,CAACC,MAAM,CAACE,KAAK,CAACH,CAAC,CAAC,CAAA;AAEvD,EAAA,OAAOE,KAAK,GAAGF,CAAC,GAAGH,KAAK,CAAA;AAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;;;;AAIG;AACI,IAAMO,wBAAwB,GAAG,wBAAuB;AACxD,IAAMC,yBAAyB,GAAG,uBAAsB;AACxD,IAAMC,UAAU,GAAG,QAAO;AAC1B,IAAMC,UAAU,GAAG,QAAO;AAC1B,IAAMC,SAAS,GAAG,QAAO;AACzB,IAAMC,WAAW,GAAG,UAAS;AAC7B,IAAMC,eAAe,GAAG,cAAa;AACrC,IAAMC,gBAAgB,GAAG,eAAc;AACvC,IAAMC,QAAQ,GAAG,OAAM;AACvB,IAAMC,UAAU,GAAG,WAAU;AAC7B,IAAMC,MAAM,GAAG,MAAK;AACpB,IAAMC,MAAM,GAAG,KAAI;AACnB,IAAMC,SAAS,GAAG,QAAO;AACzB,IAAMC,cAAc,GAAG,4BAA2B;AAClD,IAAMC,QAAQ,GAAG,QAAO;AACxB,IAAMC,UAAU,GAAG,QAAO;AAC1B,IAAMC,cAAc,GAAG,aAAY;AACnC,IAAMC,YAAY,GAAG,WAAU;AAC/B,IAAMC,sBAAsB,GAAG,sBAAqB;AACpD,IAAMC,OAAO,GAAG,OAAM;AACtB,IAAMC,8BAA8B,GAAG,8BAA6B;AACpE,IAAMC,kBAAkB,GAAG,oBAAmB;AAC9C,IAAMC,YAAY,GAAG,WAAU;AAC/B,IAAMC,aAAa,GAAG,YAAW;AACjC,IAAMC,cAAc,GAAG,aAAY;AACnC,IAAMC,qBAAqB,GAAG;;AC1BrC;;;;;;AAMG;AACqB,SAAAC,YAAYA,CAClCC,QAA8B,EAC9BC,aAAA,EAAyC;AAAA,EAAA,IADzCD,QAA8B,KAAA,KAAA,CAAA,EAAA;IAA9BA,QAA8B,GAAA,EAAE,CAAA;AAAA,GAAA;AAAA,EAAA,IAChCC,aAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,aAAA,GAAuC,EAAE,CAAA;AAAA,GAAA;EAEzC,OAAOC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CACzBI,MAAM,CAAC,UAACC,GAAG,EAAA;AAAA,IAAA,OAAKA,GAAG,CAACC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;AAAA,GAAA,CAAC,CACzCC,MAAM,CACL,UAACC,OAAO,EAAEH,GAAG,EAAI;AAAA,IAAA,IAAAI,SAAA,CAAA;AACf,IAAA,IAAM3C,KAAK,GAAGkC,QAAQ,CAACK,GAAG,CAAC,CAAA;IAC3B,IAAIA,GAAG,KAAKT,aAAa,IAAI1C,QAAQ,CAACY,KAAK,CAAC,EAAE;AAC5CH,MAAAA,OAAO,CAAC+C,KAAK,CAAC,qFAAqF,CAAC,CAAA;AACpG,MAAA,OAAOF,OAAO,CAAA;AACf,KAAA;IACD,IAAIH,GAAG,KAAKR,cAAc,IAAI3C,QAAQ,CAACY,KAAK,CAAC,EAAE;AAC7C,MAAA,OAAA6C,QAAA,CAAA,EAAA,EAAYH,OAAO,EAAK1C,KAAK,CAAA,CAAA;AAC9B,KAAA;AACD,IAAA,OAAA6C,QAAA,CAAYH,EAAAA,EAAAA,OAAO,GAAAC,SAAA,OAAAA,SAAA,CAAGJ,GAAG,CAACO,SAAS,CAAC,CAAC,CAAC,CAAG9C,GAAAA,KAAK,EAAA2C,SAAA,EAAA,CAAA;AAChD,GAAC,EAAAE,QAAA,CACIV,EAAAA,EAAAA,aAAa,CAAE,CACrB,CAAA;AACL;;AC5BA;;;;;;;;AAQG;AACW,SAAUY,SAASA,CAC/BpD,MAAkB,EAClBuC,QAAA,EACAc,QAAY,EAAA;AAAA,EAAA,IADZd,QAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,QAAA,GAA8B,EAAE,CAAA;AAAA,GAAA;AAGhC,EAAA,IAAI,CAACvC,MAAM,CAACsD,oBAAoB,EAAE;AAChC,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;AACD,EAAA,IAAAC,aAAA,GAA8BjB,YAAY,CAAUC,QAAQ,CAAC;IAAAiB,qBAAA,GAAAD,aAAA,CAArDE,UAAU;AAAVA,IAAAA,UAAU,GAAAD,qBAAA,KAAG,KAAA,CAAA,GAAA,IAAI,GAAAA,qBAAA,CAAA;EACzB,IAAIC,UAAU,KAAK,KAAK,EAAE;AACxB,IAAA,OAAOA,UAAU,CAAA;AAClB,GAAA;AACD;AACA;AACA,EAAA,IAAIzD,MAAM,CAAC0D,aAAa,KAAKpD,SAAS,IAAI+C,QAAQ,EAAE;IAClD,OAAOZ,MAAM,CAACC,IAAI,CAACW,QAAQ,CAAC,CAACM,MAAM,GAAG3D,MAAM,CAAC0D,aAAa,CAAA;AAC3D,GAAA;AACD,EAAA,OAAO,IAAI,CAAA;AACb;;ACzBA;;;;AAIG;AACqB,SAAAE,kBAAkBA,CAAUP,QAAW,EAAA;AAAA,EAAA,IAAAQ,QAAA,CAAA;AAC7D,EAAA,IAAMC,OAAO,IAAAD,QAAA,GAAAA,EAAAA,EAAAA,QAAA,CAIVxC,UAAU,CAAA,GAAG,EAAE,EAAAwC,QAAA,CAChBE,QAAQ,GAAAA,SAAAA,QAAAA,CAACC,OAAe,EAAA;AACtB,IAAA,IAAI,CAAC3C,UAAU,CAAE,CAAC4C,IAAI,CAACD,OAAO,CAAC,CAAA;GAChC,EAAAH,QAAA,CACF,CAAA;AACD,EAAA,IAAIhE,KAAK,CAACC,OAAO,CAACuD,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ,CAACP,MAAM,CAAC,UAACoB,GAAG,EAAE7D,KAAK,EAAEuC,GAAG,EAAI;AAAA,MAAA,IAAAI,SAAA,CAAA;AACzC,MAAA,OAAAE,QAAA,CAAA,EAAA,EAAYgB,GAAG,GAAAlB,SAAA,GAAAA,EAAAA,EAAAA,SAAA,CAAGJ,GAAG,IAAGgB,kBAAkB,CAACvD,KAAK,CAAC,EAAA2C,SAAA,EAAA,CAAA;KAClD,EAAEc,OAAO,CAAC,CAAA;AACZ,GAAA;AACD,EAAA,IAAIK,aAAa,CAACd,QAAQ,CAAC,EAAE;IAC3B,IAAMe,UAAU,GAAsBf,QAA6B,CAAA;AACnE,IAAA,OAAOZ,MAAM,CAACC,IAAI,CAAC0B,UAAU,CAAC,CAACtB,MAAM,CAAC,UAACoB,GAAG,EAAEtB,GAAG,EAAI;AAAA,MAAA,IAAAyB,SAAA,CAAA;AACjD,MAAA,OAAAnB,QAAA,CAAYgB,EAAAA,EAAAA,GAAG,GAAAG,SAAA,GAAA,EAAA,EAAAA,SAAA,CAAGzB,GAAG,CAAGgB,GAAAA,kBAAkB,CAACQ,UAAU,CAACxB,GAAG,CAAC,CAAC,EAAAyB,SAAA,EAAA,CAAA;KAC5D,EAAEP,OAA4B,CAAC,CAAA;AACjC,GAAA;AACD,EAAA,OAAOA,OAA4B,CAAA;AACrC;;AC9BA;;;;;;AAMG;AACW,SAAUQ,UAAUA,CAACC,CAAM,EAAEC,CAAM,EAAA;EAC/C,OAAOC,WAAW,CAACF,CAAC,EAAEC,CAAC,EAAE,UAACE,GAAQ,EAAEC,KAAU,EAAI;IAChD,IAAI,OAAOD,GAAG,KAAK,UAAU,IAAI,OAAOC,KAAK,KAAK,UAAU,EAAE;AAC5D;AACA;AACA,MAAA,OAAO,IAAI,CAAA;AACZ,KAAA;IACD,OAAOrE,SAAS,CAAC;AACnB,GAAC,CAAC,CAAA;AACJ;;ACZA;;;;;;;AAOG;AACa,SAAAsE,yBAAyBA,CAAChC,GAAW,EAAEiC,MAAyB,EAAA;AAC9E,EAAA,IAAMxE,KAAK,GAAGwE,MAAM,CAACjC,GAAG,CAAC,CAAA;EACzB,IAAMkC,SAAS,GAAGC,IAAI,CAACF,MAAM,EAAE,CAACjC,GAAG,CAAC,CAAC,CAAA;AACrC,EAAA,OAAO,CAACkC,SAAS,EAAEzE,KAAK,CAAC,CAAA;AAC3B,CAAA;AAEA;;;;;;;;AAQG;AACqB,SAAA2E,oBAAoBA,CAC1CC,IAAa,EACbC,YAAuB;AAAA,EAAA,IAAvBA;IAAAA,aAAgB,EAAO,CAAA;AAAA,GAAA;AAEvB,EAAA,IAAIC,GAAG,GAAGF,IAAI,IAAI,EAAE,CAAA;AACpB,EAAA,IAAIE,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;AACvB;IACAD,GAAG,GAAGE,kBAAkB,CAACF,GAAG,CAAChC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3C,GAAA,MAAM;AACL,IAAA,MAAM,IAAImC,KAAK,CAAoCL,kCAAAA,GAAAA,IAAI,MAAG,CAAC,CAAA;AAC5D,GAAA;EACD,IAAMM,OAAO,GAAMC,WAAW,CAACC,GAAG,CAACP,UAAU,EAAEC,GAAG,CAAC,CAAA;EACnD,IAAII,OAAO,KAAKjF,SAAS,EAAE;AACzB,IAAA,MAAM,IAAIgF,KAAK,CAAoCL,kCAAAA,GAAAA,IAAI,MAAG,CAAC,CAAA;AAC5D,GAAA;AACD,EAAA,IAAIM,OAAO,CAACxD,OAAO,CAAC,EAAE;AACpB,IAAA,IAAA2D,qBAAA,GAA4Bd,yBAAyB,CAAC7C,OAAO,EAAEwD,OAAO,CAAC;AAAhET,MAAAA,SAAS,GAAAY,qBAAA,CAAA,CAAA,CAAA;AAAEC,MAAAA,MAAM,GAAAD,qBAAA,CAAA,CAAA,CAAA,CAAA;AACxB,IAAA,IAAME,SAAS,GAAGZ,oBAAoB,CAAIW,MAAM,EAAET,UAAU,CAAC,CAAA;IAC7D,IAAIzC,MAAM,CAACC,IAAI,CAACoC,SAAS,CAAC,CAACnB,MAAM,GAAG,CAAC,EAAE;AACrC,MAAA,OAAAT,QAAA,CAAA,EAAA,EAAY4B,SAAS,EAAKc,SAAS,CAAA,CAAA;AACpC,KAAA;AACD,IAAA,OAAOA,SAAS,CAAA;AACjB,GAAA;AACD,EAAA,OAAOL,OAAO,CAAA;AAChB;;AC/CA;;;;;;;;;;;AAWG;AACqB,SAAAM,iBAAiBA,CAKvCC,SAAiC,EACjCzC,QAAuB,EACvBN,OAAY,EACZmC,UAAa,EACba,kBAA2B,EAAA;AAE3B;AACA;EACA,IAAI1C,QAAQ,KAAK/C,SAAS,EAAE;AAC1B,IAAA,OAAO,CAAC,CAAA;AACT,GAAA;AACD,EAAA,KAAK,IAAI0F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjD,OAAO,CAACY,MAAM,EAAEqC,CAAC,EAAE,EAAE;AACvC,IAAA,IAAMC,MAAM,GAAGlD,OAAO,CAACiD,CAAC,CAAC,CAAA;AAEzB;AACA,IAAA,IAAID,kBAAkB,IAAIG,GAAG,CAACD,MAAM,EAAE,CAACrE,cAAc,EAAEmE,kBAAkB,CAAC,CAAC,EAAE;AAC3E,MAAA,IAAM1F,KAAK,GAAGoF,GAAG,CAACpC,QAAQ,EAAE0C,kBAAkB,CAAC,CAAA;AAC/C,MAAA,IAAMI,aAAa,GAAGV,GAAG,CAACQ,MAAM,EAAE,CAACrE,cAAc,EAAEmE,kBAAkB,CAAC,EAAE,EAAE,CAAC,CAAA;MAC3E,IAAID,SAAS,CAACM,OAAO,CAACD,aAAa,EAAE9F,KAAK,EAAE6E,UAAU,CAAC,EAAE;AACvD,QAAA,OAAOc,CAAC,CAAA;AACT,OAAA;AACF,KAAA,MAAM,IAAIC,MAAM,CAACrE,cAAc,CAAC,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,IAAMyE,aAAa,GAAG;AACpBC,QAAAA,KAAK,EAAE7D,MAAM,CAACC,IAAI,CAACuD,MAAM,CAACrE,cAAc,CAAC,CAAC,CAAC2E,GAAG,CAAC,UAAC3D,GAAG,EAAA;UAAA,OAAM;YACvD4D,QAAQ,EAAE,CAAC5D,GAAG,CAAA;WACf,CAAA;SAAC,CAAA;OACH,CAAA;AAED,MAAA,IAAI6D,eAAe,GAAA,KAAA,CAAA,CAAA;AAEnB;MACA,IAAIR,MAAM,CAACK,KAAK,EAAE;AAChB;QACA,IAAWI,YAAY,GAAAxD,QAAA,CAAA,EAAA,GAAAyD,yBAAA,CAAKV,MAAM,GAANA,MAAM,EAAA,CAAA;AAElC,QAAA,IAAI,CAACS,YAAY,CAACE,KAAK,EAAE;UACvBF,YAAY,CAACE,KAAK,GAAG,EAAE,CAAA;AACxB,SAAA,MAAM;AACL;UACAF,YAAY,CAACE,KAAK,GAAGF,YAAY,CAACE,KAAK,CAACC,KAAK,EAAE,CAAA;AAChD,SAAA;AAEDH,QAAAA,YAAY,CAACE,KAAK,CAAC3C,IAAI,CAACoC,aAAa,CAAC,CAAA;AAEtCI,QAAAA,eAAe,GAAGC,YAAY,CAAA;AAC/B,OAAA,MAAM;QACLD,eAAe,GAAGhE,MAAM,CAACqE,MAAM,CAAC,EAAE,EAAEb,MAAM,EAAEI,aAAa,CAAC,CAAA;AAC3D,OAAA;AAED;AACA;MACA,OAAOI,eAAe,CAACD,QAAQ,CAAA;MAE/B,IAAIV,SAAS,CAACM,OAAO,CAACK,eAAe,EAAEpD,QAAQ,EAAE6B,UAAU,CAAC,EAAE;AAC5D,QAAA,OAAOc,CAAC,CAAA;AACT,OAAA;AACF,KAAA,MAAM,IAAIF,SAAS,CAACM,OAAO,CAACH,MAAM,EAAE5C,QAAQ,EAAE6B,UAAU,CAAC,EAAE;AAC1D,MAAA,OAAOc,CAAC,CAAA;AACT,KAAA;AACF,GAAA;AACD,EAAA,OAAO,CAAC,CAAA;AACV;;AC3FA;;;;;;;;;;AAUG;AACqB,SAAAe,sBAAsBA,CAK5CjB,SAAiC,EACjCzC,QAAuB,EACvBN,OAAY,EACZmC,UAAa,EACba,kBAA2B,EAAA;EAE3B,OAAOF,iBAAiB,CAAUC,SAAS,EAAEzC,QAAQ,EAAEN,OAAO,EAAEmC,UAAU,EAAEa,kBAAkB,CAAC,CAAA;AACjG;;ACrBA;;;;;AAKG;AACqB,SAAAiB,+BAA+BA,CAA0ChH,MAAS,EAAA;AACxG,EAAA,IAAImG,aAAiC,CAAA;EACrC,IAAMc,WAAW,GAAGxB,GAAG,CAACzF,MAAM,EAAE,4BAA4B,EAAEM,SAAS,CAAC,CAAA;AACxE,EAAA,IAAI4G,QAAQ,CAACD,WAAW,CAAC,EAAE;AACzBd,IAAAA,aAAa,GAAGc,WAAW,CAAA;AAC5B,GAAA,MAAM,IAAIA,WAAW,KAAK3G,SAAS,EAAE;AACpCJ,IAAAA,OAAO,CAACC,IAAI,CAAA,gDAAA,GAAiD,OAAO8G,WAAW,eAAW,CAAC,CAAA;AAC5F,GAAA;AACD,EAAA,OAAOd,aAAa,CAAA;AACtB;;ACpBA;;;;;AAKG;AACqB,SAAAgB,SAASA,CAAC9G,KAAU,EAAA;AAC1C,EAAA,IAAIR,KAAK,CAACC,OAAO,CAACO,KAAK,CAAC,EAAE;AACxB,IAAA,OAAO,OAAO,CAAA;AACf,GAAA;AACD,EAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;AAC7B,IAAA,OAAO,QAAQ,CAAA;AAChB,GAAA;EACD,IAAIA,KAAK,IAAI,IAAI,EAAE;AACjB,IAAA,OAAO,MAAM,CAAA;AACd,GAAA;AACD,EAAA,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;AAC9B,IAAA,OAAO,SAAS,CAAA;AACjB,GAAA;AACD,EAAA,IAAI,CAACM,KAAK,CAACN,KAAK,CAAC,EAAE;AACjB,IAAA,OAAO,QAAQ,CAAA;AAChB,GAAA;AACD,EAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;AAC7B,IAAA,OAAO,QAAQ,CAAA;AAChB,GAAA;AACD;AACA,EAAA,OAAO,QAAQ,CAAA;AACjB;;ACxBA;;;;;;;;;;AAUG;AACqB,SAAA+G,aAAaA,CACnCpH,MAAS,EAAA;AAET,EAAA,IAAMqH,IAAI,GAAKrH,MAAM,CAAfqH,IAAI,CAAA;AAEV,EAAA,IAAI,CAACA,IAAI,IAAIrH,MAAM,SAAM,EAAE;AACzB,IAAA,OAAOmH,SAAS,CAACnH,MAAM,CAAA,OAAA,CAAM,CAAC,CAAA;AAC/B,GAAA;AAED,EAAA,IAAI,CAACqH,IAAI,IAAIrH,MAAM,QAAK,EAAE;AACxB,IAAA,OAAO,QAAQ,CAAA;AAChB,GAAA;EAED,IAAI,CAACqH,IAAI,KAAKrH,MAAM,CAACsH,UAAU,IAAItH,MAAM,CAACsD,oBAAoB,CAAC,EAAE;AAC/D,IAAA,OAAO,QAAQ,CAAA;AAChB,GAAA;AAED,EAAA,IAAIzD,KAAK,CAACC,OAAO,CAACuH,IAAI,CAAC,IAAIA,IAAI,CAAC1D,MAAM,KAAK,CAAC,IAAI0D,IAAI,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;AACrEF,IAAAA,IAAI,GAAGA,IAAI,CAACG,IAAI,CAAC,UAACH,IAAI,EAAA;MAAA,OAAKA,IAAI,KAAK,MAAM,CAAA;KAAC,CAAA,CAAA;AAC5C,GAAA;AAED,EAAA,OAAOA,IAAI,CAAA;AACb;;AC7BA;;;;;;;AAOG;AACW,SAAUI,YAAYA,CAACC,IAAuB,EAAEC,IAAuB,EAAA;AACnF,EAAA,IAAMzD,GAAG,GAAGzB,MAAM,CAACqE,MAAM,CAAC,EAAE,EAAEY,IAAI,CAAC,CAAC;AACpC,EAAA,OAAOjF,MAAM,CAACC,IAAI,CAACiF,IAAI,CAAC,CAAC7E,MAAM,CAAC,UAACoB,GAAG,EAAEtB,GAAG,EAAI;IAC3C,IAAMgF,IAAI,GAAGF,IAAI,GAAGA,IAAI,CAAC9E,GAAG,CAAC,GAAG,EAAE;AAChCiF,MAAAA,KAAK,GAAGF,IAAI,CAAC/E,GAAG,CAAC,CAAA;IACnB,IAAI8E,IAAI,IAAI9E,GAAG,IAAI8E,IAAI,IAAIjI,QAAQ,CAACoI,KAAK,CAAC,EAAE;MAC1C3D,GAAG,CAACtB,GAAG,CAAC,GAAG6E,YAAY,CAACG,IAAI,EAAEC,KAAK,CAAC,CAAA;AACrC,KAAA,MAAM,IACLH,IAAI,IACJC,IAAI,KACHP,aAAa,CAACM,IAAI,CAAC,KAAK,QAAQ,IAAIN,aAAa,CAACO,IAAI,CAAC,KAAK,QAAQ,CAAC,IACtE/E,GAAG,KAAKf,YAAY,IACpBhC,KAAK,CAACC,OAAO,CAAC8H,IAAI,CAAC,IACnB/H,KAAK,CAACC,OAAO,CAAC+H,KAAK,CAAC,EACpB;AACA;MACA3D,GAAG,CAACtB,GAAG,CAAC,GAAGkF,KAAK,CAACF,IAAI,EAAEC,KAAK,CAAC,CAAA;AAC9B,KAAA,MAAM;AACL3D,MAAAA,GAAG,CAACtB,GAAG,CAAC,GAAGiF,KAAK,CAAA;AACjB,KAAA;AACD,IAAA,OAAO3D,GAAG,CAAA;GACX,EAAEA,GAAG,CAAC,CAAA;AACT;;;;;;;ACdA;;;;;;;;;AASG;AACqB,SAAA6D,cAAcA,CAIpCjC,SAAiC,EAAE9F,MAAS,EAAEkF,UAAA,EAAyB8C,WAAe,EAAA;AAAA,EAAA,IAAxC9C,UAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,UAAA,GAAgB,EAAO,CAAA;AAAA,GAAA;AACrE,EAAA,OAAO+C,sBAAsB,CAAUnC,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAE8C,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;AACvF,CAAA;AAEA;;;;;;;;;;;AAWG;AACG,SAAUE,gBAAgBA,CAC9BpC,SAAiC,EACjC9F,MAAS,EACTkF,UAAa,EACbiD,iBAA0B,EAC1B9E,QAAY,EAAA;EAEZ,IAAY+E,UAAU,GAA8DpI,MAAM,CAAA,IAAA,CAAA;IAAlEqI,IAAI,GAAwDrI,MAAM,CAAlEqI,IAAI;AAAQC,IAAAA,SAAS,GAAuCtI,MAAM,CAAA,MAAA,CAAA;AAAxCuI,IAAAA,6BAA6B,GAAAC,6BAAA,CAAKxI,MAAM,EAAAyI,WAAA,CAAA,CAAA;EAE1F,IAAMC,cAAc,GAAG5C,SAAS,CAACM,OAAO,CAACgC,UAAe,EAAE/E,QAAQ,EAAE6B,UAAU,CAAC,CAAA;AAC/E,EAAA,IAAIyD,eAAe,GAAG,CAACJ,6BAAkC,CAAC,CAAA;EAC1D,IAAIK,OAAO,GAAQ,EAAE,CAAA;AACrB,EAAA,IAAIT,iBAAiB,EAAE;AACrB,IAAA,IAAIE,IAAI,IAAI,OAAOA,IAAI,KAAK,SAAS,EAAE;AACrCO,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAM,CACtBZ,sBAAsB,CAAUnC,SAAS,EAAEuC,IAAS,EAAEnD,UAAU,EAAE7B,QAAQ,EAAE8E,iBAAiB,CAAC,CAC/F,CAAA;AACF,KAAA;AACD,IAAA,IAAIG,SAAS,IAAI,OAAOA,SAAS,KAAK,SAAS,EAAE;AAC/CM,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAM,CACtBZ,sBAAsB,CAAUnC,SAAS,EAAEwC,SAAc,EAAEpD,UAAU,EAAE7B,QAAQ,EAAE8E,iBAAiB,CAAC,CACpG,CAAA;AACF,KAAA;AACF,GAAA,MAAM;AACL,IAAA,IAAMW,iBAAiB,GAAGJ,cAAc,GAAGL,IAAI,GAAGC,SAAS,CAAA;AAC3D,IAAA,IAAIQ,iBAAiB,IAAI,OAAOA,iBAAiB,KAAK,SAAS,EAAE;AAC/DF,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAM,CACtBZ,sBAAsB,CAAUnC,SAAS,EAAEgD,iBAAsB,EAAE5D,UAAU,EAAE7B,QAAQ,EAAE8E,iBAAiB,CAAC,CAC5G,CAAA;AACF,KAAA;AACF,GAAA;EACD,IAAIS,OAAO,CAACjF,MAAM,EAAE;AAClBgF,IAAAA,eAAe,GAAGC,OAAO,CAACrC,GAAG,CAAC,UAACwC,CAAC,EAAA;AAAA,MAAA,OAAKtB,YAAY,CAACc,6BAA6B,EAAEQ,CAAC,CAAM,CAAA;KAAC,CAAA,CAAA;AAC1F,GAAA;AACD,EAAA,OAAOJ,eAAe,CAACK,OAAO,CAAC,UAACD,CAAC,EAAA;IAAA,OAC/Bd,sBAAsB,CAAUnC,SAAS,EAAEiD,CAAC,EAAE7D,UAAU,EAAE7B,QAAQ,EAAE8E,iBAAiB,CAAC,CAAA;GACvF,CAAA,CAAA;AACH,CAAA;AAEA;;;;;;;;;;;;;AAaG;AACG,SAAUc,yBAAyBA,CAA0CC,WAAkB,EAAA;EACnG,IAAMC,eAAe,GAAUD,WAAW,CAACpG,MAAM,CAC/C,UAACsG,YAAY,EAAEC,IAAI,EAAI;AACrB;AACA,IAAA,IAAIA,IAAI,CAAC1F,MAAM,GAAG,CAAC,EAAE;AACnB,MAAA,OAAO0F,IAAI,CAACL,OAAO,CAAC,UAACM,OAAO,EAAA;AAAA,QAAA,OAAKC,KAAK,CAACH,YAAY,CAACzF,MAAM,EAAE,UAACqC,CAAC,EAAA;UAAA,OAAK,EAAA,CAAA6C,MAAA,CAAIO,YAAY,CAACpD,CAAC,CAAC,CAAE6C,CAAAA,MAAM,CAACS,OAAO,CAAC,CAAA;SAAC,CAAA,CAAA;OAAC,CAAA,CAAA;AAC1G,KAAA;AACD;AACAF,IAAAA,YAAY,CAACI,OAAO,CAAC,UAACC,WAAW,EAAA;MAAA,OAAKA,WAAW,CAACxF,IAAI,CAACoF,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA,CAAA;AAChE,IAAA,OAAOD,YAAY,CAAA;AACrB,GAAC,EACD,CAAC,EAAE,CAAU;GACd,CAAA;;AAED,EAAA,OAAOD,eAAe,CAAA;AACxB,CAAA;AAEA;;;;;;;;;;;AAWG;AACG,SAAUO,aAAaA,CAC3B5D,SAAiC,EACjC9F,MAAS,EACTkF,UAAa,EACbiD,iBAA0B,EAC1B9E,QAAY,EAAA;EAEZ,IAAItB,OAAO,IAAI/B,MAAM,EAAE;IACrB,OAAO2J,gBAAgB,CAAU7D,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAEiD,iBAAiB,EAAE9E,QAAQ,CAAC,CAAA;AAC7F,GAAA;EACD,IAAIlC,gBAAgB,IAAInB,MAAM,EAAE;AAC9B,IAAA,IAAM2I,eAAe,GAAGiB,mBAAmB,CAAU9D,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAEiD,iBAAiB,EAAE9E,QAAQ,CAAC,CAAA;AAChH,IAAA,OAAOsF,eAAe,CAACK,OAAO,CAAC,UAACD,CAAC,EAAI;MACnC,OAAOd,sBAAsB,CAAUnC,SAAS,EAAEiD,CAAC,EAAE7D,UAAU,EAAE7B,QAAQ,EAAE8E,iBAAiB,CAAC,CAAA;AAC/F,KAAC,CAAC,CAAA;AACH,GAAA;AACD,EAAA,IAAIrH,UAAU,IAAId,MAAM,IAAIH,KAAK,CAACC,OAAO,CAACE,MAAM,CAAC4G,KAAK,CAAC,EAAE;IACvD,IAAMiD,mBAAmB,GAAU7J,MAAM,CAAC4G,KAAK,CAACL,GAAG,CAAC,UAACuD,cAAc,EAAA;MAAA,OACjE7B,sBAAsB,CAAUnC,SAAS,EAAEgE,cAAmB,EAAE5E,UAAU,EAAE7B,QAAQ,EAAE8E,iBAAiB,CAAC,CAAA;KACzG,CAAA,CAAA;AACD,IAAA,IAAMgB,eAAe,GAAGF,yBAAyB,CAAIY,mBAAmB,CAAC,CAAA;AACzE,IAAA,OAAOV,eAAe,CAAC5C,GAAG,CAAC,UAACkD,WAAW,EAAA;MAAA,OAAAvG,QAAA,KAAWlD,MAAM,EAAA;AAAE4G,QAAAA,KAAK,EAAE6C,WAAAA;AAAW,OAAA,CAAA,CAAA;AAAA,KAAG,CAAC,CAAA;AACjF,GAAA;AACD;EACA,OAAO,CAACzJ,MAAM,CAAC,CAAA;AACjB,CAAA;AAEA;;;;;;;;;;AAUG;AACG,SAAU2J,gBAAgBA,CAC9B7D,SAAiC,EACjC9F,MAAS,EACTkF,UAAa,EACbiD,iBAA0B,EAC1B9E,QAAY,EAAA;AAEZ;AACA,EAAA,IAAQ4B,IAAI,GAAqBjF,MAAM,CAA/BiF,IAAI;AAAK8E,IAAAA,WAAW,GAAAvB,6BAAA,CAAKxI,MAAM,EAAAgK,UAAA,CAAA,CAAA;AACvC;AACA,EAAA,IAAMC,SAAS,GAAGjF,oBAAoB,CAAIC,IAAI,EAAEC,UAAU,CAAC,CAAA;AAC3D;AACA,EAAA,OAAO+C,sBAAsB,CAC3BnC,SAAS,EAAA5C,QAAA,CACJ+G,EAAAA,EAAAA,SAAS,EAAKF,WAAW,GAC9B7E,UAAU,EACV7B,QAAQ,EACR8E,iBAAiB,CAClB,CAAA;AACH,CAAA;AAEA;;;;;;;AAOG;AACG,SAAU+B,gCAAgCA,CAI9CpE,SAAiC,EAAEqE,SAAY,EAAEjF,UAAc,EAAEkF,SAAa,EAAA;AAC9E;AACA,EAAA,IAAMpK,MAAM,GAAAkD,QAAA,CAAA,EAAA,EACPiH,SAAS,EAAA;AACZ7C,IAAAA,UAAU,EAAApE,QAAA,CAAOiH,EAAAA,EAAAA,SAAS,CAAC7C,UAAU,CAAA;GACtC,CAAA,CAAA;AAED;AACA,EAAA,IAAMjE,QAAQ,GAAsB+G,SAAS,IAAI3K,QAAQ,CAAC2K,SAAS,CAAC,GAAGA,SAAS,GAAG,EAAE,CAAA;EACrF3H,MAAM,CAACC,IAAI,CAACW,QAAQ,CAAC,CAACmG,OAAO,CAAC,UAAC5G,GAAG,EAAI;AACpC,IAAA,IAAIA,GAAG,IAAI5C,MAAM,CAACsH,UAAU,EAAE;AAC5B;AACA,MAAA,OAAA;AACD,KAAA;IAED,IAAIhE,oBAAoB,GAA8B,EAAE,CAAA;AACxD,IAAA,IAAI,OAAOtD,MAAM,CAACsD,oBAAoB,KAAK,SAAS,EAAE;AACpD,MAAA,IAAIvB,OAAO,IAAI/B,MAAM,CAACsD,oBAAqB,EAAE;AAC3CA,QAAAA,oBAAoB,GAAGyE,cAAc,CACnCjC,SAAS,EACT;UAAEb,IAAI,EAAEQ,GAAG,CAACzF,MAAM,CAACsD,oBAAoB,EAAE,CAACvB,OAAO,CAAC,CAAA;AAAC,SAAO,EAC1DmD,UAAU,EACV7B,QAAa,CACd,CAAA;AACF,OAAA,MAAM,IAAI,MAAM,IAAIrD,MAAM,CAACsD,oBAAqB,EAAE;AACjDA,QAAAA,oBAAoB,GAAAJ,QAAA,CAAA,EAAA,EAAQlD,MAAM,CAACsD,oBAAoB,CAAE,CAAA;AAC1D,OAAA,MAAM,IAAIvC,UAAU,IAAIf,MAAM,CAACsD,oBAAqB,IAAI3B,UAAU,IAAI3B,MAAM,CAACsD,oBAAqB,EAAE;AACnGA,QAAAA,oBAAoB,GAAAJ,QAAA,CAAA;AAClBmE,UAAAA,IAAI,EAAE,QAAA;SACHrH,EAAAA,MAAM,CAACsD,oBAAoB,CAC/B,CAAA;AACF,OAAA,MAAM;AACLA,QAAAA,oBAAoB,GAAG;UAAE+D,IAAI,EAAEF,SAAS,CAAC1B,GAAG,CAACpC,QAAQ,EAAE,CAACT,GAAG,CAAC,CAAC,CAAA;SAAG,CAAA;AACjE,OAAA;AACF,KAAA,MAAM;AACLU,MAAAA,oBAAoB,GAAG;QAAE+D,IAAI,EAAEF,SAAS,CAAC1B,GAAG,CAACpC,QAAQ,EAAE,CAACT,GAAG,CAAC,CAAC,CAAA;OAAG,CAAA;AACjE,KAAA;AAED;AACA5C,IAAAA,MAAM,CAACsH,UAAU,CAAC1E,GAAG,CAAC,GAAGU,oBAAoB,CAAA;AAC7C;AACA+G,IAAAA,GAAG,CAACrK,MAAM,CAACsH,UAAU,EAAE,CAAC1E,GAAG,EAAEhC,wBAAwB,CAAC,EAAE,IAAI,CAAC,CAAA;AAC/D,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOZ,MAAM,CAAA;AACf,CAAA;AAEA;;;;;;;;;;;;;AAaG;AACa,SAAAiI,sBAAsBA,CAIpCnC,SAAiC,EAAE9F,MAAS,EAAEkF,UAAa,EAAE8C,WAAe,EAAEG,iBAAiB,EAAQ;AAAA,EAAA,IAAzBA,iBAAiB,KAAA,KAAA,CAAA,EAAA;AAAjBA,IAAAA,iBAAiB,GAAG,KAAK,CAAA;AAAA,GAAA;AACvG,EAAA,IAAI,CAAC1I,QAAQ,CAACO,MAAM,CAAC,EAAE;IACrB,OAAO,CAAC,EAAO,CAAC,CAAA;AACjB,GAAA;AACD,EAAA,IAAM2I,eAAe,GAAGe,aAAa,CAAU5D,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAEiD,iBAAiB,EAAEH,WAAW,CAAC,CAAA;AAC7G,EAAA,OAAOW,eAAe,CAACK,OAAO,CAAC,UAACD,CAAI,EAAI;IACtC,IAAIuB,cAAc,GAAGvB,CAAC,CAAA;IACtB,IAAIxH,MAAM,IAAI+I,cAAc,EAAE;MAC5B,OAAOpC,gBAAgB,CAAUpC,SAAS,EAAEwE,cAAc,EAAEpF,UAAU,EAAEiD,iBAAiB,EAAEH,WAAgB,CAAC,CAAA;AAC7G,KAAA;IACD,IAAIlH,UAAU,IAAId,MAAM,EAAE;MACxB,IAAI;AACFsK,QAAAA,cAAc,GAAGC,UAAU,CAACxB,CAAC,EAAE;AAC7ByB,UAAAA,IAAI,EAAE,KAAA;AACI,SAAA,CAAM,CAAA;OACnB,CAAC,OAAOC,CAAC,EAAE;AACVvK,QAAAA,OAAO,CAACC,IAAI,CAAC,wCAAwC,EAAEsK,CAAC,CAAC,CAAA;QACzDC,IAAAA,eAAA,GAAiDJ,cAAc,CAAA;UAA7CK,0BAA0B,GAAAnC,6BAAA,CAAAkC,eAAA,EAAAE,UAAA,EAAA;AAC5C,QAAA,OAAOD,0BAA+B,CAAA;AACvC,OAAA;AACF,KAAA;IACD,IAAME,uBAAuB,GAC3BhK,yBAAyB,IAAIyJ,cAAc,IAAIA,cAAc,CAAChH,oBAAoB,KAAK,KAAK,CAAA;AAC9F,IAAA,IAAIuH,uBAAuB,EAAE;MAC3B,OAAOX,gCAAgC,CAAUpE,SAAS,EAAEwE,cAAc,EAAEpF,UAAU,EAAE8C,WAAgB,CAAC,CAAA;AAC1G,KAAA;AAED,IAAA,OAAOsC,cAAc,CAAA;AACvB,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA;;;;;;;;;;;AAWG;AACG,SAAUQ,wBAAwBA,CAItChF,SAAiC,EAAE9F,MAAS,EAAEkF,UAAa,EAAEiD,iBAA0B,EAAEH,WAAe,EAAA;AACxG,EAAA,IAAI+C,UAA2B,CAAA;EAC/B,IAAIlL,KAAK,CAACC,OAAO,CAACE,MAAM,CAACgL,KAAK,CAAC,EAAE;IAC/BD,UAAU,GAAG/K,MAAM,CAACgL,KAAY,CAAA;GACjC,MAAM,IAAInL,KAAK,CAACC,OAAO,CAACE,MAAM,CAACsG,KAAK,CAAC,EAAE;IACtCyE,UAAU,GAAG/K,MAAM,CAACsG,KAAY,CAAA;AACjC,GAAA;AACD,EAAA,IAAIyE,UAAU,EAAE;AACd;IACA,IAAM1H,QAAQ,GAAG2E,WAAW,KAAK1H,SAAS,IAAI6H,iBAAiB,GAAI,EAAQ,GAAGH,WAAW,CAAA;AACzF,IAAA,IAAM7B,aAAa,GAAGa,+BAA+B,CAAIhH,MAAM,CAAC,CAAA;AAChE+K,IAAAA,UAAU,GAAGA,UAAU,CAACxE,GAAG,CAAC,UAACwC,CAAC,EAAI;MAChC,IAAIhH,OAAO,IAAIgH,CAAC,EAAE;AAChB;AACA,QAAA,OAAOY,gBAAgB,CAAU7D,SAAS,EAAEiD,CAAC,EAAE7D,UAAU,EAAE,KAAK,EAAE7B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/E,OAAA;AACD,MAAA,OAAO0F,CAAC,CAAA;AACV,KAAC,CAAC,CAAA;AACF;AACA,IAAA,IAAM9C,MAAM,GAAGc,sBAAsB,CAAUjB,SAAS,EAAEzC,QAAQ,EAAE0H,UAAU,EAAE7F,UAAU,EAAEiB,aAAa,CAAC,CAAA;AAC1G,IAAA,IAAIgC,iBAAiB,EAAE;AACrB,MAAA,OAAO4C,UAAU,CAAA;AAClB,KAAA;AACD/K,IAAAA,MAAM,GAAG+K,UAAU,CAAC9E,MAAM,CAAM,CAAA;AACjC,GAAA;EACD,OAAO,CAACjG,MAAM,CAAC,CAAA;AACjB,CAAA;AAEA;;;;;;;;;;AAUG;AACG,SAAU4J,mBAAmBA,CACjC9D,SAAiC,EACjC9F,MAAS,EACTkF,UAAa,EACbiD,iBAA0B,EAC1B9E,QAAY,EAAA;AAEZ;AACA,EAAA,IAAQ4H,YAAY,GAAyBjL,MAAM,CAA3CiL,YAAY;AAAKC,IAAAA,eAAe,GAAA1C,6BAAA,CAAKxI,MAAM,EAAAmL,UAAA,CAAA,CAAA;AACnD,EAAA,IAAMxC,eAAe,GAAGmC,wBAAwB,CAC9ChF,SAAS,EACToF,eAAoB,EACpBhG,UAAU,EACViD,iBAAiB,EACjB9E,QAAQ,CACT,CAAA;AACD,EAAA,OAAOsF,eAAe,CAACK,OAAO,CAAC,UAACsB,cAAc,EAAA;AAAA,IAAA,OAC5Cc,mBAAmB,CAAUtF,SAAS,EAAEmF,YAAY,EAAEX,cAAc,EAAEpF,UAAU,EAAEiD,iBAAiB,EAAE9E,QAAQ,CAAC,CAAA;GAC/G,CAAA,CAAA;AACH,CAAA;AAEA;;;;;;;;;;;AAWG;AACa,SAAA+H,mBAAmBA,CACjCtF,SAAiC,EACjCmF,YAA+B,EAC/BX,cAAiB,EACjBpF,UAAa,EACbiD,iBAA0B,EAC1B9E,QAAY,EAAA;AAEZ,EAAA,IAAIuF,OAAO,GAAG,CAAC0B,cAAc,CAAC,CAAA;AAC9B;EAAA,IAAAe,KAAA,GAAAA,SAAAA,KAAAA,GAC0C;AACxC;AACA,IAAA,IAAI,CAAClD,iBAAiB,IAAI1C,GAAG,CAACpC,QAAQ,EAAE,CAACiI,aAAa,CAAC,CAAC,KAAKhL,SAAS,EAAE;AAAA,MAAA,OAAA,UAAA,CAAA;AAEvE,KAAA;AACD;IACA,IAAIgK,cAAc,CAAChD,UAAU,IAAI,EAAEgE,aAAa,IAAIhB,cAAc,CAAChD,UAAU,CAAC,EAAE;AAAA,MAAA,OAAA,UAAA,CAAA;AAE/E,KAAA;AACD,IAAA,IAAA5B,qBAAA,GAAiDd,yBAAyB,CACxE0G,aAAa,EACbL,YAAiC,CAClC;AAHMM,MAAAA,qBAAqB,GAAA7F,qBAAA,CAAA,CAAA,CAAA;AAAE8F,MAAAA,eAAe,GAAA9F,qBAAA,CAAA,CAAA,CAAA,CAAA;AAI7C,IAAA,IAAI7F,KAAK,CAACC,OAAO,CAAC0L,eAAe,CAAC,EAAE;MAClC5C,OAAO,CAAC,CAAC,CAAC,GAAG6C,uBAAuB,CAAInB,cAAc,EAAEkB,eAAe,CAAC,CAAA;AACzE,KAAA,MAAM,IAAI/L,QAAQ,CAAC+L,eAAe,CAAC,EAAE;AACpC5C,MAAAA,OAAO,GAAG8C,mBAAmB,CAC3B5F,SAAS,EACTwE,cAAc,EACdpF,UAAU,EACVoG,aAAa,EACbE,eAAoB,EACpBrD,iBAAiB,EACjB9E,QAAQ,CACT,CAAA;AACF,KAAA;AAAA,IAAA,OAAA;AAAAsI,MAAAA,CAAA,EACM/C,OAAO,CAACI,OAAO,CAAC,UAAChJ,MAAM,EAAA;AAAA,QAAA,OAC5BoL,mBAAmB,CAAUtF,SAAS,EAAEyF,qBAAqB,EAAEvL,MAAM,EAAEkF,UAAU,EAAEiD,iBAAiB,EAAE9E,QAAQ,CAAC,CAAA;AAAA,OAAA,CAAA;AAChH,KAAA,CAAA;GACF,CAAA;EA7BD,KAAK,IAAMiI,aAAa,IAAIL,YAAY,EAAA;IAAA,IAAAW,IAAA,GAAAP,KAAA,EAAA,CAAA;AAAA,IAAA,IAAAO,IAAA,KAGpC,UAAA,EAAA,SAAA;AAAS,IAAA,IAAA,OAAAA,IAAA,KAAA,QAAA,EAAA,OAAAA,IAAA,CAAAD,CAAA,CAAA;AAAA,GAAA;AA2Bb,EAAA,OAAO/C,OAAO,CAAA;AAChB,CAAA;AAEA;;;;;AAKG;AACa,SAAA6C,uBAAuBA,CACrCzL,MAAS,EACT6L,oBAA+B,EAAA;EAE/B,IAAI,CAACA,oBAAoB,EAAE;AACzB,IAAA,OAAO7L,MAAM,CAAA;AACd,GAAA;AACD,EAAA,IAAMwG,QAAQ,GAAG3G,KAAK,CAACC,OAAO,CAACE,MAAM,CAACwG,QAAQ,CAAC,GAC3C3G,KAAK,CAACiM,IAAI,CAAC,IAAIC,GAAG,CAAA,EAAA,CAAAlD,MAAA,CAAK7I,MAAM,CAACwG,QAAQ,EAAKqF,oBAAoB,CAAC,CAAC,CAAC,GAClEA,oBAAoB,CAAA;EACxB,OAAA3I,QAAA,KAAYlD,MAAM,EAAA;AAAEwG,IAAAA,QAAQ,EAAEA,QAAAA;AAAQ,GAAA,CAAA,CAAA;AACxC,CAAA;AAEA;;;;;;;;;;;;AAYG;AACa,SAAAkF,mBAAmBA,CACjC5F,SAAiC,EACjC9F,MAAS,EACTkF,UAAa,EACboG,aAAqB,EACrBE,eAAkB,EAClBrD,iBAA0B,EAC1B9E,QAAY,EAAA;AAEZ,EAAA,IAAM2I,gBAAgB,GAAG/D,sBAAsB,CAC7CnC,SAAS,EACT0F,eAAe,EACftG,UAAU,EACV7B,QAAQ,EACR8E,iBAAiB,CAClB,CAAA;AACD,EAAA,OAAO6D,gBAAgB,CAAChD,OAAO,CAAC,UAACiD,SAAS,EAAI;AAC5C,IAAA,IAAQjB,KAAK,GAAyBiB,SAAS,CAAvCjB,KAAK;AAAKkB,MAAAA,eAAe,GAAA1D,6BAAA,CAAKyD,SAAS,EAAAE,UAAA,CAAA,CAAA;AAC/CnM,IAAAA,MAAM,GAAGyH,YAAY,CAACzH,MAAM,EAAEkM,eAAe,CAAM,CAAA;AACnD;IACA,IAAIlB,KAAK,KAAK1K,SAAS,EAAE;AACvB,MAAA,OAAON,MAAM,CAAA;AACd,KAAA;AACD;IACA,IAAMoM,cAAc,GAAGpB,KAAK,CAACzE,GAAG,CAAC,UAAC8F,SAAS,EAAI;MAC7C,IAAI,OAAOA,SAAS,KAAK,SAAS,IAAI,EAAEtK,OAAO,IAAIsK,SAAS,CAAC,EAAE;QAC7D,OAAO,CAACA,SAAc,CAAC,CAAA;AACxB,OAAA;MACD,OAAO1C,gBAAgB,CAAU7D,SAAS,EAAEuG,SAAc,EAAEnH,UAAU,EAAEiD,iBAAiB,EAAE9E,QAAQ,CAAC,CAAA;AACtG,KAAC,CAAC,CAAA;AACF,IAAA,IAAM8F,eAAe,GAAGF,yBAAyB,CAACmD,cAAc,CAAC,CAAA;AACjE,IAAA,OAAOjD,eAAe,CAACH,OAAO,CAAC,UAACsD,aAAa,EAAA;AAAA,MAAA,OAC3CC,uBAAuB,CACrBzG,SAAS,EACT9F,MAAM,EACNkF,UAAU,EACVoG,aAAa,EACbgB,aAAa,EACbnE,iBAAiB,EACjB9E,QAAQ,CACT,CAAA;KACF,CAAA,CAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA;;;;;;;;;;;;;AAaG;AACa,SAAAkJ,uBAAuBA,CAKrCzG,SAAiC,EACjC9F,MAAS,EACTkF,UAAa,EACboG,aAAqB,EACrBN,KAAiB,EACjB7C,iBAA0B,EAC1B9E,QAAY,EAAA;EAEZ,IAAMmJ,eAAe,GAAGxB,KAAM,CAACrI,MAAM,CAAC,UAAC0J,SAAS,EAAI;AAClD,IAAA,IAAI,OAAOA,SAAS,KAAK,SAAS,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAAC/E,UAAU,EAAE;AACzE,MAAA,OAAO,KAAK,CAAA;AACb,KAAA;AACD,IAAA,IAAyBmF,uBAAuB,GAAKJ,SAAS,CAAC/E,UAAU,CAAhEgE,aAAa,CAAA,CAAA;AACtB,IAAA,IAAImB,uBAAuB,EAAE;AAAA,MAAA,IAAAC,WAAA,CAAA;AAC3B,MAAA,IAAMC,eAAe,GAAM;AACzBtF,QAAAA,IAAI,EAAE,QAAQ;QACdC,UAAU,GAAAoF,WAAA,GAAAA,EAAAA,EAAAA,WAAA,CACPpB,aAAa,CAAA,GAAGmB,uBAAuB,EAAAC,WAAA,CAAA;OAEtC,CAAA;MACN,OAAO5G,SAAS,CAACM,OAAO,CAACuG,eAAe,EAAEtJ,QAAQ,EAAE6B,UAAU,CAAC,IAAIiD,iBAAiB,CAAA;AACrF,KAAA;AACD,IAAA,OAAO,KAAK,CAAA;AACd,GAAC,CAAC,CAAA;EAEF,IAAI,CAACA,iBAAiB,IAAIqE,eAAgB,CAAC7I,MAAM,KAAK,CAAC,EAAE;AACvDzD,IAAAA,OAAO,CAACC,IAAI,CAAC,wFAAwF,CAAC,CAAA;IACtG,OAAO,CAACH,MAAM,CAAC,CAAA;AAChB,GAAA;AACD,EAAA,OAAOwM,eAAe,CAACxD,OAAO,CAAC,UAACD,CAAC,EAAI;IACnC,IAAMsD,SAAS,GAAMtD,CAAM,CAAA;IAC3B,IAAA6D,sBAAA,GAA6BhI,yBAAyB,CAAC0G,aAAa,EAAEe,SAAS,CAAC/E,UAA+B,CAAC;AAAzGuF,MAAAA,kBAAkB,GAAAD,sBAAA,CAAA,CAAA,CAAA,CAAA;AACzB,IAAA,IAAMV,eAAe,GAAAhJ,QAAA,CAAA,EAAA,EAAQmJ,SAAS,EAAA;AAAE/E,MAAAA,UAAU,EAAEuF,kBAAAA;KAAoB,CAAA,CAAA;AACxE,IAAA,IAAMjE,OAAO,GAAGX,sBAAsB,CACpCnC,SAAS,EACToG,eAAe,EACfhH,UAAU,EACV7B,QAAQ,EACR8E,iBAAiB,CAClB,CAAA;AACD,IAAA,OAAOS,OAAO,CAACrC,GAAG,CAAC,UAACwC,CAAC,EAAA;AAAA,MAAA,OAAKtB,YAAY,CAACzH,MAAM,EAAE+I,CAAC,CAAM,CAAA;KAAC,CAAA,CAAA;AACzD,GAAC,CAAC,CAAA;AACJ;;AC9iBA;;AAEG;AACI,IAAM+D,WAAW,GAAqB;AAC3CzF,EAAAA,IAAI,EAAE,QAAQ;AACd0F,EAAAA,GAAG,EAAEtL,cAAc;AACnB6F,EAAAA,UAAU,EAAE;AACV0F,IAAAA,oBAAoB,EAAE;AACpB3F,MAAAA,IAAI,EAAE,QAAA;AACP,KAAA;AACF,GAAA;CACF,CAAA;AAED;;;;;;;;;;;;;;;;;;;AAmBG;AACG,SAAU4F,mBAAmBA,CACjCnH,SAAiC,EACjCZ,UAAa,EACblF,MAAU,EACVqD,QAAA,EAAkB;AAAA,EAAA,IAAlBA,QAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,QAAA,GAAgB,EAAE,CAAA;AAAA,GAAA;EAElB,IAAI6J,UAAU,GAAG,CAAC,CAAA;AAClB,EAAA,IAAIlN,MAAM,EAAE;AACV,IAAA,IAAIP,UAAQ,CAACO,MAAM,CAACsH,UAAU,CAAC,EAAE;AAC/B4F,MAAAA,UAAU,IAAIpK,MAAM,CAClB9C,MAAM,CAACsH,UAAU,EACjB,UAAC6F,KAAK,EAAE9M,KAAK,EAAEuC,GAAG,EAAI;AACpB,QAAA,IAAMwK,SAAS,GAAG3H,GAAG,CAACpC,QAAQ,EAAET,GAAG,CAAC,CAAA;AACpC,QAAA,IAAI,OAAOvC,KAAK,KAAK,SAAS,EAAE;AAC9B,UAAA,OAAO8M,KAAK,CAAA;AACb,SAAA;AACD,QAAA,IAAIjH,GAAG,CAAC7F,KAAK,EAAE0B,OAAO,CAAC,EAAE;UACvB,IAAMsL,SAAS,GAAGtF,cAAc,CAAUjC,SAAS,EAAEzF,KAAU,EAAE6E,UAAU,EAAEkI,SAAS,CAAC,CAAA;AACvF,UAAA,OAAOD,KAAK,GAAGF,mBAAmB,CAAUnH,SAAS,EAAEZ,UAAU,EAAEmI,SAAS,EAAED,SAAS,IAAI,EAAE,CAAC,CAAA;AAC/F,SAAA;QACD,IAAIlH,GAAG,CAAC7F,KAAK,EAAEsB,UAAU,CAAC,IAAIyL,SAAS,EAAE;AACvC,UAAA,OACED,KAAK,GAAGG,wBAAwB,CAAUxH,SAAS,EAAEZ,UAAU,EAAEkI,SAAS,EAAE3H,GAAG,CAACpF,KAAK,EAAEsB,UAAU,CAAQ,CAAC,CAAA;AAE7G,SAAA;AACD,QAAA,IAAItB,KAAK,CAACgH,IAAI,KAAK,QAAQ,EAAE;AAC3B,UAAA,OAAO8F,KAAK,GAAGF,mBAAmB,CAAUnH,SAAS,EAAEZ,UAAU,EAAE7E,KAAU,EAAE+M,SAAS,IAAI,EAAE,CAAC,CAAA;AAChG,SAAA;QACD,IAAI/M,KAAK,CAACgH,IAAI,KAAKF,SAAS,CAACiG,SAAS,CAAC,EAAE;AACvC;AACA,UAAA,IAAIG,QAAQ,GAAGJ,KAAK,GAAG,CAAC,CAAA;UACxB,IAAI9M,KAAK,WAAQ,EAAE;AACjB;AACA;YACAkN,QAAQ,IAAIH,SAAS,KAAK/M,KAAK,WAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;AACjD,WAAA,MAAM,IAAIA,KAAK,CAAA,OAAA,CAAM,EAAE;AACtB;AACA;YACAkN,QAAQ,IAAIH,SAAS,KAAK/M,KAAK,SAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;AAC/C,WAAA;AACD;AACA,UAAA,OAAOkN,QAAQ,CAAA;AAChB,SAAA;AACD,QAAA,OAAOJ,KAAK,CAAA;OACb,EACD,CAAC,CACF,CAAA;AACF,KAAA,MAAM,IAAIjG,QAAQ,CAAClH,MAAM,CAACqH,IAAI,CAAC,IAAIrH,MAAM,CAACqH,IAAI,KAAKF,SAAS,CAAC9D,QAAQ,CAAC,EAAE;AACvE6J,MAAAA,UAAU,IAAI,CAAC,CAAA;AAChB,KAAA;AACF,GAAA;AACD,EAAA,OAAOA,UAAU,CAAA;AACnB,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBG;AACW,SAAUI,wBAAwBA,CAK9CxH,SAAiC,EACjCZ,UAAa,EACb7B,QAAuB,EACvBN,OAAY,EACZyK,cAAc,EACdzH,kBAA2B,EAAA;AAAA,EAAA,IAD3ByH,cAAc,KAAA,KAAA,CAAA,EAAA;IAAdA,cAAc,GAAG,CAAC,CAAC,CAAA;AAAA,GAAA;AAGnB;AACA,EAAA,IAAMC,eAAe,GAAG1K,OAAO,CAACD,MAAM,CAAC,UAAC4K,SAAmB,EAAEzH,MAAM,EAAE0H,KAAa,EAAI;AACpF,IAAA,IAAMC,WAAW,GAAQ,CAACd,WAAgB,EAAE7G,MAAM,CAAC,CAAA;AACnD,IAAA,IAAM4H,KAAK,GAAG9G,sBAAsB,CAAUjB,SAAS,EAAEzC,QAAQ,EAAEuK,WAAW,EAAE1I,UAAU,EAAEa,kBAAkB,CAAC,CAAA;AAC/G;IACA,IAAI8H,KAAK,KAAK,CAAC,EAAE;AACfH,MAAAA,SAAS,CAACzJ,IAAI,CAAC0J,KAAK,CAAC,CAAA;AACtB,KAAA;AACD,IAAA,OAAOD,SAAS,CAAA;GACjB,EAAE,EAAE,CAAC,CAAA;AAEN;AACA,EAAA,IAAID,eAAe,CAAC9J,MAAM,KAAK,CAAC,EAAE;IAChC,OAAO8J,eAAe,CAAC,CAAC,CAAC,CAAA;AAC1B,GAAA;AACD,EAAA,IAAI,CAACA,eAAe,CAAC9J,MAAM,EAAE;AAC3B;AACA4F,IAAAA,KAAK,CAACxG,OAAO,CAACY,MAAM,EAAE,UAACqC,CAAC,EAAA;AAAA,MAAA,OAAKyH,eAAe,CAACxJ,IAAI,CAAC+B,CAAC,CAAC,CAAA;KAAC,CAAA,CAAA;AACtD,GAAA;AAED;EACA,IAAA8H,qBAAA,GAAgCL,eAAe,CAAC3K,MAAM,CACpD,UAACiL,SAAmB,EAAEJ,KAAa,EAAI;AACrC,MAAA,IAAQK,SAAS,GAAKD,SAAS,CAAvBC,SAAS,CAAA;AACjB,MAAA,IAAI/H,MAAM,GAAGlD,OAAO,CAAC4K,KAAK,CAAC,CAAA;AAC3B,MAAA,IAAIzH,GAAG,CAACD,MAAM,EAAElE,OAAO,CAAC,EAAE;QACxBkE,MAAM,GAAG8B,cAAc,CAAUjC,SAAS,EAAEG,MAAM,EAAEf,UAAU,EAAE7B,QAAQ,CAAC,CAAA;AAC1E,OAAA;MACD,IAAM8J,KAAK,GAAGF,mBAAmB,CAACnH,SAAS,EAAEZ,UAAU,EAAEe,MAAM,EAAE5C,QAAQ,CAAC,CAAA;MAC1E,IAAI8J,KAAK,GAAGa,SAAS,EAAE;QACrB,OAAO;AAAEC,UAAAA,SAAS,EAAEN,KAAK;AAAEK,UAAAA,SAAS,EAAEb,KAAAA;SAAO,CAAA;AAC9C,OAAA;AACD,MAAA,OAAOY,SAAS,CAAA;AAClB,KAAC,EACD;AAAEE,MAAAA,SAAS,EAAET,cAAc;AAAEQ,MAAAA,SAAS,EAAE,CAAA;AAAG,KAAA,CAC5C;IAdOC,SAAS,GAAAH,qBAAA,CAATG,SAAS,CAAA;AAejB,EAAA,OAAOA,SAAS,CAAA;AAClB;;ACxKA;;;;;AAKG;AACqB,SAAAC,YAAYA,CAA0ClO,MAAS,EAAA;EACrF,OAAOH,KAAK,CAACC,OAAO,CAACE,MAAM,CAACmO,KAAK,CAAC,IAAInO,MAAM,CAACmO,KAAK,CAACxK,MAAM,GAAG,CAAC,IAAI3D,MAAM,CAACmO,KAAK,CAACC,KAAK,CAAC,UAACC,IAAI,EAAA;IAAA,OAAK5O,QAAQ,CAAC4O,IAAI,CAAC,CAAA;GAAC,CAAA,CAAA;AAC/G;;ACNA;;;;;;;;;;;;;AAaG;AACW,SAAUC,yBAAyBA,CAAUC,QAAY,EAAElL,QAAY,EAAA;AACnF,EAAA,IAAIxD,KAAK,CAACC,OAAO,CAACuD,QAAQ,CAAC,EAAE;IAC3B,IAAMmL,aAAa,GAAG3O,KAAK,CAACC,OAAO,CAACyO,QAAQ,CAAC,GAAGA,QAAQ,GAAG,EAAE,CAAA;IAC7D,IAAME,MAAM,GAAGpL,QAAQ,CAACkD,GAAG,CAAC,UAAClG,KAAK,EAAEqO,GAAG,EAAI;AACzC,MAAA,IAAIF,aAAa,CAACE,GAAG,CAAC,EAAE;QACtB,OAAOJ,yBAAyB,CAAME,aAAa,CAACE,GAAG,CAAC,EAAErO,KAAK,CAAC,CAAA;AACjE,OAAA;AACD,MAAA,OAAOA,KAAK,CAAA;AACd,KAAC,CAAC,CAAA;AACF,IAAA,OAAOoO,MAAsB,CAAA;AAC9B,GAAA;AACD,EAAA,IAAIhP,QAAQ,CAAC4D,QAAQ,CAAC,EAAE;AACtB,IAAA,IAAMa,GAAG,GAA8BzB,MAAM,CAACqE,MAAM,CAAC,EAAE,EAAEyH,QAAQ,CAAC,CAAC;AACnE,IAAA,OAAO9L,MAAM,CAACC,IAAI,CAACW,QAA6B,CAAC,CAACP,MAAM,CAAC,UAACoB,GAAG,EAAEtB,GAAG,EAAI;MACpEsB,GAAG,CAACtB,GAAc,CAAC,GAAG0L,yBAAyB,CAAIC,QAAQ,GAAG9I,GAAG,CAAC8I,QAAQ,EAAE3L,GAAG,CAAC,GAAG,EAAE,EAAE6C,GAAG,CAACpC,QAAQ,EAAET,GAAG,CAAC,CAAC,CAAA;AAC1G,MAAA,OAAOsB,GAAG,CAAA;KACX,EAAEA,GAAG,CAAC,CAAA;AACR,GAAA;AACD,EAAA,OAAOb,QAAQ,CAAA;AACjB;;ACnCA;;;;;;;;AAQG;AACW,SAAUsL,YAAYA,CAClCjH,IAAuB,EACvBC,IAAuB,EACvBiH,YAAA,EAAmD;AAAA,EAAA,IAAnDA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,YAAA,GAA8C,KAAK,CAAA;AAAA,GAAA;AAEnD,EAAA,OAAOnM,MAAM,CAACC,IAAI,CAACiF,IAAI,CAAC,CAAC7E,MAAM,CAAC,UAACoB,GAAG,EAAEtB,GAAG,EAAI;IAC3C,IAAMgF,IAAI,GAAGF,IAAI,GAAGA,IAAI,CAAC9E,GAAG,CAAC,GAAG,EAAE;AAChCiF,MAAAA,KAAK,GAAGF,IAAI,CAAC/E,GAAG,CAAC,CAAA;IACnB,IAAI8E,IAAI,IAAI9E,GAAG,IAAI8E,IAAI,IAAIjI,QAAQ,CAACoI,KAAK,CAAC,EAAE;MAC1C3D,GAAG,CAACtB,GAAG,CAAC,GAAG+L,YAAY,CAAC/G,IAAI,EAAEC,KAAK,EAAE+G,YAAY,CAAC,CAAA;AACnD,KAAA,MAAM,IAAIA,YAAY,IAAI/O,KAAK,CAACC,OAAO,CAAC8H,IAAI,CAAC,IAAI/H,KAAK,CAACC,OAAO,CAAC+H,KAAK,CAAC,EAAE;MACtE,IAAIgH,OAAO,GAAGhH,KAAK,CAAA;MACnB,IAAI+G,YAAY,KAAK,mBAAmB,EAAE;QACxCC,OAAO,GAAGhH,KAAK,CAAC/E,MAAM,CAAC,UAACgM,MAAM,EAAEzO,KAAK,EAAI;AACvC,UAAA,IAAI,CAACuH,IAAI,CAACL,QAAQ,CAAClH,KAAK,CAAC,EAAE;AACzByO,YAAAA,MAAM,CAAC7K,IAAI,CAAC5D,KAAK,CAAC,CAAA;AACnB,WAAA;AACD,UAAA,OAAOyO,MAAM,CAAA;SACd,EAAE,EAAE,CAAC,CAAA;AACP,OAAA;MACD5K,GAAG,CAACtB,GAAG,CAAC,GAAGgF,IAAI,CAACiB,MAAM,CAACgG,OAAO,CAAC,CAAA;AAChC,KAAA,MAAM;AACL3K,MAAAA,GAAG,CAACtB,GAAG,CAAC,GAAGiF,KAAK,CAAA;AACjB,KAAA;AACD,IAAA,OAAO3D,GAAG,CAAA;AACZ,GAAC,EAAEzB,MAAM,CAACqE,MAAM,CAAC,EAAE,EAAEY,IAAI,CAAC,CAAC,CAAC;AAC9B;;ACnCA;;;;;AAKG;AACqB,SAAAqH,UAAUA,CAA0C/O,MAAS,EAAA;AACnF,EAAA,OAAQH,KAAK,CAACC,OAAO,CAACE,MAAM,QAAK,CAAC,IAAIA,MAAM,CAAA,MAAA,CAAK,CAAC2D,MAAM,KAAK,CAAC,IAAK3C,SAAS,IAAIhB,MAAM,CAAA;AACxF;;ACPA;;;;;;AAMG;AACW,SAAUgP,QAAQA,CAC9BlJ,SAAiC,EACjCqE,SAAY,EACZjF,UAAA,EAAuB;AAAA,EAAA,IAAvBA,UAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,UAAA,GAAgB,EAAO,CAAA;AAAA,GAAA;EAEvB,IAAMlF,MAAM,GAAG+H,cAAc,CAAUjC,SAAS,EAAEqE,SAAS,EAAEjF,UAAU,EAAE5E,SAAS,CAAC,CAAA;EACnF,IAAM2O,UAAU,GAAGjP,MAAM,CAACgL,KAAK,IAAIhL,MAAM,CAACsG,KAAK,CAAA;AAC/C,EAAA,IAAIzG,KAAK,CAACC,OAAO,CAACE,MAAM,CAAA,MAAA,CAAK,CAAC,EAAE;AAC9B,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AACD,EAAA,IAAIH,KAAK,CAACC,OAAO,CAACmP,UAAU,CAAC,EAAE;AAC7B,IAAA,OAAOA,UAAU,CAACb,KAAK,CAAC,UAACa,UAAU,EAAA;MAAA,OAAK,OAAOA,UAAU,KAAK,SAAS,IAAIF,UAAU,CAACE,UAAU,CAAC,CAAA;KAAC,CAAA,CAAA;AACnG,GAAA;AACD,EAAA,OAAO,KAAK,CAAA;AACd;;ACrBA;;;;;;AAMG;AACqB,SAAAC,aAAaA,CAInCpJ,SAAiC,EAAE9F,MAAS,EAAEkF,UAAc,EAAA;AAC5D,EAAA,IAAI,CAAClF,MAAM,CAACmP,WAAW,IAAI,CAACnP,MAAM,CAACmO,KAAK,IAAI,OAAOnO,MAAM,CAACmO,KAAK,KAAK,SAAS,EAAE;AAC7E,IAAA,OAAO,KAAK,CAAA;AACb,GAAA;EACD,OAAOa,QAAQ,CAAUlJ,SAAS,EAAE9F,MAAM,CAACmO,KAAU,EAAEjJ,UAAU,CAAC,CAAA;AACpE;;ACGA;AACG;AACH,IAAYkK,uBAIX,CAAA;AAJD,CAAA,UAAYA,uBAAuB,EAAA;EACjCA,uBAAA,CAAAA,uBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM,CAAA;EACNA,uBAAA,CAAAA,uBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAM,CAAA;EACNA,uBAAA,CAAAA,uBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAQ,CAAA;AACV,CAAC,EAJWA,uBAAuB,KAAvBA,uBAAuB,GAIlC,EAAA,CAAA,CAAA,CAAA;AAED;;;;;;;;;;;;;;AAcG;AACa,SAAAC,0BAA0BA,CACxCrP,MAAS,EACTC,eAAA,EACAyO,GAAG,EAAK;AAAA,EAAA,IADRzO,eAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,eAAA,GAA2CmP,uBAAuB,CAACE,MAAM,CAAA;AAAA,GAAA;AAAA,EAAA,IACzEZ,GAAG,KAAA,KAAA,CAAA,EAAA;IAAHA,GAAG,GAAG,CAAC,CAAC,CAAA;AAAA,GAAA;EAER,IAAIA,GAAG,IAAI,CAAC,EAAE;AACZ,IAAA,IAAI7O,KAAK,CAACC,OAAO,CAACE,MAAM,CAACmO,KAAK,CAAC,IAAIO,GAAG,GAAG1O,MAAM,CAACmO,KAAK,CAACxK,MAAM,EAAE;AAC5D,MAAA,IAAM0K,IAAI,GAAGrO,MAAM,CAACmO,KAAK,CAACO,GAAG,CAAC,CAAA;AAC9B,MAAA,IAAI,OAAOL,IAAI,KAAK,SAAS,EAAE;AAC7B,QAAA,OAAOA,IAAS,CAAA;AACjB,OAAA;AACF,KAAA;GACF,MAAM,IAAIrO,MAAM,CAACmO,KAAK,IAAI,CAACtO,KAAK,CAACC,OAAO,CAACE,MAAM,CAACmO,KAAK,CAAC,IAAI,OAAOnO,MAAM,CAACmO,KAAK,KAAK,SAAS,EAAE;IAC5F,OAAOnO,MAAM,CAACmO,KAAU,CAAA;AACzB,GAAA;AACD,EAAA,IAAIlO,eAAe,KAAKmP,uBAAuB,CAACE,MAAM,IAAI7P,QAAQ,CAACO,MAAM,CAACC,eAAe,CAAC,EAAE;IAC1F,OAAOD,MAAM,CAACC,eAAoB,CAAA;AACnC,GAAA;AACD,EAAA,OAAO,EAAO,CAAA;AAChB,CAAA;AAEA;;;;;;;;;;;;;;;;;;AAkBG;AACH,SAASsP,uBAAuBA,CAC9B7K,GAAsB,EACtB9B,GAAW,EACX4M,eAAoC,EACpCC,sBAAyD,EACzDC,gBAAyB,EACzBC,cAAA,EACAC,uCAAiF;AAAA,EAAA,IADjFD,cAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,cAAA,GAA2B,EAAE,CAAA;AAAA,GAAA;AAAA,EAAA,IAC7BC;IAAAA,wCAA+E,EAAE,CAAA;AAAA,GAAA;EAEjF,IAAAC,qBAAA,GAAsDD,qCAAqC;IAAAE,sBAAA,GAAAD,qBAAA,CAAnFE,iBAAiB;AAAjBA,IAAAA,iBAAiB,GAAAD,sBAAA,KAAG,KAAA,CAAA,GAAA,qBAAqB,GAAAA,sBAAA,CAAA;AACjD,EAAA,IAAIL,sBAAsB,EAAE;AAC1B/K,IAAAA,GAAG,CAAC9B,GAAG,CAAC,GAAG4M,eAAe,CAAA;AAC3B,GAAA,MAAM,IAAIO,iBAAiB,KAAK,cAAc,EAAE;AAC/C,IAAA,IAAItQ,QAAQ,CAAC+P,eAAe,CAAC,EAAE;AAC7B;AACA;AACA;MACA,IACE,CAAC,CAACQ,OAAO,CAACR,eAAe,CAAC,IAAIG,cAAc,CAACpI,QAAQ,CAAC3E,GAAG,CAAC,MACzD8M,gBAAgB,IAAIK,iBAAiB,KAAK,0BAA0B,CAAC,EACtE;AACArL,QAAAA,GAAG,CAAC9B,GAAG,CAAC,GAAG4M,eAAe,CAAA;AAC3B,OAAA;AACF,KAAA,MAAM;AACL;AACA;AACA;AACAA,IAAAA,eAAe,KAAKlP,SAAS,KAC5ByP,iBAAiB,KAAK,qBAAqB,IAAIJ,cAAc,CAACpI,QAAQ,CAAC3E,GAAG,CAAC,CAAC,EAC7E;AACA8B,MAAAA,GAAG,CAAC9B,GAAG,CAAC,GAAG4M,eAAe,CAAA;AAC3B,KAAA;AACF,GAAA;AACH,CAAA;AAYA;;;;;;;;;;;;;;;;AAgBG;AACa,SAAAS,eAAeA,CAC7BnK,SAAiC,EACjCoK,SAAY,EAAAC,KAAA,EASsB;AAAA,EAAA,IAAAC,IAAA,GAAAD,KAAA,cAAF,EAAE,GAAAA,KAAA;IAPhCE,cAAc,GAAAD,IAAA,CAAdC,cAAc;IACdrI,WAAW,GAAAoI,IAAA,CAAXpI,WAAW;IAAAsI,eAAA,GAAAF,IAAA,CACXlL,UAAU;AAAVA,IAAAA,UAAU,GAAAoL,eAAA,KAAA,KAAA,CAAA,GAAG,EAAO,GAAAA,eAAA;IAAAC,qBAAA,GAAAH,IAAA,CACpBX,sBAAsB;AAAtBA,IAAAA,sBAAsB,GAAAc,qBAAA,KAAG,KAAA,CAAA,GAAA,KAAK,GAAAA,qBAAA;IAAAC,iBAAA,GAAAJ,IAAA,CAC9BK,YAAY;AAAZA,IAAAA,YAAY,GAAAD,iBAAA,KAAG,KAAA,CAAA,GAAA,EAAE,GAAAA,iBAAA;IAAAE,qBAAA,GAAAN,IAAA,CACjBR,qCAAqC;AAArCA,IAAAA,qCAAqC,GAAAc,qBAAA,KAAGpQ,KAAAA,CAAAA,GAAAA,SAAS,GAAAoQ,qBAAA;IAAAC,aAAA,GAAAP,IAAA,CACjD5J,QAAQ;AAARA,IAAAA,QAAQ,GAAAmK,aAAA,KAAG,KAAA,CAAA,GAAA,KAAK,GAAAA,aAAA,CAAA;EAGlB,IAAMtN,QAAQ,GAAO5D,QAAQ,CAACuI,WAAW,CAAC,GAAGA,WAAW,GAAG,EAAQ,CAAA;EACnE,IAAMhI,MAAM,GAAMP,QAAQ,CAACyQ,SAAS,CAAC,GAAGA,SAAS,GAAI,EAAQ,CAAA;AAC7D;EACA,IAAI3B,QAAQ,GAAwB8B,cAAc,CAAA;AAClD;EACA,IAAIO,eAAe,GAAa,IAAI,CAAA;EACpC,IAAIC,kBAAkB,GAAGJ,YAAY,CAAA;EAErC,IAAIhR,QAAQ,CAAC8O,QAAQ,CAAC,IAAI9O,QAAQ,CAACO,MAAM,CAAQ,SAAA,CAAA,CAAC,EAAE;AAClD;AACA;AACAuO,IAAAA,QAAQ,GAAGI,YAAY,CAACJ,QAAS,EAAEvO,MAAM,WAA6B,CAAM,CAAA;AAC7E,GAAA,MAAM,IAAIiB,WAAW,IAAIjB,MAAM,EAAE;IAChCuO,QAAQ,GAAGvO,MAAM,CAAwB,SAAA,CAAA,CAAA;AAC1C,GAAA,MAAM,IAAI+B,OAAO,IAAI/B,MAAM,EAAE;AAC5B,IAAA,IAAM8Q,OAAO,GAAG9Q,MAAM,CAAC+B,OAAO,CAAC,CAAA;AAC/B;AACA,IAAA,IAAI,CAAC0O,YAAY,CAAClJ,QAAQ,CAACuJ,OAAQ,CAAC,EAAE;AACpCD,MAAAA,kBAAkB,GAAGJ,YAAY,CAAC5H,MAAM,CAACiI,OAAQ,CAAC,CAAA;AAClDF,MAAAA,eAAe,GAAG5L,oBAAoB,CAAI8L,OAAO,EAAE5L,UAAU,CAAC,CAAA;AAC/D,KAAA;AACF,GAAA,MAAM,IAAI/D,gBAAgB,IAAInB,MAAM,EAAE;AACrC,IAAA,IAAMsK,cAAc,GAAGV,mBAAmB,CAAU9D,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAE,KAAK,EAAE7B,QAAQ,CAAC,CAAA;AACnGuN,IAAAA,eAAe,GAAGtG,cAAc,CAAC,CAAC,CAAC,CAAC;AACrC,GAAA,MAAM,IAAI4D,YAAY,CAAClO,MAAM,CAAC,EAAE;IAC/BuO,QAAQ,GAAIvO,MAAM,CAACmO,KAAc,CAAC5H,GAAG,CAAC,UAACwK,UAAa,EAAErC,GAAW,EAAA;AAAA,MAAA,OAC/DuB,eAAe,CAAOnK,SAAS,EAAEiL,UAAU,EAAE;AAC3C7L,QAAAA,UAAU,EAAVA,UAAU;AACVuK,QAAAA,sBAAsB,EAAtBA,sBAAsB;AACtBgB,QAAAA,YAAY,EAAZA,YAAY;AACZb,QAAAA,qCAAqC,EAArCA,qCAAqC;AACrCS,QAAAA,cAAc,EAAExQ,KAAK,CAACC,OAAO,CAACuQ,cAAc,CAAC,GAAGA,cAAc,CAAC3B,GAAG,CAAC,GAAGpO,SAAS;AAC/E0H,QAAAA,WAAW,EAAE3E,QAAAA;AACd,OAAA,CAAC,CAAA;KACI,CAAA,CAAA;AACT,GAAA,MAAM,IAAI1B,UAAU,IAAI3B,MAAM,EAAE;AAC/B,IAAA,IAAIA,MAAM,CAACgL,KAAM,CAACrH,MAAM,KAAK,CAAC,EAAE;AAC9B,MAAA,OAAOrD,SAAS,CAAA;AACjB,KAAA;AACD,IAAA,IAAM6F,aAAa,GAAGa,+BAA+B,CAAIhH,MAAM,CAAC,CAAA;AAChE4Q,IAAAA,eAAe,GAAG5Q,MAAM,CAACgL,KAAM,CAC7BsC,wBAAwB,CACtBxH,SAAS,EACTZ,UAAU,EACV8K,OAAO,CAAC3M,QAAQ,CAAC,GAAG/C,SAAS,GAAG+C,QAAQ,EACxCrD,MAAM,CAACgL,KAAY,EACnB,CAAC,EACD7E,aAAa,CACd,CACG,CAAA;AACP,GAAA,MAAM,IAAIpF,UAAU,IAAIf,MAAM,EAAE;AAC/B,IAAA,IAAIA,MAAM,CAACsG,KAAM,CAAC3C,MAAM,KAAK,CAAC,EAAE;AAC9B,MAAA,OAAOrD,SAAS,CAAA;AACjB,KAAA;AACD,IAAA,IAAM6F,cAAa,GAAGa,+BAA+B,CAAIhH,MAAM,CAAC,CAAA;AAChE4Q,IAAAA,eAAe,GAAG5Q,MAAM,CAACsG,KAAM,CAC7BgH,wBAAwB,CACtBxH,SAAS,EACTZ,UAAU,EACV8K,OAAO,CAAC3M,QAAQ,CAAC,GAAG/C,SAAS,GAAG+C,QAAQ,EACxCrD,MAAM,CAACsG,KAAY,EACnB,CAAC,EACDH,cAAa,CACd,CACG,CAAA;AACP,GAAA;AAED,EAAA,IAAIyK,eAAe,EAAE;AACnB,IAAA,OAAOX,eAAe,CAAUnK,SAAS,EAAE8K,eAAe,EAAE;AAC1D1L,MAAAA,UAAU,EAAVA,UAAU;AACVuK,MAAAA,sBAAsB,EAAtBA,sBAAsB;AACtBgB,MAAAA,YAAY,EAAEI,kBAAkB;AAChCjB,MAAAA,qCAAqC,EAArCA,qCAAqC;AACrCS,MAAAA,cAAc,EAAE9B,QAAyB;AACzCvG,MAAAA,WAAW,EAAE3E,QAAAA;AACd,KAAA,CAAC,CAAA;AACH,GAAA;AAED;EACA,IAAIkL,QAAQ,KAAKjO,SAAS,EAAE;IAC1BiO,QAAQ,GAAGvO,MAAM,CAAwB,SAAA,CAAA,CAAA;AAC1C,GAAA;EAED,QAAQoH,aAAa,CAAIpH,MAAM,CAAC;AAC9B;AACA,IAAA,KAAK,QAAQ;AAAE,MAAA;QACb,IAAMgR,cAAc,GAAGvO,MAAM,CAACC,IAAI,CAAC1C,MAAM,CAACsH,UAAU,IAAI,EAAE,CAAC,CAACxE,MAAM,CAAC,UAACoB,GAAsB,EAAEtB,GAAW,EAAI;AAAA,UAAA,IAAAqO,gBAAA,CAAA;AACzG;AACA;AACA,UAAA,IAAMzB,eAAe,GAAGS,eAAe,CAAUnK,SAAS,EAAEL,GAAG,CAACzF,MAAM,EAAE,CAAC4B,cAAc,EAAEgB,GAAG,CAAC,CAAC,EAAE;AAC9FsC,YAAAA,UAAU,EAAVA,UAAU;AACVuL,YAAAA,YAAY,EAAZA,YAAY;AACZb,YAAAA,qCAAqC,EAArCA,qCAAqC;YACrCH,sBAAsB,EAAEA,sBAAsB,KAAK,IAAI;YACvDY,cAAc,EAAE5K,GAAG,CAAC8I,QAAQ,EAAE,CAAC3L,GAAG,CAAC,CAAC;YACpCoF,WAAW,EAAEvC,GAAG,CAACpC,QAAQ,EAAE,CAACT,GAAG,CAAC,CAAC;AACjC4D,YAAAA,QAAQ,EAAAyK,CAAAA,gBAAA,GAAEjR,MAAM,CAACwG,QAAQ,MAAAyK,IAAAA,IAAAA,gBAAA,KAAfA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,gBAAA,CAAiB1J,QAAQ,CAAC3E,GAAG,CAAA;AACxC,WAAA,CAAC,CAAA;AACF2M,UAAAA,uBAAuB,CACrBrL,GAAG,EACHtB,GAAG,EACH4M,eAAe,EACfC,sBAAsB,EACtBjJ,QAAQ,EACRxG,MAAM,CAACwG,QAAQ,EACfoJ,qCAAqC,CACtC,CAAA;AACD,UAAA,OAAO1L,GAAG,CAAA;SACX,EAAE,EAAE,CAAM,CAAA;QACX,IAAIlE,MAAM,CAACsD,oBAAoB,EAAE;AAC/B;AACA,UAAA,IAAM4N,0BAA0B,GAAGzR,QAAQ,CAACO,MAAM,CAACsD,oBAAoB,CAAC,GAAGtD,MAAM,CAACsD,oBAAoB,GAAG,EAAE,CAAA;AAC3G,UAAA,IAAMZ,IAAI,GAAG,IAAIqJ,GAAG,EAAU,CAAA;AAC9B,UAAA,IAAItM,QAAQ,CAAC8O,QAAQ,CAAC,EAAE;YACtB9L,MAAM,CAACC,IAAI,CAAC6L,QAA6B,CAAC,CACvC5L,MAAM,CAAC,UAACC,GAAG,EAAA;cAAA,OAAK,CAAC5C,MAAM,CAACsH,UAAU,IAAI,CAACtH,MAAM,CAACsH,UAAU,CAAC1E,GAAG,CAAC,CAAA;AAAA,aAAA,CAAC,CAC9D4G,OAAO,CAAC,UAAC5G,GAAG,EAAA;AAAA,cAAA,OAAKF,IAAI,CAACyO,GAAG,CAACvO,GAAG,CAAC,CAAA;aAAC,CAAA,CAAA;AACnC,WAAA;AACD,UAAA,IAAIwO,gBAA0B,CAAA;AAC9B,UAAA,IAAI3R,QAAQ,CAAC4D,QAAQ,CAAC,EAAE;AACtB+N,YAAAA,gBAAgB,GAAG,EAAE,CAAA;YACrB3O,MAAM,CAACC,IAAI,CAACW,QAA6B,CAAC,CACvCV,MAAM,CAAC,UAACC,GAAG,EAAA;cAAA,OAAK,CAAC5C,MAAM,CAACsH,UAAU,IAAI,CAACtH,MAAM,CAACsH,UAAU,CAAC1E,GAAG,CAAC,CAAA;AAAA,aAAA,CAAC,CAC9D4G,OAAO,CAAC,UAAC5G,GAAG,EAAI;AACfF,cAAAA,IAAI,CAACyO,GAAG,CAACvO,GAAG,CAAC,CAAA;AACbwO,cAAAA,gBAAgB,CAACnN,IAAI,CAACrB,GAAG,CAAC,CAAA;AAC5B,aAAC,CAAC,CAAA;AACL,WAAA;AACDF,UAAAA,IAAI,CAAC8G,OAAO,CAAC,UAAC5G,GAAG,EAAI;AAAA,YAAA,IAAAyO,iBAAA,CAAA;AACnB,YAAA,IAAM7B,eAAe,GAAGS,eAAe,CAACnK,SAAS,EAAEoL,0BAA+B,EAAE;AAClFhM,cAAAA,UAAU,EAAVA,UAAU;AACVuL,cAAAA,YAAY,EAAZA,YAAY;AACZb,cAAAA,qCAAqC,EAArCA,qCAAqC;cACrCH,sBAAsB,EAAEA,sBAAsB,KAAK,IAAI;cACvDY,cAAc,EAAE5K,GAAG,CAAC8I,QAAQ,EAAE,CAAC3L,GAAG,CAAC,CAAC;cACpCoF,WAAW,EAAEvC,GAAG,CAACpC,QAAQ,EAAE,CAACT,GAAG,CAAC,CAAC;AACjC4D,cAAAA,QAAQ,EAAA6K,CAAAA,iBAAA,GAAErR,MAAM,CAACwG,QAAQ,MAAA6K,IAAAA,IAAAA,iBAAA,KAAfA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,iBAAA,CAAiB9J,QAAQ,CAAC3E,GAAG,CAAA;AACxC,aAAA,CAAC,CAAA;AACF;AACA2M,YAAAA,uBAAuB,CACrByB,cAAmC,EACnCpO,GAAG,EACH4M,eAAe,EACfC,sBAAsB,EACtBjJ,QAAQ,EACR4K,gBAAgB,CACjB,CAAA;AACH,WAAC,CAAC,CAAA;AACH,SAAA;AACD,QAAA,OAAOJ,cAAc,CAAA;AACtB,OAAA;AACD,IAAA,KAAK,OAAO;AAAE,MAAA;AACZ;AACA,QAAA,IAAInR,KAAK,CAACC,OAAO,CAACyO,QAAQ,CAAC,EAAE;UAC3BA,QAAQ,GAAGA,QAAQ,CAAChI,GAAG,CAAC,UAAC8H,IAAI,EAAEK,GAAG,EAAI;YACpC,IAAM4C,UAAU,GAAMjC,0BAA0B,CAAIrP,MAAM,EAAEoP,uBAAuB,CAACmC,QAAQ,EAAE7C,GAAG,CAAC,CAAA;AAClG,YAAA,OAAOuB,eAAe,CAAUnK,SAAS,EAAEwL,UAAU,EAAE;AACrDpM,cAAAA,UAAU,EAAVA,UAAU;AACVuL,cAAAA,YAAY,EAAZA,YAAY;AACZb,cAAAA,qCAAqC,EAArCA,qCAAqC;AACrCS,cAAAA,cAAc,EAAEhC,IAAAA;AACjB,aAAA,CAAC,CAAA;AACJ,WAAC,CAAQ,CAAA;AACV,SAAA;AAED;AACA,QAAA,IAAIxO,KAAK,CAACC,OAAO,CAACkI,WAAW,CAAC,EAAE;AAC9B,UAAA,IAAMsJ,UAAU,GAAMjC,0BAA0B,CAAIrP,MAAM,CAAC,CAAA;UAC3DuO,QAAQ,GAAGvG,WAAW,CAACzB,GAAG,CAAC,UAAC8H,IAAO,EAAEK,GAAW,EAAI;AAClD,YAAA,OAAOuB,eAAe,CAAUnK,SAAS,EAAEwL,UAAU,EAAE;AACrDpM,cAAAA,UAAU,EAAVA,UAAU;AACVuL,cAAAA,YAAY,EAAZA,YAAY;AACZb,cAAAA,qCAAqC,EAArCA,qCAAqC;AACrC5H,cAAAA,WAAW,EAAEqG,IAAI;AACjBgC,cAAAA,cAAc,EAAE5K,GAAG,CAAC8I,QAAQ,EAAE,CAACG,GAAG,CAAC,CAAA;AACpC,aAAA,CAAC,CAAA;AACJ,WAAC,CAAQ,CAAA;AACV,SAAA;QAED,IAAM8C,qBAAqB,GAAG,CAAA5B,qCAAqC,KAAA,IAAA,IAArCA,qCAAqC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArCA,qCAAqC,CAAE6B,aAAa,MAAK,cAAc,CAAA;AACrG,QAAA,IAAID,qBAAqB,IAAI,CAAChL,QAAQ,EAAE;AACtC;AACA;AACA,UAAA,OAAO+H,QAAQ,GAAGA,QAAQ,GAAGjO,SAAS,CAAA;AACvC,SAAA;AAED,QAAA,IAAMoR,cAAc,GAAG7R,KAAK,CAACC,OAAO,CAACyO,QAAQ,CAAC,GAAGA,QAAQ,CAAC5K,MAAM,GAAG,CAAC,CAAA;AACpE,QAAA,IACE,CAAC3D,MAAM,CAAC2R,QAAQ,IAChBzC,aAAa,CAAUpJ,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,CAAC,IACrDlF,MAAM,CAAC2R,QAAQ,IAAID,cAAc,EACjC;AACA,UAAA,OAAOnD,QAAQ,GAAGA,QAAQ,GAAG,EAAE,CAAA;AAChC,SAAA;AAED,QAAA,IAAMqD,cAAc,GAASrD,QAAQ,IAAI,EAAU,CAAA;QACnD,IAAMsD,YAAY,GAAMxC,0BAA0B,CAAIrP,MAAM,EAAEoP,uBAAuB,CAAC0C,MAAM,CAAC,CAAA;QAC7F,IAAMC,aAAa,GAAGF,YAAY,CAAQ,SAAA,CAAA,CAAA;AAE1C;AACA,QAAA,IAAMG,aAAa,GAAQ,IAAInS,KAAK,CAACG,MAAM,CAAC2R,QAAQ,GAAGD,cAAc,CAAC,CAACO,IAAI,CACzEhC,eAAe,CAAYnK,SAAS,EAAE+L,YAAY,EAAE;AAClDxB,UAAAA,cAAc,EAAE0B,aAAa;AAC7B7M,UAAAA,UAAU,EAAVA,UAAU;AACVuL,UAAAA,YAAY,EAAZA,YAAY;AACZb,UAAAA,qCAAqC,EAArCA,qCAAAA;AACD,SAAA,CAAC,CACI,CAAA;AACR;AACA,QAAA,OAAOgC,cAAc,CAAC/I,MAAM,CAACmJ,aAAa,CAAC,CAAA;AAC5C,OAAA;AACF,GAAA;AAED,EAAA,OAAOzD,QAAQ,CAAA;AACjB,CAAA;AAEA;;;;;;;;;;;;AAYG;AACW,SAAU2D,mBAAmBA,CAKzCpM,SAAiC,EACjCqE,SAAY,EACZ9G,QAAY,EACZ6B,UAAc,EACduK,sBAA4D,EAC5DG,qCAA6E,EAAA;AAAA,EAAA,IAD7EH,sBAA4D,KAAA,KAAA,CAAA,EAAA;AAA5DA,IAAAA,sBAA4D,GAAA,KAAK,CAAA;AAAA,GAAA;AAGjE,EAAA,IAAI,CAAChQ,QAAQ,CAAC0K,SAAS,CAAC,EAAE;AACxB,IAAA,MAAM,IAAI7E,KAAK,CAAC,kBAAkB,GAAG6E,SAAS,CAAC,CAAA;AAChD,GAAA;EACD,IAAMnK,MAAM,GAAG+H,cAAc,CAAUjC,SAAS,EAAEqE,SAAS,EAAEjF,UAAU,EAAE7B,QAAQ,CAAC,CAAA;AAClF,EAAA,IAAMkL,QAAQ,GAAG0B,eAAe,CAAUnK,SAAS,EAAE9F,MAAM,EAAE;AAC3DkF,IAAAA,UAAU,EAAVA,UAAU;AACVuK,IAAAA,sBAAsB,EAAtBA,sBAAsB;AACtBG,IAAAA,qCAAqC,EAArCA,qCAAqC;AACrC5H,IAAAA,WAAW,EAAE3E,QAAAA;AACd,GAAA,CAAC,CAAA;AACF,EAAA,IAAIA,QAAQ,KAAK/C,SAAS,IAAI+C,QAAQ,KAAK,IAAI,IAAK,OAAOA,QAAQ,KAAK,QAAQ,IAAI1C,KAAK,CAAC0C,QAAQ,CAAE,EAAE;AACpG;AACA,IAAA,OAAOkL,QAAQ,CAAA;AAChB,GAAA;AACD,EAAA,IAAI9O,QAAQ,CAAC4D,QAAQ,CAAC,EAAE;AACtB,IAAA,OAAOiL,yBAAyB,CAAIC,QAAa,EAAElL,QAAQ,CAAC,CAAA;AAC7D,GAAA;AACD,EAAA,IAAIxD,KAAK,CAACC,OAAO,CAACuD,QAAQ,CAAC,EAAE;AAC3B,IAAA,OAAOiL,yBAAyB,CAAMC,QAAe,EAAElL,QAAQ,CAAC,CAAA;AACjE,GAAA;AACD,EAAA,OAAOA,QAAQ,CAAA;AACjB;;ACpaA;;;;AAIG;AACW,SAAU8O,cAAcA,CAIpC5P,UAAgC;AAAA,EAAA,IAAhCA;IAAAA,WAA8B,EAAE,CAAA;AAAA,GAAA;AAChC,EAAA;AACE;AACA;AACA,IAAA,QAAQ,IAAID,YAAY,CAAUC,QAAQ,CAAC,IAAID,YAAY,CAAUC,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,QAAA;AAAQ,IAAA;AAEzG;;ACdA;;;;;;;AAOG;AACqB,SAAA6P,YAAYA,CAClCtM,SAAiC,EACjC9F,MAAS,EACTuC,QAAA,EACA2C,UAAc,EAAA;AAAA,EAAA,IADd3C,QAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,QAAA,GAA8B,EAAE,CAAA;AAAA,GAAA;AAGhC,EAAA,IAAIA,QAAQ,CAACJ,aAAa,CAAC,KAAK,OAAO,EAAE;AACvC,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;EACD,IAAInC,MAAM,CAACmO,KAAK,EAAE;IAChB,IAAMkE,WAAW,GAAGtK,cAAc,CAAUjC,SAAS,EAAE9F,MAAM,CAACmO,KAAU,EAAEjJ,UAAU,CAAC,CAAA;IACrF,OAAOmN,WAAW,CAAChL,IAAI,KAAK,QAAQ,IAAIgL,WAAW,CAACC,MAAM,KAAK,UAAU,CAAA;AAC1E,GAAA;AACD,EAAA,OAAO,KAAK,CAAA;AACd;;ACXA;;;;;;;;;AASG;AACqB,SAAAC,eAAeA,CAKrCzM,SAAiC,EACjC9F,MAAS,EACTuC,QAA8B,EAC9B2C,UAAc,EACd1C,aAAqC,EAAA;AAAA,EAAA,IAFrCD,QAA8B,KAAA,KAAA,CAAA,EAAA;IAA9BA,QAA8B,GAAA,EAAE,CAAA;AAAA,GAAA;AAIhC,EAAA,IAAMiQ,SAAS,GAAGlQ,YAAY,CAAUC,QAAQ,EAAEC,aAAa,CAAC,CAAA;AAChE,EAAA,IAAAiQ,gBAAA,GAAyBD,SAAS,CAA1BE,KAAK;AAALA,IAAAA,KAAK,GAAAD,gBAAA,KAAG,KAAA,CAAA,GAAA,IAAI,GAAAA,gBAAA,CAAA;AACpB,EAAA,IAAIE,YAAY,GAAG,CAAC,CAACD,KAAK,CAAA;AAC1B,EAAA,IAAME,UAAU,GAAGxL,aAAa,CAAIpH,MAAM,CAAC,CAAA;EAE3C,IAAI4S,UAAU,KAAK,OAAO,EAAE;IAC1BD,YAAY,GACVzD,aAAa,CAAUpJ,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,CAAC,IACrDkN,YAAY,CAAUtM,SAAS,EAAE9F,MAAM,EAAEuC,QAAQ,EAAE2C,UAAU,CAAC,IAC9DiN,cAAc,CAAC5P,QAAQ,CAAC,CAAA;AAC3B,GAAA;EAED,IAAIqQ,UAAU,KAAK,QAAQ,EAAE;AAC3BD,IAAAA,YAAY,GAAG,KAAK,CAAA;AACrB,GAAA;EACD,IAAIC,UAAU,KAAK,SAAS,IAAI,CAACrQ,QAAQ,CAACJ,aAAa,CAAC,EAAE;AACxDwQ,IAAAA,YAAY,GAAG,KAAK,CAAA;AACrB,GAAA;AACD,EAAA,IAAIpQ,QAAQ,CAACL,YAAY,CAAC,EAAE;AAC1ByQ,IAAAA,YAAY,GAAG,KAAK,CAAA;AACrB,GAAA;AACD,EAAA,OAAOA,YAAY,CAAA;AACrB;;ACrDA;;;;;;;;;;;AAWG;AACqB,SAAAE,mBAAmBA,CAKzC/M,SAAiC,EACjCgN,cAAiC,EACjCC,qBAAsC,EAAA;EAEtC,IAAI,CAACA,qBAAqB,EAAE;AAC1B,IAAA,OAAOD,cAAc,CAAA;AACtB,GAAA;AACD,EAAA,IAAgBE,SAAS,GAAkCF,cAAc,CAAjEG,MAAM;IAA0BC,cAAc,GAAKJ,cAAc,CAA9CK,WAAW,CAAA;AACtC,EAAA,IAAIF,MAAM,GAAGnN,SAAS,CAACsN,WAAW,CAACL,qBAAqB,CAAC,CAAA;EACzD,IAAII,WAAW,GAAGJ,qBAAqB,CAAA;AACvC,EAAA,IAAI,CAAC/C,OAAO,CAACkD,cAAc,CAAC,EAAE;IAC5BC,WAAW,GAAGxE,YAAY,CAACuE,cAAc,EAAEH,qBAAqB,EAAE,IAAI,CAAmB,CAAA;IACzFE,MAAM,GAAG,GAAApK,MAAA,CAAImK,SAAS,CAAEnK,CAAAA,MAAM,CAACoK,MAAM,CAAC,CAAA;AACvC,GAAA;EACD,OAAO;AAAEE,IAAAA,WAAW,EAAXA,WAAW;AAAEF,IAAAA,MAAM,EAANA,MAAAA;GAAQ,CAAA;AAChC;;AC9BA,IAAMI,QAAQ,gBAAGC,MAAM,CAAC,UAAU,CAAC,CAAA;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CG;AACqB,SAAAC,wBAAwBA,CAI9CzN,SAAiC,EAAEZ,UAAa,EAAEmI,SAAa,EAAEmG,SAAa,EAAEC,MAAc;AAAA,EAAA,IAAdA;IAAAA,OAAY,EAAE,CAAA;AAAA,GAAA;AAC9F;AACA,EAAA,IAAIC,WAAW,CAAA;AACf;AACA,EAAA,IAAIxN,GAAG,CAACmH,SAAS,EAAEzL,cAAc,CAAC,EAAE;AAClC;IACA,IAAM+R,mBAAmB,GAAsB,EAAE,CAAA;AACjD,IAAA,IAAIzN,GAAG,CAACsN,SAAS,EAAE5R,cAAc,CAAC,EAAE;MAClC,IAAM0F,UAAU,GAAG7B,GAAG,CAAC+N,SAAS,EAAE5R,cAAc,EAAE,EAAE,CAAC,CAAA;MACrDa,MAAM,CAACC,IAAI,CAAC4E,UAAU,CAAC,CAACkC,OAAO,CAAC,UAAC5G,GAAG,EAAI;AACtC,QAAA,IAAIsD,GAAG,CAACuN,IAAI,EAAE7Q,GAAG,CAAC,EAAE;AAClB+Q,UAAAA,mBAAmB,CAAC/Q,GAAG,CAAC,GAAGtC,SAAS,CAAA;AACrC,SAAA;AACH,OAAC,CAAC,CAAA;AACH,KAAA;AACD,IAAA,IAAMoC,IAAI,GAAaD,MAAM,CAACC,IAAI,CAAC+C,GAAG,CAAC4H,SAAS,EAAEzL,cAAc,EAAE,EAAE,CAAC,CAAC,CAAA;AACtE;IACA,IAAMgS,UAAU,GAAsB,EAAE,CAAA;AACxClR,IAAAA,IAAI,CAAC8G,OAAO,CAAC,UAAC5G,GAAG,EAAI;AACnB,MAAA,IAAMwK,SAAS,GAAG3H,GAAG,CAACgO,IAAI,EAAE7Q,GAAG,CAAC,CAAA;AAChC,MAAA,IAAIiR,cAAc,GAAMpO,GAAG,CAAC+N,SAAS,EAAE,CAAC5R,cAAc,EAAEgB,GAAG,CAAC,EAAE,EAAE,CAAC,CAAA;AACjE,MAAA,IAAIkR,cAAc,GAAMrO,GAAG,CAAC4H,SAAS,EAAE,CAACzL,cAAc,EAAEgB,GAAG,CAAC,EAAE,EAAE,CAAC,CAAA;AACjE;AACA,MAAA,IAAIsD,GAAG,CAAC2N,cAAc,EAAE9R,OAAO,CAAC,EAAE;QAChC8R,cAAc,GAAG9L,cAAc,CAAUjC,SAAS,EAAE+N,cAAc,EAAE3O,UAAU,EAAEkI,SAAS,CAAC,CAAA;AAC3F,OAAA;AACD,MAAA,IAAIlH,GAAG,CAAC4N,cAAc,EAAE/R,OAAO,CAAC,EAAE;QAChC+R,cAAc,GAAG/L,cAAc,CAAUjC,SAAS,EAAEgO,cAAc,EAAE5O,UAAU,EAAEkI,SAAS,CAAC,CAAA;AAC3F,OAAA;AACD;AACA,MAAA,IAAM2G,mBAAmB,GAAGtO,GAAG,CAACoO,cAAc,EAAE,MAAM,CAAC,CAAA;AACvD,MAAA,IAAMG,mBAAmB,GAAGvO,GAAG,CAACqO,cAAc,EAAE,MAAM,CAAC,CAAA;AACvD;AACA,MAAA,IAAI,CAACC,mBAAmB,IAAIA,mBAAmB,KAAKC,mBAAmB,EAAE;AACvE,QAAA,IAAI9N,GAAG,CAACyN,mBAAmB,EAAE/Q,GAAG,CAAC,EAAE;AACjC;UACA,OAAO+Q,mBAAmB,CAAC/Q,GAAG,CAAC,CAAA;AAChC,SAAA;AACD;AACA,QAAA,IAAIoR,mBAAmB,KAAK,QAAQ,IAAKA,mBAAmB,KAAK,OAAO,IAAInU,KAAK,CAACC,OAAO,CAACsN,SAAS,CAAE,EAAE;AACrG;AACA,UAAA,IAAM6G,QAAQ,GAAGV,wBAAwB,CACvCzN,SAAS,EACTZ,UAAU,EACV4O,cAAc,EACdD,cAAc,EACdzG,SAAS,CACV,CAAA;AACD,UAAA,IAAI6G,QAAQ,KAAK3T,SAAS,IAAI0T,mBAAmB,KAAK,OAAO,EAAE;AAC7D;AACAJ,YAAAA,UAAU,CAAChR,GAAG,CAAC,GAAGqR,QAAQ,CAAA;AAC3B,WAAA;AACF,SAAA,MAAM;AACL;AACA;AACA;UACA,IAAMC,gBAAgB,GAAGzO,GAAG,CAACqO,cAAc,EAAE,SAAS,EAAET,QAAQ,CAAC,CAAA;UACjE,IAAMc,gBAAgB,GAAG1O,GAAG,CAACoO,cAAc,EAAE,SAAS,EAAER,QAAQ,CAAC,CAAA;AACjE,UAAA,IAAIa,gBAAgB,KAAKb,QAAQ,IAAIa,gBAAgB,KAAK9G,SAAS,EAAE;YACnE,IAAI+G,gBAAgB,KAAK/G,SAAS,EAAE;AAClC;AACAuG,cAAAA,mBAAmB,CAAC/Q,GAAG,CAAC,GAAGsR,gBAAgB,CAAA;aAC5C,MAAM,IAAIzO,GAAG,CAACqO,cAAc,EAAE,UAAU,CAAC,KAAK,IAAI,EAAE;AACnD;AACAH,cAAAA,mBAAmB,CAAC/Q,GAAG,CAAC,GAAGtC,SAAS,CAAA;AACrC,aAAA;AACF,WAAA;UAED,IAAM8T,cAAc,GAAG3O,GAAG,CAACqO,cAAc,EAAE,OAAO,EAAET,QAAQ,CAAC,CAAA;UAC7D,IAAMgB,cAAc,GAAG5O,GAAG,CAACoO,cAAc,EAAE,OAAO,EAAER,QAAQ,CAAC,CAAA;AAC7D,UAAA,IAAIe,cAAc,KAAKf,QAAQ,IAAIe,cAAc,KAAKhH,SAAS,EAAE;AAC/D;YACAuG,mBAAmB,CAAC/Q,GAAG,CAAC,GAAGyR,cAAc,KAAKjH,SAAS,GAAGgH,cAAc,GAAG9T,SAAS,CAAA;AACrF,WAAA;AACF,SAAA;AACF,OAAA;AACH,KAAC,CAAC,CAAA;IAEFoT,WAAW,GAAAxQ,QAAA,CACNuQ,EAAAA,EAAAA,IAAI,EACJE,mBAAmB,EACnBC,UAAU,CACd,CAAA;AACD;GACD,MAAM,IAAInO,GAAG,CAAC+N,SAAS,EAAE,MAAM,CAAC,KAAK,OAAO,IAAI/N,GAAG,CAAC4H,SAAS,EAAE,MAAM,CAAC,KAAK,OAAO,IAAIxN,KAAK,CAACC,OAAO,CAAC2T,IAAI,CAAC,EAAE;AAC1G,IAAA,IAAIa,cAAc,GAAG7O,GAAG,CAAC+N,SAAS,EAAE,OAAO,CAAC,CAAA;AAC5C,IAAA,IAAIe,cAAc,GAAG9O,GAAG,CAAC4H,SAAS,EAAE,OAAO,CAAC,CAAA;AAC5C;AACA;IACA,IACE,OAAOiH,cAAc,KAAK,QAAQ,IAClC,OAAOC,cAAc,KAAK,QAAQ,IAClC,CAAC1U,KAAK,CAACC,OAAO,CAACwU,cAAc,CAAC,IAC9B,CAACzU,KAAK,CAACC,OAAO,CAACyU,cAAc,CAAC,EAC9B;AACA,MAAA,IAAIrO,GAAG,CAACoO,cAAc,EAAEvS,OAAO,CAAC,EAAE;QAChCuS,cAAc,GAAGvM,cAAc,CAAUjC,SAAS,EAAEwO,cAAmB,EAAEpP,UAAU,EAAEuO,IAAS,CAAC,CAAA;AAChG,OAAA;AACD,MAAA,IAAIvN,GAAG,CAACqO,cAAc,EAAExS,OAAO,CAAC,EAAE;QAChCwS,cAAc,GAAGxM,cAAc,CAAUjC,SAAS,EAAEyO,cAAmB,EAAErP,UAAU,EAAEuO,IAAS,CAAC,CAAA;AAChG,OAAA;AACD;AACA,MAAA,IAAMe,aAAa,GAAG/O,GAAG,CAAC6O,cAAc,EAAE,MAAM,CAAC,CAAA;AACjD,MAAA,IAAMG,aAAa,GAAGhP,GAAG,CAAC8O,cAAc,EAAE,MAAM,CAAC,CAAA;AACjD;AACA,MAAA,IAAI,CAACC,aAAa,IAAIA,aAAa,KAAKC,aAAa,EAAE;QACrD,IAAMC,QAAQ,GAAGjP,GAAG,CAAC4H,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAA;QAC/C,IAAIoH,aAAa,KAAK,QAAQ,EAAE;UAC9Bf,WAAW,GAAGD,IAAI,CAAC3Q,MAAM,CAAC,UAAC6R,QAAQ,EAAEC,MAAM,EAAI;AAC7C,YAAA,IAAMC,SAAS,GAAGtB,wBAAwB,CACxCzN,SAAS,EACTZ,UAAU,EACVqP,cAAmB,EACnBD,cAAmB,EACnBM,MAAM,CACP,CAAA;AACD,YAAA,IAAIC,SAAS,KAAKvU,SAAS,KAAKoU,QAAQ,GAAG,CAAC,IAAIC,QAAQ,CAAChR,MAAM,GAAG+Q,QAAQ,CAAC,EAAE;AAC3EC,cAAAA,QAAQ,CAAC1Q,IAAI,CAAC4Q,SAAS,CAAC,CAAA;AACzB,aAAA;AACD,YAAA,OAAOF,QAAQ,CAAA;WAChB,EAAE,EAAE,CAAC,CAAA;AACP,SAAA,MAAM;UACLjB,WAAW,GAAGgB,QAAQ,GAAG,CAAC,IAAIjB,IAAI,CAAC9P,MAAM,GAAG+Q,QAAQ,GAAGjB,IAAI,CAAC5M,KAAK,CAAC,CAAC,EAAE6N,QAAQ,CAAC,GAAGjB,IAAI,CAAA;AACtF,SAAA;AACF,OAAA;AACF,KAAA,MAAM,IACL,OAAOa,cAAc,KAAK,SAAS,IACnC,OAAOC,cAAc,KAAK,SAAS,IACnCD,cAAc,KAAKC,cAAc,EACjC;AACA;AACAb,MAAAA,WAAW,GAAGD,IAAI,CAAA;AACnB,KAAA;AACD;AACD,GAAA;;AACD,EAAA,OAAOC,WAAgB,CAAA;AACzB;;AC3LA;;;;;;;;;;;;AAYG;AACH,SAASoB,kBAAkBA,CACzBhP,SAAiC,EACjC9F,MAAS,EACT+U,QAAgB,EAChBC,WAAmB,EACnBC,EAAkB,EAClB/P,UAAc,EACd7B,QAAY,EACZoN,cAAsB;AAAA,EAAA,IAAtBA;AAAAA,IAAAA,eAAoB,EAAE,CAAA;AAAA,GAAA;EAEtB,IAAI1O,OAAO,IAAI/B,MAAM,IAAImB,gBAAgB,IAAInB,MAAM,IAAIc,UAAU,IAAId,MAAM,EAAE;IAC3E,IAAMkV,OAAO,GAAGnN,cAAc,CAAUjC,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAE7B,QAAQ,CAAC,CAAA;AAChF,IAAA,IAAM8R,eAAe,GAAG1E,YAAY,CAAC2E,SAAS,CAAC,UAAC/G,IAAI,EAAA;AAAA,MAAA,OAAKgH,OAAO,CAAChH,IAAI,EAAE6G,OAAO,CAAC,CAAA;KAAC,CAAA,CAAA;AAChF,IAAA,IAAIC,eAAe,KAAK,CAAC,CAAC,EAAE;MAC1B,OAAOL,kBAAkB,CACvBhP,SAAS,EACToP,OAAO,EACPH,QAAQ,EACRC,WAAW,EACXC,EAAE,EACF/P,UAAU,EACV7B,QAAQ,EACRoN,YAAY,CAAC5H,MAAM,CAACqM,OAAO,CAAC,CAC7B,CAAA;AACF,KAAA;AACF,GAAA;AACD,EAAA,IAAI1T,SAAS,IAAIxB,MAAM,IAAI,CAACyF,GAAG,CAACzF,MAAM,EAAE,CAACwB,SAAS,EAAEO,OAAO,CAAC,CAAC,EAAE;IAC7D,OAAO+S,kBAAkB,CACvBhP,SAAS,EACTL,GAAG,CAACzF,MAAM,EAAEwB,SAAS,CAAM,EAC3BuT,QAAQ,EACRC,WAAW,EACXC,EAAE,EACF/P,UAAU,EACV7B,QAAQ,EACRoN,YAAY,CACb,CAAA;AACF,GAAA;AACD,EAAA,IAAM1D,GAAG,GAAGkI,EAAE,IAAIF,QAAQ,CAAA;AAC1B,EAAA,IAAMO,QAAQ,GAAa;AAAEvI,IAAAA,GAAG,EAAHA,GAAAA;GAAoB,CAAA;EACjD,IAAI3F,aAAa,CAAIpH,MAAM,CAAC,KAAK,QAAQ,IAAI4B,cAAc,IAAI5B,MAAM,EAAE;AACrE,IAAA,KAAK,IAAMuV,IAAI,IAAIvV,MAAM,CAACsH,UAAU,EAAE;MACpC,IAAMkO,KAAK,GAAG/P,GAAG,CAACzF,MAAM,EAAE,CAAC4B,cAAc,EAAE2T,IAAI,CAAC,CAAC,CAAA;MACjD,IAAME,OAAO,GAAGH,QAAQ,CAAChU,MAAM,CAAC,GAAG0T,WAAW,GAAGO,IAAI,CAAA;MACrDD,QAAQ,CAACC,IAAI,CAAC,GAAGT,kBAAkB,CACjChP,SAAS,EACTrG,QAAQ,CAAC+V,KAAK,CAAC,GAAGA,KAAK,GAAG,EAAE,EAC5BT,QAAQ,EACRC,WAAW,EACXS,OAAO,EACPvQ,UAAU;AACV;AACA;MACAO,GAAG,CAACpC,QAAQ,EAAE,CAACkS,IAAI,CAAC,CAAC,EACrB9E,YAAY,CACb,CAAA;AACF,KAAA;AACF,GAAA;AACD,EAAA,OAAO6E,QAAuB,CAAA;AAChC,CAAA;AAEA;;;;;;;;;;AAUG;AACqB,SAAAI,UAAUA,CAChC5P,SAAiC,EACjC9F,MAAS,EACTiV,EAAkB,EAClB/P,UAAc,EACd7B,QAAY,EACZ0R,QAAQ,EACRC,WAAW,EAAM;AAAA,EAAA,IADjBD,QAAQ,KAAA,KAAA,CAAA,EAAA;AAARA,IAAAA,QAAQ,GAAG,MAAM,CAAA;AAAA,GAAA;AAAA,EAAA,IACjBC,WAAW,KAAA,KAAA,CAAA,EAAA;AAAXA,IAAAA,WAAW,GAAG,GAAG,CAAA;AAAA,GAAA;AAEjB,EAAA,OAAOF,kBAAkB,CAAUhP,SAAS,EAAE9F,MAAM,EAAE+U,QAAQ,EAAEC,WAAW,EAAEC,EAAE,EAAE/P,UAAU,EAAE7B,QAAQ,CAAC,CAAA;AACxG;;ACnFA;;;;;;;;;;AAUG;AACH,SAASsS,oBAAoBA,CAC3B7P,SAAiC,EACjC9F,MAAS,EACTuV,IAAY,EACZrQ,UAAc,EACd7B,QAAY,EACZoN,cAAsB;AAAA,EAAA,IAAAmF,WAAA,CAAA;AAAA,EAAA,IAAtBnF;AAAAA,IAAAA,eAAoB,EAAE,CAAA;AAAA,GAAA;EAEtB,IAAI1O,OAAO,IAAI/B,MAAM,IAAImB,gBAAgB,IAAInB,MAAM,IAAIc,UAAU,IAAId,MAAM,EAAE;IAC3E,IAAMkV,OAAO,GAAGnN,cAAc,CAAUjC,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAE7B,QAAQ,CAAC,CAAA;AAChF,IAAA,IAAM8R,eAAe,GAAG1E,YAAY,CAAC2E,SAAS,CAAC,UAAC/G,IAAI,EAAA;AAAA,MAAA,OAAKgH,OAAO,CAAChH,IAAI,EAAE6G,OAAO,CAAC,CAAA;KAAC,CAAA,CAAA;AAChF,IAAA,IAAIC,eAAe,KAAK,CAAC,CAAC,EAAE;AAC1B,MAAA,OAAOQ,oBAAoB,CACzB7P,SAAS,EACToP,OAAO,EACPK,IAAI,EACJrQ,UAAU,EACV7B,QAAQ,EACRoN,YAAY,CAAC5H,MAAM,CAACqM,OAAO,CAAC,CAC7B,CAAA;AACF,KAAA;AACF,GAAA;AAED,EAAA,IAAIW,UAAU,IAAAD,WAAA,OAAAA,WAAA,CACXlU,QAAQ,CAAG6T,GAAAA,IAAI,CAACO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAAF,WAAA,CACtB,CAAA;AAEf,EAAA,IAAIjU,UAAU,IAAI3B,MAAM,IAAIe,UAAU,IAAIf,MAAM,EAAE;AAChD,IAAA,IAAM+V,KAAK,GAAQpU,UAAU,IAAI3B,MAAM,GAAIA,MAAM,CAACgL,KAAa,GAAIhL,MAAM,CAACsG,KAAa,CAAA;AACvF,IAAA,IAAMH,aAAa,GAAGa,+BAA+B,CAAIhH,MAAM,CAAC,CAAA;AAChE,IAAA,IAAM2N,KAAK,GAAGL,wBAAwB,CAAUxH,SAAS,EAAEZ,UAAW,EAAE7B,QAAQ,EAAE0S,KAAK,EAAE,CAAC,EAAE5P,aAAa,CAAC,CAAA;AAC1G,IAAA,IAAM+O,QAAO,GAAMa,KAAM,CAACpI,KAAK,CAAM,CAAA;AACrCkI,IAAAA,UAAU,GAAA3S,QAAA,CAAA,EAAA,EACL2S,UAAU,EACVF,oBAAoB,CAAU7P,SAAS,EAAEoP,QAAO,EAAEK,IAAI,EAAErQ,UAAU,EAAE7B,QAAQ,EAAEoN,YAAY,CAAC,CAC/F,CAAA;AACF,GAAA;EAED,IAAI5P,yBAAyB,IAAIb,MAAM,IAAIA,MAAM,CAACa,yBAAyB,CAAC,KAAK,KAAK,EAAE;AACtFwJ,IAAAA,GAAG,CAACwL,UAAU,EAAE7T,8BAA8B,EAAE,IAAI,CAAC,CAAA;AACtD,GAAA;EAED,IAAIR,SAAS,IAAIxB,MAAM,IAAIH,KAAK,CAACC,OAAO,CAACuD,QAAQ,CAAC,EAAE;AAClDA,IAAAA,QAAQ,CAACmG,OAAO,CAAC,UAACF,OAAO,EAAEtD,CAAS,EAAI;MACtC6P,UAAU,CAAC7P,CAAC,CAAC,GAAG2P,oBAAoB,CAClC7P,SAAS,EACT9F,MAAM,CAACmO,KAAU,EACdoH,IAAI,SAAIvP,CAAC,EACZd,UAAU,EACVoE,OAAO,EACPmH,YAAY,CACb,CAAA;AACH,KAAC,CAAC,CAAA;AACH,GAAA,MAAM,IAAI7O,cAAc,IAAI5B,MAAM,EAAE;AACnC,IAAA,KAAK,IAAMgW,QAAQ,IAAIhW,MAAM,CAACsH,UAAU,EAAE;MACxC,IAAMkO,KAAK,GAAG/P,GAAG,CAACzF,MAAM,EAAE,CAAC4B,cAAc,EAAEoU,QAAQ,CAAC,CAAC,CAAA;AACrDH,MAAAA,UAAU,CAACG,QAAQ,CAAC,GAAGL,oBAAoB,CACzC7P,SAAS,EACT0P,KAAK,EACFD,IAAI,GAAIS,GAAAA,GAAAA,QAAQ,EACnB9Q,UAAU;AACV;AACA;MACAO,GAAG,CAACpC,QAAQ,EAAE,CAAC2S,QAAQ,CAAC,CAAC,EACzBvF,YAAY,CACb,CAAA;AACF,KAAA;AACF,GAAA;AACD,EAAA,OAAOoF,UAA2B,CAAA;AACpC,CAAA;AAEA;;;;;;;;AAQG;AACqB,SAAAI,YAAYA,CAClCnQ,SAAiC,EACjC9F,MAAS,EACTuV,IAAI,EACJrQ,UAAc,EACd7B,QAAY,EAAA;AAAA,EAAA,IAFZkS,IAAI,KAAA,KAAA,CAAA,EAAA;AAAJA,IAAAA,IAAI,GAAG,EAAE,CAAA;AAAA,GAAA;EAIT,OAAOI,oBAAoB,CAAC7P,SAAS,EAAE9F,MAAM,EAAEuV,IAAI,EAAErQ,UAAU,EAAE7B,QAAQ,CAAC,CAAA;AAC5E;;ACzFA;;;;AAIG;AAJH,IAKM6S,WAAW,gBAAA,YAAA;AAOf;;;;;AAKG;AACH,EAAA,SAAAA,YACEpQ,SAAiC,EACjCZ,UAAa,EACb0K,qCAA4E,EAAA;AAAA,IAAA,IAAA,CAb9E1K,UAAU,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACVY,SAAS,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CACT8J,qCAAqC,GAAA,KAAA,CAAA,CAAA;IAanC,IAAI,CAAC1K,UAAU,GAAGA,UAAU,CAAA;IAC5B,IAAI,CAACY,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAAC8J,qCAAqC,GAAGA,qCAAqC,CAAA;AACpF,GAAA;AAEA;;;AAGG;AAHH,EAAA,IAAAuG,MAAA,GAAAD,WAAA,CAAAE,SAAA,CAAA;AAAAD,EAAAA,MAAA,CAIAE,YAAY,GAAZ,SAAAA,eAAY;IACV,OAAO,IAAI,CAACvQ,SAAS,CAAA;AACvB,GAAA;AAEA;;;;;;;;AAQG,MARH;EAAAqQ,MAAA,CASAG,qBAAqB,GAArB,SAAAA,qBAAAA,CACExQ,SAAiC,EACjCZ,UAAa,EACb0K,qCAAqC,EAAK;AAAA,IAAA,IAA1CA,qCAAqC,KAAA,KAAA,CAAA,EAAA;MAArCA,qCAAqC,GAAG,EAAE,CAAA;AAAA,KAAA;AAE1C,IAAA,IAAI,CAAC9J,SAAS,IAAI,CAACZ,UAAU,EAAE;AAC7B,MAAA,OAAO,KAAK,CAAA;AACb,KAAA;IACD,OACE,IAAI,CAACY,SAAS,KAAKA,SAAS,IAC5B,CAACxB,UAAU,CAAC,IAAI,CAACY,UAAU,EAAEA,UAAU,CAAC,IACxC,CAACZ,UAAU,CAAC,IAAI,CAACsL,qCAAqC,EAAEA,qCAAqC,CAAC,CAAA;AAElG,GAAA;AAEA;;;;;;;;;AASG,MATH;EAAAuG,MAAA,CAUAjE,mBAAmB,GAAnB,SAAAA,qBAAAA,CACElS,MAAS,EACTqD,QAAY,EACZoM,wBAAiE;AAAA,IAAA,IAAjEA;AAAAA,MAAAA,yBAA4D,KAAK,CAAA;AAAA,KAAA;AAEjE,IAAA,OAAOyC,mBAAmB,CACxB,IAAI,CAACpM,SAAS,EACd9F,MAAM,EACNqD,QAAQ,EACR,IAAI,CAAC6B,UAAU,EACfuK,sBAAsB,EACtB,IAAI,CAACG,qCAAqC,CAC3C,CAAA;AACH,GAAA;AAEA;;;;;;;AAOG,MAPH;EAAAuG,MAAA,CAQA5D,eAAe,GAAf,SAAAA,iBAAAA,CAAgBvS,MAAS,EAAEuC,QAA4B,EAAEC,aAAqC,EAAA;AAC5F,IAAA,OAAO+P,eAAe,CAAU,IAAI,CAACzM,SAAS,EAAE9F,MAAM,EAAEuC,QAAQ,EAAE,IAAI,CAAC2C,UAAU,EAAE1C,aAAa,CAAC,CAAA;AACnG,GAAA;AAEA;;;;;;;;;;;;AAYG,MAZH;AAAA2T,EAAAA,MAAA,CAaA7I,wBAAwB,GAAxB,SAAAA,0BACEjK,CAAAA,QAAuB,EACvBN,OAAY,EACZyK,cAAuB,EACvBzH,kBAA2B,EAAA;AAE3B,IAAA,OAAOuH,wBAAwB,CAC7B,IAAI,CAACxH,SAAS,EACd,IAAI,CAACZ,UAAU,EACf7B,QAAQ,EACRN,OAAO,EACPyK,cAAc,EACdzH,kBAAkB,CACnB,CAAA;AACH,GAAA;AAEA;;;;;;;;AAQG,MARH;EAAAoQ,MAAA,CASApP,sBAAsB,GAAtB,SAAAA,wBAAAA,CAAuB1D,QAAuB,EAAEN,OAAY,EAAEgD,kBAA2B,EAAA;AACvF,IAAA,OAAOgB,sBAAsB,CAAU,IAAI,CAACjB,SAAS,EAAEzC,QAAQ,EAAEN,OAAO,EAAE,IAAI,CAACmC,UAAU,EAAEa,kBAAkB,CAAC,CAAA;AAChH,GAAA;AAEA;;;;;;;;;AASG,MATH;EAAAoQ,MAAA,CAUAtQ,iBAAiB,GAAjB,SAAAA,mBAAAA,CAAkBxC,QAAuB,EAAEN,OAAY,EAAEgD,kBAA2B,EAAA;AAClF,IAAA,OAAOF,iBAAiB,CAAU,IAAI,CAACC,SAAS,EAAEzC,QAAQ,EAAEN,OAAO,EAAE,IAAI,CAACmC,UAAU,EAAEa,kBAAkB,CAAC,CAAA;AAC3G,GAAA;AAEA;;;;;AAKG,MALH;EAAAoQ,MAAA,CAMA/D,YAAY,GAAZ,SAAAA,eAAapS,MAAS,EAAEuC,QAA4B,EAAA;AAClD,IAAA,OAAO6P,YAAY,CAAU,IAAI,CAACtM,SAAS,EAAE9F,MAAM,EAAEuC,QAAQ,EAAE,IAAI,CAAC2C,UAAU,CAAC,CAAA;AACjF,GAAA;AAEA;;;;AAIG,MAJH;AAAAiR,EAAAA,MAAA,CAKAjH,aAAa,GAAb,SAAAA,eAAAA,CAAclP,MAAS,EAAA;IACrB,OAAOkP,aAAa,CAAU,IAAI,CAACpJ,SAAS,EAAE9F,MAAM,EAAE,IAAI,CAACkF,UAAU,CAAC,CAAA;AACxE,GAAA;AAEA;;;;AAIG,MAJH;AAAAiR,EAAAA,MAAA,CAKAnH,QAAQ,GAAR,SAAAA,UAAAA,CAAShP,MAAS,EAAA;IAChB,OAAOgP,QAAQ,CAAU,IAAI,CAAClJ,SAAS,EAAE9F,MAAM,EAAE,IAAI,CAACkF,UAAU,CAAC,CAAA;AACnE,GAAA;AAEA;;;;;;;;;;AAUG,MAVH;EAAAiR,MAAA,CAWAtD,mBAAmB,GAAnB,SAAAA,sBAAoBC,cAAiC,EAAEC,qBAAsC,EAAA;IAC3F,OAAOF,mBAAmB,CAAU,IAAI,CAAC/M,SAAS,EAAEgN,cAAc,EAAEC,qBAAqB,CAAC,CAAA;AAC5F,GAAA;AAEA;;;;;;;AAOG,MAPH;EAAAoD,MAAA,CAQApO,cAAc,GAAd,SAAAA,iBAAe/H,MAAS,EAAEgI,WAAe,EAAA;AACvC,IAAA,OAAOD,cAAc,CAAU,IAAI,CAACjC,SAAS,EAAE9F,MAAM,EAAE,IAAI,CAACkF,UAAU,EAAE8C,WAAW,CAAC,CAAA;AACtF,GAAA;AAEA;;;;;;;;;;AAUG,MAVH;EAAAmO,MAAA,CAWA5C,wBAAwB,GAAxB,SAAAA,0BAAAA,CAAyBlG,SAAa,EAAEmG,SAAa,EAAEC,IAAU,EAAA;AAC/D,IAAA,OAAOF,wBAAwB,CAAC,IAAI,CAACzN,SAAS,EAAE,IAAI,CAACZ,UAAU,EAAEmI,SAAS,EAAEmG,SAAS,EAAEC,IAAI,CAAC,CAAA;AAC9F,GAAA;AAEA;;;;;;;;AAQG,MARH;AAAA0C,EAAAA,MAAA,CASAT,UAAU,GAAV,SAAAA,aAAW1V,MAAS,EAAEiV,EAAkB,EAAE5R,QAAY,EAAE0R,QAAQ,EAAWC,WAAW,EAAM;AAAA,IAAA,IAApCD,QAAQ,KAAA,KAAA,CAAA,EAAA;AAARA,MAAAA,QAAQ,GAAG,MAAM,CAAA;AAAA,KAAA;AAAA,IAAA,IAAEC,WAAW,KAAA,KAAA,CAAA,EAAA;AAAXA,MAAAA,WAAW,GAAG,GAAG,CAAA;AAAA,KAAA;AAC1F,IAAA,OAAOU,UAAU,CAAU,IAAI,CAAC5P,SAAS,EAAE9F,MAAM,EAAEiV,EAAE,EAAE,IAAI,CAAC/P,UAAU,EAAE7B,QAAQ,EAAE0R,QAAQ,EAAEC,WAAW,CAAC,CAAA;AAC1G,GAAA;AAEA;;;;;;AAMG,MANH;EAAAmB,MAAA,CAOAF,YAAY,GAAZ,SAAAA,cAAAA,CAAajW,MAAS,EAAEuV,IAAa,EAAElS,QAAY,EAAA;AACjD,IAAA,OAAO4S,YAAY,CAAU,IAAI,CAACnQ,SAAS,EAAE9F,MAAM,EAAEuV,IAAI,EAAE,IAAI,CAACrQ,UAAU,EAAE7B,QAAQ,CAAC,CAAA;GACtF,CAAA;AAAA,EAAA,OAAA6S,WAAA,CAAA;AAAA,CAAA,EAAA,CAAA;AAGH;;;;;;;AAOG;AACW,SAAUK,iBAAiBA,CAKvCzQ,SAAiC,EACjCZ,UAAa,EACb0K,qCAAqC,EAAK;AAAA,EAAA,IAA1CA,qCAAqC,KAAA,KAAA,CAAA,EAAA;IAArCA,qCAAqC,GAAG,EAAE,CAAA;AAAA,GAAA;EAE1C,OAAO,IAAIsG,WAAW,CAAUpQ,SAAS,EAAEZ,UAAU,EAAE0K,qCAAqC,CAAC,CAAA;AAC/F;;ACzSA;;;;;AAKG;AACqB,SAAA4G,aAAaA,CAACC,OAAe,EAAA;AACnD;AACA,EAAA,IAAMC,QAAQ,GAAaD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAAA;AAC7C;EACA,IAAMC,MAAM,GAAaF,QAAQ,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAA;AAC/C;AACA,EAAA,IAAMtP,IAAI,GAAWuP,MAAM,CAAC,CAAC,CAAC,CAACd,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAA;AACnD;EACA,IAAMxO,UAAU,GAAGsP,MAAM,CAACjU,MAAM,CAAC,UAACkU,KAAK,EAAI;IACzC,OAAOA,KAAK,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAA;AACvC,GAAC,CAAC,CAAA;AACF;AACA,EAAA,IAAIpB,IAAY,CAAA;AAChB,EAAA,IAAIjO,UAAU,CAAC3D,MAAM,KAAK,CAAC,EAAE;AAC3B4R,IAAAA,IAAI,GAAG,SAAS,CAAA;AACjB,GAAA,MAAM;AACL;AACA;AACAA,IAAAA,IAAI,GAAGuB,SAAS,CAACxP,UAAU,CAAC,CAAC,CAAC,CAACqP,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC9C,GAAA;AAED;EACA,IAAI;IACF,IAAMI,MAAM,GAAGC,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAChC,IAAMO,KAAK,GAAG,EAAE,CAAA;AAChB,IAAA,KAAK,IAAIjR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+Q,MAAM,CAACpT,MAAM,EAAEqC,CAAC,EAAE,EAAE;MACtCiR,KAAK,CAAChT,IAAI,CAAC8S,MAAM,CAACG,UAAU,CAAClR,CAAC,CAAC,CAAC,CAAA;AACjC,KAAA;AACD;AACA,IAAA,IAAMmR,IAAI,GAAG,IAAIC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAIC,UAAU,CAACL,KAAK,CAAC,CAAC,EAAE;AAAE5P,MAAAA,IAAI,EAAJA,IAAAA;AAAI,KAAE,CAAC,CAAA;IAE/D,OAAO;AAAE8P,MAAAA,IAAI,EAAJA,IAAI;AAAE5B,MAAAA,IAAI,EAAJA,IAAAA;KAAM,CAAA;GACtB,CAAC,OAAOtS,KAAK,EAAE;IACd,OAAO;AAAEkU,MAAAA,IAAI,EAAE;AAAEI,QAAAA,IAAI,EAAE,CAAC;QAAElQ,IAAI,EAAGpE,KAAe,CAACe,OAAAA;OAAS;AAAEuR,MAAAA,IAAI,EAAEkB,OAAAA;KAAS,CAAA;AAC5E,GAAA;AACH;;ACzCA;;;;;;;AAOG;AACW,SAAUe,uBAAuBA,CAACC,WAAmB,EAAEb,MAAiB,EAAA;EACpF,IAAIc,MAAM,GAAGD,WAAW,CAAA;AACxB,EAAA,IAAI5X,KAAK,CAACC,OAAO,CAAC8W,MAAM,CAAC,EAAE;AACzB,IAAA,IAAMe,KAAK,GAAGD,MAAM,CAACf,KAAK,CAAC,OAAO,CAAC,CAAA;AACnCC,IAAAA,MAAM,CAACpN,OAAO,CAAC,UAACqN,KAAK,EAAElJ,KAAK,EAAI;AAC9B,MAAA,IAAMiK,SAAS,GAAGD,KAAK,CAACvC,SAAS,CAAC,UAACyC,IAAI,EAAA;AAAA,QAAA,OAAKA,IAAI,KAAA,GAAA,IAASlK,KAAK,GAAG,CAAC,CAAE,CAAA;OAAC,CAAA,CAAA;MACrE,IAAIiK,SAAS,IAAI,CAAC,EAAE;AAClBD,QAAAA,KAAK,CAACC,SAAS,CAAC,GAAGf,KAAK,CAAA;AACzB,OAAA;AACH,KAAC,CAAC,CAAA;AACFa,IAAAA,MAAM,GAAGC,KAAK,CAACG,IAAI,CAAC,EAAE,CAAC,CAAA;AACxB,GAAA;AACD,EAAA,OAAOJ,MAAM,CAAA;AACf;;AClBA;;;;;;;AAOG;AACW,SAAUK,uBAAuBA,CAACC,iBAAqC,EAAEpB,MAAiB,EAAA;AACtG,EAAA,OAAOY,uBAAuB,CAACQ,iBAAiB,EAAEpB,MAAM,CAAC,CAAA;AAC3D;;ACXA;;;;;;;;;;AAUG;AACW,SAAUqB,wBAAwBA,CAC9CC,UAAoD,EACpDC,cAAA,EACAC,UAAwC,EAAA;AAAA,EAAA,IADxCD,cAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,cAAA,GAAuC,EAAE,CAAA;AAAA,GAAA;AAGzC,EAAA,IAAItY,KAAK,CAACC,OAAO,CAACoY,UAAU,CAAC,EAAE;AAC7B,IAAA,OAAOA,UAAU,CAAC3R,GAAG,CAAC,UAACoH,KAAK,EAAA;AAAA,MAAA,OAAKsK,wBAAwB,CAACtK,KAAK,EAAEwK,cAAc,CAAC,CAAA;AAAA,KAAA,CAAC,CAACxV,MAAM,CAAC,UAAC0V,GAAG,EAAA;AAAA,MAAA,OAAKA,GAAG,CAAA;KAAC,CAAA,CAAA;AACvG,GAAA;AACD;AACA,EAAA,IAAM1K,KAAK,GAAGuK,UAAU,KAAK,EAAE,IAAIA,UAAU,KAAK,IAAI,GAAG,CAAC,CAAC,GAAGzX,MAAM,CAACyX,UAAU,CAAC,CAAA;AAChF,EAAA,IAAMjS,MAAM,GAAGkS,cAAc,CAACxK,KAAK,CAAC,CAAA;AACpC,EAAA,OAAO1H,MAAM,GAAGA,MAAM,CAAC5F,KAAK,GAAG+X,UAAU,CAAA;AAC3C;;ACpBA;;;;;;;;;;;AAWG;AACW,SAAUE,wBAAwBA,CAC9CJ,UAA2B,EAC3BK,QAAsE,EACtEJ,cAAA,EAAyC;AAAA,EAAA,IAAzCA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,cAAA,GAAuC,EAAE,CAAA;AAAA,GAAA;AAEzC,EAAA,IAAM9X,KAAK,GAAG4X,wBAAwB,CAAIC,UAAU,EAAEC,cAAc,CAAC,CAAA;AACrE,EAAA,IAAItY,KAAK,CAACC,OAAO,CAACyY,QAAQ,CAAC,EAAE;AAC3B,IAAA,OAAOA,QAAQ,CAAC5V,MAAM,CAAC,UAACgJ,CAAC,EAAA;AAAA,MAAA,OAAK,CAAC0J,OAAO,CAAC1J,CAAC,EAAEtL,KAAK,CAAC,CAAA;KAAC,CAAA,CAAA;AAClD,GAAA;EACD,OAAOgV,OAAO,CAAChV,KAAK,EAAEkY,QAAQ,CAAC,GAAGjY,SAAS,GAAGiY,QAAQ,CAAA;AACxD;;ACvBA;;;;;AAKG;AACW,SAAUC,qBAAqBA,CAC3CnY,KAAkC,EAClCkY,QAAqE,EAAA;AAErE,EAAA,IAAI1Y,KAAK,CAACC,OAAO,CAACyY,QAAQ,CAAC,EAAE;AAC3B,IAAA,OAAOA,QAAQ,CAACE,IAAI,CAAC,UAACC,GAAG,EAAA;AAAA,MAAA,OAAKrD,OAAO,CAACqD,GAAG,EAAErY,KAAK,CAAC,CAAA;KAAC,CAAA,CAAA;AACnD,GAAA;AACD,EAAA,OAAOgV,OAAO,CAACkD,QAAQ,EAAElY,KAAK,CAAC,CAAA;AACjC;;ACfA;;;;;;;;;;AAUG;AACqB,SAAAsY,wBAAwBA,CAC9CtY,KAAkE,EAClE8X,cAAA,EACAS,QAAQ,EAAQ;AAAA,EAAA,IADhBT,cAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,cAAA,GAAuC,EAAE,CAAA;AAAA,GAAA;AAAA,EAAA,IACzCS,QAAQ,KAAA,KAAA,CAAA,EAAA;AAARA,IAAAA,QAAQ,GAAG,KAAK,CAAA;AAAA,GAAA;EAEhB,IAAMC,eAAe,GAAaV,cAAc,CAC7C5R,GAAG,CAAC,UAACuS,GAAG,EAAEnL,KAAK,EAAA;AAAA,IAAA,OAAM6K,qBAAqB,CAACM,GAAG,CAACzY,KAAK,EAAEA,KAAK,CAAC,GAAG0Y,MAAM,CAACpL,KAAK,CAAC,GAAGrN,SAAS,CAAA;AAAA,GAAC,CAAC,CAC1FqC,MAAM,CAAC,UAACmW,GAAG,EAAA;IAAA,OAAK,OAAOA,GAAG,KAAK,WAAW,CAAA;GAAa,CAAA,CAAA;EAC1D,IAAI,CAACF,QAAQ,EAAE;IACb,OAAOC,eAAe,CAAC,CAAC,CAAC,CAAA;AAC1B,GAAA;AACD,EAAA,OAAOA,eAAe,CAAA;AACxB;;ACvBA;;;;;;;AAOG;AACW,SAAUG,sBAAsBA,CAC5Cd,UAA2B,EAC3BK,QAAuC,EACvCJ,cAAA,EAAyC;AAAA,EAAA,IAAzCA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,cAAA,GAAuC,EAAE,CAAA;AAAA,GAAA;AAEzC,EAAA,IAAM9X,KAAK,GAAG4X,wBAAwB,CAAIC,UAAU,EAAEC,cAAc,CAAC,CAAA;AACrE,EAAA,IAAI9X,KAAK,EAAE;AACT,IAAA,IAAMsN,KAAK,GAAGwK,cAAc,CAAC/C,SAAS,CAAC,UAAC0D,GAAG,EAAA;AAAA,MAAA,OAAKzY,KAAK,KAAKyY,GAAG,CAACzY,KAAK,CAAA;KAAC,CAAA,CAAA;AACpE,IAAA,IAAM4Y,GAAG,GAAGd,cAAc,CAAC5R,GAAG,CAAC,UAAA6J,IAAA,EAAA;AAAA,MAAA,IAAUiI,GAAG,GAAAjI,IAAA,CAAV/P,KAAK,CAAA;AAAA,MAAA,OAAYgY,GAAG,CAAA;KAAC,CAAA,CAAA;IACvD,IAAMa,OAAO,GAAGX,QAAQ,CAAC1R,KAAK,CAAC,CAAC,EAAE8G,KAAK,CAAC,CAAC9E,MAAM,CAACxI,KAAK,EAAEkY,QAAQ,CAAC1R,KAAK,CAAC8G,KAAK,CAAC,CAAC,CAAA;AAC7E;AACA;AACA,IAAA,OAAOuL,OAAO,CAACC,IAAI,CAAC,UAAC5U,CAAC,EAAEC,CAAC,EAAA;AAAA,MAAA,OAAK/D,MAAM,CAACwY,GAAG,CAACpW,OAAO,CAAC0B,CAAC,CAAC,GAAG0U,GAAG,CAACpW,OAAO,CAAC2B,CAAC,CAAC,CAAC,CAAA;KAAC,CAAA,CAAA;AACvE,GAAA;AACD,EAAA,OAAO+T,QAAQ,CAAA;AACjB;;ACnBA;;;;AAIG;AAJH,IAKqBa,kBAAkB,gBAAA,YAAA;AAOrC;;;AAGG;EACH,SAAAA,kBAAAA,CAAYC,aAA8B,EAAA;AAV1C;;;AAGG;IAHH,IAIQlG,CAAAA,WAAW,GAAmB,EAAE,CAAA;AAOtC,IAAA,IAAI,CAACmG,cAAc,CAACD,aAAa,CAAC,CAAA;AACpC,GAAA;AAEA;AACG;AADH,EAAA,IAAAlD,MAAA,GAAAiD,kBAAA,CAAAhD,SAAA,CAAA;AAMA;;;;;AAKG;AALHD,EAAAA,MAAA,CAMQoD,qBAAqB,GAArB,SAAAA,qBAAAA,CAAsBC,WAA+B,EAAA;AAC3D,IAAA,IAAMC,OAAO,GAAI5Z,KAAK,CAACC,OAAO,CAAC0Z,WAAW,CAAC,IAAIA,WAAW,CAAC7V,MAAM,GAAG,CAAC,IAAK,OAAO6V,WAAW,KAAK,QAAQ,CAAA;AACzG,IAAA,IAAIE,UAAU,GAAgBD,OAAO,GAAGhU,GAAG,CAAC,IAAI,CAAC0N,WAAW,EAAEqG,WAAW,CAAC,GAAG,IAAI,CAACrG,WAAW,CAAA;AAC7F,IAAA,IAAI,CAACuG,UAAU,IAAIF,WAAW,EAAE;MAC9BE,UAAU,GAAG,EAAE,CAAA;MACfrP,GAAG,CAAC,IAAI,CAAC8I,WAAW,EAAEqG,WAAW,EAAEE,UAAU,CAAC,CAAA;AAC/C,KAAA;AACD,IAAA,OAAOA,UAAU,CAAA;AACnB,GAAA;AAEA;;;;AAIG,MAJH;AAAAvD,EAAAA,MAAA,CAKAmD,cAAc,GAAd,SAAAA,cAAAA,CAAeD,aAA8B,EAAA;IAC3C,IAAI,CAAClG,WAAW,GAAGkG,aAAa,GAAGM,SAAS,CAACN,aAAa,CAAC,GAAG,EAAE,CAAA;AAChE,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;;;;;AAOG,MAPH;EAAAlD,MAAA,CAQAyD,SAAS,GAAT,SAAAA,UAAUC,WAA8B,EAAEL,WAA+B,EAAA;AACvE,IAAA,IAAME,UAAU,GAAgB,IAAI,CAACH,qBAAqB,CAACC,WAAW,CAAC,CAAA;AACvE,IAAA,IAAIM,UAAU,GAAGrU,GAAG,CAACiU,UAAU,EAAErY,UAAU,CAAC,CAAA;AAC5C,IAAA,IAAI,CAACxB,KAAK,CAACC,OAAO,CAACga,UAAU,CAAC,EAAE;AAC9BA,MAAAA,UAAU,GAAG,EAAE,CAAA;AACfJ,MAAAA,UAAU,CAACrY,UAAU,CAAC,GAAGyY,UAAU,CAAA;AACpC,KAAA;AAED,IAAA,IAAIja,KAAK,CAACC,OAAO,CAAC+Z,WAAW,CAAC,EAAE;AAAA,MAAA,IAAAE,WAAA,CAAA;MAC9B,CAAAA,WAAA,GAAAD,UAAU,EAAC7V,IAAI,CAAA+V,KAAA,CAAAD,WAAA,EAAIF,WAAW,CAAC,CAAA;AAChC,KAAA,MAAM;AACLC,MAAAA,UAAU,CAAC7V,IAAI,CAAC4V,WAAW,CAAC,CAAA;AAC7B,KAAA;AACD,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;;;;;AAOG,MAPH;EAAA1D,MAAA,CAQA8D,SAAS,GAAT,SAAAA,UAAUJ,WAA8B,EAAEL,WAA+B,EAAA;AACvE,IAAA,IAAME,UAAU,GAAgB,IAAI,CAACH,qBAAqB,CAACC,WAAW,CAAC,CAAA;AACvE;AACA,IAAA,IAAMU,SAAS,GAAGra,KAAK,CAACC,OAAO,CAAC+Z,WAAW,CAAC,GAAA,EAAA,CAAAhR,MAAA,CAAOgR,WAAW,CAAI,GAAA,CAACA,WAAW,CAAC,CAAA;AAC/ExP,IAAAA,GAAG,CAACqP,UAAU,EAAErY,UAAU,EAAE6Y,SAAS,CAAC,CAAA;AACtC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA;;;;;;AAMG,MANH;AAAA/D,EAAAA,MAAA,CAOAgE,WAAW,GAAX,SAAAA,WAAAA,CAAYX,WAA+B,EAAA;AACzC,IAAA,IAAME,UAAU,GAAgB,IAAI,CAACH,qBAAqB,CAACC,WAAW,CAAC,CAAA;AACvEnP,IAAAA,GAAG,CAACqP,UAAU,EAAErY,UAAU,EAAE,EAAE,CAAC,CAAA;AAC/B,IAAA,OAAO,IAAI,CAAA;GACZ,CAAA;AAAA+Y,EAAAA,YAAA,CAAAhB,kBAAA,EAAA,CAAA;IAAAxW,GAAA,EAAA,aAAA;IAAA6C,GAAA,EAjFD,SAAAA,GAAAA,GAAe;MACb,OAAO,IAAI,CAAC0N,WAAW,CAAA;AACzB,KAAA;AAAC,GAAA,CAAA,CAAA,CAAA;AAAA,EAAA,OAAAiG,kBAAA,CAAA;AAAA,CAAA;;AC5BH;;;;;AAKG;AACqB,SAAAiB,SAASA,CAA0Cra,MAAS,EAAA;EAClF,IAAMsa,IAAI,GAAkB,EAAE,CAAA;EAC9B,IAAIta,MAAM,CAACua,UAAU,EAAE;AACrBD,IAAAA,IAAI,CAACE,IAAI,GAAGxa,MAAM,CAACua,UAAU,CAAA;AAC9B,GAAA;EACD,IAAIva,MAAM,CAACya,OAAO,IAAIza,MAAM,CAACya,OAAO,KAAK,CAAC,EAAE;AAC1CH,IAAAA,IAAI,CAACI,GAAG,GAAG1a,MAAM,CAACya,OAAO,CAAA;AAC1B,GAAA;EACD,IAAIza,MAAM,CAAC2a,OAAO,IAAI3a,MAAM,CAAC2a,OAAO,KAAK,CAAC,EAAE;AAC1CL,IAAAA,IAAI,CAACM,GAAG,GAAG5a,MAAM,CAAC2a,OAAO,CAAA;AAC1B,GAAA;AACD,EAAA,OAAOL,IAAI,CAAA;AACb;;AClBA;;;;;;;AAOG;AACqB,SAAAO,aAAaA,CAKnC7a,MAAkB,EAClB8a,WAAoB,EACpB/X,OAAkC,EAClCgY,kBAAkB,EAAO;AAAA,EAAA,IADzBhY,OAAkC,KAAA,KAAA,CAAA,EAAA;IAAlCA,OAAkC,GAAA,EAAE,CAAA;AAAA,GAAA;AAAA,EAAA,IACpCgY,kBAAkB,KAAA,KAAA,CAAA,EAAA;AAAlBA,IAAAA,kBAAkB,GAAG,IAAI,CAAA;AAAA,GAAA;EAEzB,IAAMC,UAAU,GAAA9X,QAAA,CAAA;IACdmE,IAAI,EAAEyT,WAAW,IAAI,MAAA;AAAM,GAAA,EACxBT,SAAS,CAACra,MAAM,CAAC,CACrB,CAAA;AAED;EACA,IAAI+C,OAAO,CAACkY,SAAS,EAAE;AACrBD,IAAAA,UAAU,CAAC3T,IAAI,GAAGtE,OAAO,CAACkY,SAAS,CAAA;AACpC,GAAA,MAAM,IAAI,CAACH,WAAW,EAAE;AACvB;AACA,IAAA,IAAI9a,MAAM,CAACqH,IAAI,KAAK,QAAQ,EAAE;MAC5B2T,UAAU,CAAC3T,IAAI,GAAG,QAAQ,CAAA;AAC1B;AACA,MAAA,IAAI0T,kBAAkB,IAAIC,UAAU,CAACR,IAAI,KAAKla,SAAS,EAAE;AACvD;AACA;QACA0a,UAAU,CAACR,IAAI,GAAG,KAAK,CAAA;AACxB,OAAA;AACF,KAAA,MAAM,IAAIxa,MAAM,CAACqH,IAAI,KAAK,SAAS,EAAE;MACpC2T,UAAU,CAAC3T,IAAI,GAAG,QAAQ,CAAA;AAC1B;AACA,MAAA,IAAI2T,UAAU,CAACR,IAAI,KAAKla,SAAS,EAAE;AACjC;QACA0a,UAAU,CAACR,IAAI,GAAG,CAAC,CAAA;AACpB,OAAA;AACF,KAAA;AACF,GAAA;EAED,IAAIzX,OAAO,CAACmY,YAAY,EAAE;AACxBF,IAAAA,UAAU,CAACG,YAAY,GAAGpY,OAAO,CAACmY,YAAY,CAAA;AAC/C,GAAA;AAED,EAAA,OAAOF,UAAU,CAAA;AACnB;;AClDA;AACG;AACI,IAAMI,eAAe,GAAgC;AAC1DC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE,KAAA;GACX;AACDC,EAAAA,UAAU,EAAE,QAAQ;AACpBC,EAAAA,QAAQ,EAAE,KAAA;CACX,CAAA;AAED;;;;AAIG;AACW,SAAUC,sBAAsBA,CAI5ClZ,UAAgC;AAAA,EAAA,IAAhCA;IAAAA,WAA8B,EAAE,CAAA;AAAA,GAAA;AAChC,EAAA,IAAMiQ,SAAS,GAAGlQ,YAAY,CAAUC,QAAQ,CAAC,CAAA;AACjD,EAAA,IAAIiQ,SAAS,IAAIA,SAAS,CAAC1Q,sBAAsB,CAAC,EAAE;AAClD,IAAA,IAAMiB,OAAO,GAAGyP,SAAS,CAAC1Q,sBAAsB,CAAgC,CAAA;AAChF,IAAA,OAAAoB,QAAA,CAAA,EAAA,EAAYkY,eAAe,EAAKrY,OAAO,CAAA,CAAA;AACxC,GAAA;AAED,EAAA,OAAOqY,eAAe,CAAA;AACxB;;AC7BA;;;;;;;AAOG;AACW,SAAUM,WAAWA,CAKjCnG,IAAU,EAAEoG,QAA2B,EAAEnJ,SAAA,EAAsC;AAAA,EAAA,IAAtCA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,SAAA,GAAoC,EAAE,CAAA;AAAA,GAAA;AAC/E,EAAA,IAAQoJ,SAAS,GAAKD,QAAQ,CAAtBC,SAAS,CAAA;EACjB,IAAIrG,IAAI,KAAK,iBAAiB,EAAE;IAC9B,OAAOqG,SAAS,CAACrG,IAAI,CAAC,CAAA;AACvB,GAAA;AACD,EAAA;AACE;AACA;AACE/C,IAAAA,SAAiB,CAAC+C,IAAI,CAAkC,IAAIqG,SAAS,CAACrG,IAAI,CAAA;AAAC,IAAA;AAEjF;;;ACjBA;AACG;AACH,IAAMsG,SAAS,GAA6C;EAC1D,SAAS,EAAA;AACPC,IAAAA,QAAQ,EAAE,gBAAgB;AAC1BC,IAAAA,KAAK,EAAE,aAAa;AACpBC,IAAAA,MAAM,EAAE,cAAc;AACtBC,IAAAA,MAAM,EAAE,cAAA;GACT;AACDC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,YAAY;AAClBC,IAAAA,QAAQ,EAAE,gBAAgB;AAC1BC,IAAAA,KAAK,EAAE,aAAa;AACpBC,IAAAA,QAAQ,EAAE,YAAY;AACtBC,IAAAA,IAAI,EAAE,YAAY;AAClBC,IAAAA,IAAI,EAAE,YAAY;AAClBC,IAAAA,GAAG,EAAE,WAAW;AAChB,IAAA,UAAU,EAAE,YAAY;AACxBV,IAAAA,KAAK,EAAE,aAAa;AACpBC,IAAAA,MAAM,EAAE,cAAc;AACtBU,IAAAA,QAAQ,EAAE,gBAAgB;AAC1BT,IAAAA,MAAM,EAAE,cAAc;AACtBU,IAAAA,IAAI,EAAE,YAAY;AAClBC,IAAAA,QAAQ,EAAE,gBAAgB;AAC1B,IAAA,WAAW,EAAE,gBAAgB;AAC7B,IAAA,UAAU,EAAE,eAAe;AAC3B,IAAA,cAAc,EAAE,mBAAmB;AACnCC,IAAAA,IAAI,EAAE,YAAY;AAClBC,IAAAA,KAAK,EAAE,aAAa;AACpBC,IAAAA,IAAI,EAAE,YAAA;GACP;AACDC,EAAAA,MAAM,EAAE;AACNb,IAAAA,IAAI,EAAE,YAAY;AAClBH,IAAAA,MAAM,EAAE,cAAc;AACtBiB,IAAAA,MAAM,EAAE,cAAc;AACtBC,IAAAA,KAAK,EAAE,aAAa;AACpBnB,IAAAA,KAAK,EAAE,aAAa;AACpBE,IAAAA,MAAM,EAAE,cAAA;GACT;AACDkB,EAAAA,OAAO,EAAE;AACPhB,IAAAA,IAAI,EAAE,YAAY;AAClBH,IAAAA,MAAM,EAAE,cAAc;AACtBiB,IAAAA,MAAM,EAAE,cAAc;AACtBC,IAAAA,KAAK,EAAE,aAAa;AACpBnB,IAAAA,KAAK,EAAE,aAAa;AACpBE,IAAAA,MAAM,EAAE,cAAA;GACT;AACDhF,EAAAA,KAAK,EAAE;AACL+E,IAAAA,MAAM,EAAE,cAAc;AACtBoB,IAAAA,UAAU,EAAE,kBAAkB;AAC9BC,IAAAA,KAAK,EAAE,YAAY;AACnBpB,IAAAA,MAAM,EAAE,cAAA;AACT,GAAA;CACF,CAAA;AAED;;;;;;AAMG;AACH,SAASqB,kBAAkBA,CACzBC,OAAwB,EAAA;AAExB,EAAA,IAAIC,YAAY,GAAgC/X,GAAG,CAAC8X,OAAO,EAAE,cAAc,CAAC,CAAA;AAC5E;EACA,IAAI,CAACC,YAAY,EAAE;AACjB,IAAA,IAAMC,cAAc,GAAIF,OAAO,CAACG,YAAY,IAAIH,OAAO,CAACG,YAAY,CAAC3a,OAAO,IAAK,EAAE,CAAA;AACnFya,IAAAA,YAAY,GAAG,SAAAA,YAAApN,CAAAA,IAAA,EAA0B;AAAA,MAAA,IAAvBrN,OAAO,GAAAqN,IAAA,CAAPrN,OAAO;AAAKsY,QAAAA,KAAK,GAAA7S,6BAAA,CAAA4H,IAAA,EAAA3H,SAAA,CAAA,CAAA;AACjC,MAAA,OAAOkV,GAAC,CAAAJ,OAAO,EAAAra,QAAA,CAAA;AAACH,QAAAA,OAAO,EAAAG,QAAA,CAAOua,EAAAA,EAAAA,cAAc,EAAK1a,OAAO,CAAA;OAAQsY,EAAAA,KAAK,EAAI,CAAA;KAC1E,CAAA;AACDhR,IAAAA,GAAG,CAACkT,OAAO,EAAE,cAAc,EAAEC,YAAY,CAAC,CAAA;AAC3C,GAAA;AACD,EAAA,OAAOA,YAAY,CAAA;AACrB,CAAA;AAEA;;;;;;;;;;AAUG;AACW,SAAUI,SAASA,CAC/B5d,MAAkB,EAClB6d,MAAiC,EACjCC,iBAAA,EAAoD;AAAA,EAAA,IAApDA,iBAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,iBAAA,GAAkD,EAAE,CAAA;AAAA,GAAA;AAEpD,EAAA,IAAMzW,IAAI,GAAGD,aAAa,CAACpH,MAAM,CAAC,CAAA;EAElC,IACE,OAAO6d,MAAM,KAAK,UAAU,IAC3BA,MAAM,IAAIE,OAAO,CAACC,YAAY,eAACC,aAAa,CAACJ,MAAM,CAAC,CAAE,IACvDE,OAAO,CAACG,MAAM,CAACL,MAAM,CAAC,EACtB;IACA,OAAOP,kBAAkB,CAAUO,MAAyB,CAAC,CAAA;AAC9D,GAAA;AAED,EAAA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;AAC9B,IAAA,MAAM,IAAIvY,KAAK,CAAmC,iCAAA,GAAA,OAAOuY,MAAQ,CAAC,CAAA;AACnE,GAAA;EAED,IAAIA,MAAM,IAAIC,iBAAiB,EAAE;AAC/B,IAAA,IAAMK,gBAAgB,GAAGL,iBAAiB,CAACD,MAAM,CAAC,CAAA;AAClD,IAAA,OAAOD,SAAS,CAAU5d,MAAM,EAAEme,gBAAgB,EAAEL,iBAAiB,CAAC,CAAA;AACvE,GAAA;AAED,EAAA,IAAI,OAAOzW,IAAI,KAAK,QAAQ,EAAE;AAC5B,IAAA,IAAI,EAAEA,IAAI,IAAIwU,SAAS,CAAC,EAAE;AACxB,MAAA,MAAM,IAAIvW,KAAK,CAAwB+B,sBAAAA,GAAAA,IAAI,MAAG,CAAC,CAAA;AAChD,KAAA;AAED,IAAA,IAAIwW,MAAM,IAAIhC,SAAS,CAACxU,IAAI,CAAC,EAAE;MAC7B,IAAM8W,iBAAgB,GAAGL,iBAAiB,CAACjC,SAAS,CAACxU,IAAI,CAAC,CAACwW,MAAM,CAAC,CAAC,CAAA;AACnE,MAAA,OAAOD,SAAS,CAAU5d,MAAM,EAAEme,iBAAgB,EAAEL,iBAAiB,CAAC,CAAA;AACvE,KAAA;AACF,GAAA;AAED,EAAA,MAAM,IAAIxY,KAAK,CAAA,aAAA,GAAeuY,MAAM,GAAexW,cAAAA,GAAAA,IAAI,MAAG,CAAC,CAAA;AAC7D;;AClIA;;;;;;AAMG;AACH,SAAS+W,UAAUA,CAAClC,MAAc,EAAA;EAChC,IAAImC,IAAI,GAAG,CAAC,CAAA;AACZ,EAAA,KAAK,IAAIrY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkW,MAAM,CAACvY,MAAM,EAAEqC,CAAC,IAAI,CAAC,EAAE;AACzC,IAAA,IAAMsY,GAAG,GAAGpC,MAAM,CAAChF,UAAU,CAAClR,CAAC,CAAC,CAAA;IAChCqY,IAAI,GAAG,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGC,GAAG,CAAA;AAC/BD,IAAAA,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC;AACpB,GAAA;;AACD,EAAA,OAAOA,IAAI,CAACE,QAAQ,CAAC,EAAE,CAAC,CAAA;AAC1B,CAAA;AAEA;;;;AAIG;AACqB,SAAAC,aAAaA,CAA0Cxe,MAAS,EAAA;EACtF,OAAOoe,UAAU,CAACK,IAAI,CAACC,SAAS,CAAC1e,MAAM,CAAC,CAAC,CAAA;AAC3C;;ACvBA;;;;;;;AAOG;AACW,SAAU2e,SAASA,CAC/B3e,MAAkB,EAClB6d,MAAgC,EAChCC,iBAAA,EAAoD;AAAA,EAAA,IAApDA,iBAAA,KAAA,KAAA,CAAA,EAAA;IAAAA,iBAAA,GAAkD,EAAE,CAAA;AAAA,GAAA;EAEpD,IAAI;AACFF,IAAAA,SAAS,CAAC5d,MAAM,EAAE6d,MAAM,EAAEC,iBAAiB,CAAC,CAAA;AAC5C,IAAA,OAAO,IAAI,CAAA;GACZ,CAAC,OAAOrT,CAAC,EAAE;IACV,IAAMmU,GAAG,GAAUnU,CAAU,CAAA;IAC7B,IAAImU,GAAG,CAAC5a,OAAO,KAAK4a,GAAG,CAAC5a,OAAO,CAACoB,UAAU,CAAC,WAAW,CAAC,IAAIwZ,GAAG,CAAC5a,OAAO,CAACoB,UAAU,CAAC,oBAAoB,CAAC,CAAC,EAAE;AACxG,MAAA,OAAO,KAAK,CAAA;AACb,KAAA;AACD,IAAA,MAAMqF,CAAC,CAAA;AACR,GAAA;AACH;;ACrBA;;;;AAIG;AACH,SAASoU,WAAWA,CAAU5J,EAAwB,EAAE6J,MAAc,EAAA;AACpE,EAAA,IAAMC,KAAK,GAAG7X,QAAQ,CAAC+N,EAAE,CAAC,GAAGA,EAAE,GAAGA,EAAE,CAAC3T,MAAM,CAAC,CAAA;EAC5C,OAAUyd,KAAK,UAAKD,MAAM,CAAA;AAC5B,CAAA;AACA;;;;AAIG;AACG,SAAUE,aAAaA,CAAU/J,EAAwB,EAAA;AAC7D,EAAA,OAAO4J,WAAW,CAAI5J,EAAE,EAAE,aAAa,CAAC,CAAA;AAC1C,CAAA;AAEA;;;;AAIG;AACG,SAAUgK,OAAOA,CAAUhK,EAAwB,EAAA;AACvD,EAAA,OAAO4J,WAAW,CAAI5J,EAAE,EAAE,OAAO,CAAC,CAAA;AACpC,CAAA;AAEA;;;;AAIG;AACG,SAAUiK,UAAUA,CAAUjK,EAAwB,EAAA;AAC1D,EAAA,OAAO4J,WAAW,CAAI5J,EAAE,EAAE,UAAU,CAAC,CAAA;AACvC,CAAA;AAEA;;;;AAIG;AACG,SAAUkK,MAAMA,CAAUlK,EAAwB,EAAA;AACtD,EAAA,OAAO4J,WAAW,CAAI5J,EAAE,EAAE,MAAM,CAAC,CAAA;AACnC,CAAA;AAEA;;;;AAIG;AACG,SAAUmK,OAAOA,CAAUnK,EAAwB,EAAA;AACvD,EAAA,OAAO4J,WAAW,CAAI5J,EAAE,EAAE,OAAO,CAAC,CAAA;AACpC,CAAA;AAEA;;;;;;;AAOG;SACaoK,kBAAkBA,CAAUpK,EAAwB,EAAEqK,eAAe,EAAQ;AAAA,EAAA,IAAvBA,eAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,IAAAA,eAAe,GAAG,KAAK,CAAA;AAAA,GAAA;EAC3F,IAAMC,QAAQ,GAAGD,eAAe,GAAA,GAAA,GAAOJ,UAAU,CAAIjK,EAAE,CAAC,GAAK,EAAE,CAAA;AAC/D,EAAA,OAAUgK,OAAO,CAAIhK,EAAE,CAAC,SAAI+J,aAAa,CAAI/J,EAAE,CAAC,SAAIkK,MAAM,CAAIlK,EAAE,CAAC,GAAGsK,QAAQ,CAAA;AAC9E,CAAA;AAEA;;;;;AAKG;AACa,SAAAC,QAAQA,CAACvK,EAAU,EAAEwK,WAAmB,EAAA;EACtD,OAAUxK,EAAE,SAAIwK,WAAW,CAAA;AAC7B;;ACnEwB,SAAAC,UAAUA,CAAChN,KAA6B,EAAEiN,SAAmB,EAAEC,QAAqB,EAAA;AAC1G,EAAA,OAAOD,SAAS,GAAGC,QAAQ,GAAGlN,KAAK,CAAA;AACrC;;ACfA;;;;AAIG;AACqB,SAAAmN,UAAUA,CAACC,UAAkB,EAAA;AACnD,EAAA,OAAOA,UAAU,GAAG,IAAIlgB,IAAI,CAACkgB,UAAU,CAAC,CAACC,MAAM,EAAE,GAAGzf,SAAS,CAAA;AAC/D;;ACJA;;;;;;AAMG;AACqB,SAAA0f,UAAUA,CAA0ChgB,MAAS,EAAA;AACnF,EAAA,IAAIoB,QAAQ,IAAIpB,MAAM,IAAIH,KAAK,CAACC,OAAO,CAACE,MAAM,CAAK,MAAA,CAAA,CAAC,IAAIA,MAAM,CAAA,MAAA,CAAK,CAAC2D,MAAM,KAAK,CAAC,EAAE;AAChF,IAAA,OAAO3D,MAAM,CAAA,MAAA,CAAK,CAAC,CAAC,CAAC,CAAA;AACtB,GAAA;EACD,IAAIgB,SAAS,IAAIhB,MAAM,EAAE;AACvB,IAAA,OAAOA,MAAM,CAAM,OAAA,CAAA,CAAA;AACpB,GAAA;AACD,EAAA,MAAM,IAAIsF,KAAK,CAAC,yCAAyC,CAAC,CAAA;AAC5D;;ACfA;;;;;;;AAOG;AACqB,SAAA2a,WAAWA,CACjCjgB,MAAS,EAAA;AAET;AACA;EACA,IAAMkgB,mBAAmB,GAAGlgB,MAAsC,CAAA;EAClE,IAAIkgB,mBAAmB,CAACC,SAAS,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;AAC1EpgB,IAAAA,OAAO,CAACC,IAAI,CAAC,oFAAoF,CAAC,CAAA;AACnG,GAAA;EACD,IAAIH,MAAM,QAAK,EAAE;IACf,OAAOA,MAAM,QAAK,CAACuG,GAAG,CAAC,UAAClG,KAAK,EAAE2F,CAAC,EAAI;AAClC,MAAA,IAAM0M,KAAK,GAAIwN,mBAAmB,CAACC,SAAS,IAAID,mBAAmB,CAACC,SAAS,CAACna,CAAC,CAAC,IAAK+S,MAAM,CAAC1Y,KAAK,CAAC,CAAA;MAClG,OAAO;AAAEqS,QAAAA,KAAK,EAALA,KAAK;AAAErS,QAAAA,KAAK,EAALA,KAAAA;OAAO,CAAA;AACzB,KAAC,CAAC,CAAA;AACH,GAAA;EACD,IAAM4O,UAAU,GAAGjP,MAAM,CAACgL,KAAK,IAAIhL,MAAM,CAACsG,KAAK,CAAA;EAC/C,OACE2I,UAAU,IACVA,UAAU,CAAC1I,GAAG,CAAC,UAACga,UAAU,EAAI;IAC5B,IAAMC,OAAO,GAAGD,UAAe,CAAA;AAC/B,IAAA,IAAMlgB,KAAK,GAAG2f,UAAU,CAACQ,OAAO,CAAC,CAAA;IACjC,IAAM9N,KAAK,GAAG8N,OAAO,CAACC,KAAK,IAAI1H,MAAM,CAAC1Y,KAAK,CAAC,CAAA;IAC5C,OAAO;AACLL,MAAAA,MAAM,EAAEwgB,OAAO;AACf9N,MAAAA,KAAK,EAALA,KAAK;AACLrS,MAAAA,KAAK,EAALA,KAAAA;KACD,CAAA;AACH,GAAC,CAAC,CAAA;AAEN;;ACtCA;;;;;;;;;AASG;AACW,SAAUqgB,eAAeA,CAACpZ,UAAoB,EAAEqZ,KAAgB,EAAA;AAC5E,EAAA,IAAI,CAAC9gB,KAAK,CAACC,OAAO,CAAC6gB,KAAK,CAAC,EAAE;AACzB,IAAA,OAAOrZ,UAAU,CAAA;AAClB,GAAA;AAED,EAAA,IAAMsZ,WAAW,GAAG,SAAdA,WAAWA,CAAIC,GAAa,EAAA;IAAA,OAChCA,GAAG,CAAC/d,MAAM,CAAC,UAACge,IAAuB,EAAEC,IAAI,EAAI;AAC3CD,MAAAA,IAAI,CAACC,IAAI,CAAC,GAAG,IAAI,CAAA;AACjB,MAAA,OAAOD,IAAI,CAAA;KACZ,EAAE,EAAE,CAAC,CAAA;AAAA,GAAA,CAAA;AACR,EAAA,IAAME,aAAa,GAAG,SAAhBA,aAAaA,CAAIH,GAAa,EAAA;AAAA,IAAA,OAClCA,GAAG,CAACld,MAAM,GAAG,CAAC,oBAAkBkd,GAAG,CAAC/I,IAAI,CAAC,MAAM,CAAC,GAAA,GAAA,GAAA,YAAA,GAAmB+I,GAAG,CAAC,CAAC,CAAC,GAAG,GAAA,CAAA;AAAA,GAAA,CAAA;AAC9E,EAAA,IAAMI,YAAY,GAAGL,WAAW,CAACtZ,UAAU,CAAC,CAAA;AAC5C,EAAA,IAAM4Z,aAAa,GAAGP,KAAK,CAAChe,MAAM,CAAC,UAACwe,IAAI,EAAA;AAAA,IAAA,OAAKA,IAAI,KAAK,GAAG,IAAIF,YAAY,CAACE,IAAI,CAAC,CAAA;GAAC,CAAA,CAAA;AAChF,EAAA,IAAMC,SAAS,GAAGR,WAAW,CAACM,aAAa,CAAC,CAAA;AAE5C,EAAA,IAAMG,IAAI,GAAG/Z,UAAU,CAAC3E,MAAM,CAAC,UAACwe,IAAY,EAAA;AAAA,IAAA,OAAK,CAACC,SAAS,CAACD,IAAI,CAAC,CAAA;GAAC,CAAA,CAAA;AAClE,EAAA,IAAMG,SAAS,GAAGJ,aAAa,CAACre,OAAO,CAAC,GAAG,CAAC,CAAA;AAC5C,EAAA,IAAIye,SAAS,KAAK,CAAC,CAAC,EAAE;IACpB,IAAID,IAAI,CAAC1d,MAAM,EAAE;AACf,MAAA,MAAM,IAAI2B,KAAK,CAAA,uCAAA,GAAyC0b,aAAa,CAACK,IAAI,CAAG,CAAC,CAAA;AAC/E,KAAA;AACD,IAAA,OAAOH,aAAa,CAAA;AACrB,GAAA;EACD,IAAII,SAAS,KAAKJ,aAAa,CAACK,WAAW,CAAC,GAAG,CAAC,EAAE;AAChD,IAAA,MAAM,IAAIjc,KAAK,CAAC,0DAA0D,CAAC,CAAA;AAC5E,GAAA;AAED,EAAA,IAAMkc,QAAQ,GAAA,EAAA,CAAA3Y,MAAA,CAAOqY,aAAa,CAAC,CAAA;AACnCM,EAAAA,QAAQ,CAACC,MAAM,CAAAzH,KAAA,CAAfwH,QAAQ,EAAA,CAAQF,SAAS,EAAE,CAAC,CAAA,CAAAzY,MAAA,CAAKwY,IAAI,CAAC,CAAA,CAAA;AACtC,EAAA,OAAOG,QAAQ,CAAA;AACjB;;AC3CA;;;;;AAKG;AACW,SAAUE,GAAGA,CAACC,GAAW,EAAEC,KAAa,EAAA;AACpD,EAAA,IAAI7Y,CAAC,GAAGgQ,MAAM,CAAC4I,GAAG,CAAC,CAAA;AACnB,EAAA,OAAO5Y,CAAC,CAACpF,MAAM,GAAGie,KAAK,EAAE;IACvB7Y,CAAC,GAAG,GAAG,GAAGA,CAAC,CAAA;AACZ,GAAA;AACD,EAAA,OAAOA,CAAC,CAAA;AACV;;ACVA;;;;;;AAMG;AACqB,SAAA8Y,eAAeA,CAAC/B,UAAmB,EAAEgC,WAAW,EAAO;AAAA,EAAA,IAAlBA,WAAW,KAAA,KAAA,CAAA,EAAA;AAAXA,IAAAA,WAAW,GAAG,IAAI,CAAA;AAAA,GAAA;EAC7E,IAAI,CAAChC,UAAU,EAAE;IACf,OAAO;MACLiC,IAAI,EAAE,CAAC,CAAC;MACRC,KAAK,EAAE,CAAC,CAAC;MACTC,GAAG,EAAE,CAAC,CAAC;AACPC,MAAAA,IAAI,EAAEJ,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;AAC1BK,MAAAA,MAAM,EAAEL,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;AAC5BM,MAAAA,MAAM,EAAEN,WAAW,GAAG,CAAC,CAAC,GAAG,CAAA;KAC5B,CAAA;AACF,GAAA;AACD,EAAA,IAAMnF,IAAI,GAAG,IAAI/c,IAAI,CAACkgB,UAAU,CAAC,CAAA;EACjC,IAAIrf,MAAM,CAACE,KAAK,CAACgc,IAAI,CAAC0F,OAAO,EAAE,CAAC,EAAE;AAChC,IAAA,MAAM,IAAI/c,KAAK,CAAC,uBAAuB,GAAGwa,UAAU,CAAC,CAAA;AACtD,GAAA;EACD,OAAO;AACLiC,IAAAA,IAAI,EAAEpF,IAAI,CAAC2F,cAAc,EAAE;AAC3BN,IAAAA,KAAK,EAAErF,IAAI,CAAC4F,WAAW,EAAE,GAAG,CAAC;AAC7BN,IAAAA,GAAG,EAAEtF,IAAI,CAAC6F,UAAU,EAAE;IACtBN,IAAI,EAAEJ,WAAW,GAAGnF,IAAI,CAAC8F,WAAW,EAAE,GAAG,CAAC;IAC1CN,MAAM,EAAEL,WAAW,GAAGnF,IAAI,CAAC+F,aAAa,EAAE,GAAG,CAAC;IAC9CN,MAAM,EAAEN,WAAW,GAAGnF,IAAI,CAACgG,aAAa,EAAE,GAAG,CAAA;GAC9C,CAAA;AACH;;AC9BA;;;;;;;;AAQG;AACqB,SAAAC,uBAAuBA,CAA0C5iB,MAAS,EAAA;AAChG;EACA,IAAIA,MAAM,SAAM,EAAE;AAChB,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AAED;AACA,EAAA,IAAIA,MAAM,CAAK,MAAA,CAAA,IAAIA,MAAM,CAAA,MAAA,CAAK,CAAC2D,MAAM,KAAK,CAAC,IAAI3D,MAAM,CAAK,MAAA,CAAA,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AACtE,IAAA,OAAO,IAAI,CAAA;AACZ,GAAA;AAED;EACA,IAAIA,MAAM,CAACsG,KAAK,IAAItG,MAAM,CAACsG,KAAK,CAAC3C,MAAM,KAAK,CAAC,EAAE;IAC7C,OAAOif,uBAAuB,CAAC5iB,MAAM,CAACsG,KAAK,CAAC,CAAC,CAAM,CAAC,CAAA;AACrD,GAAA;AAED;EACA,IAAItG,MAAM,CAACgL,KAAK,IAAIhL,MAAM,CAACgL,KAAK,CAACrH,MAAM,KAAK,CAAC,EAAE;IAC7C,OAAOif,uBAAuB,CAAC5iB,MAAM,CAACgL,KAAK,CAAC,CAAC,CAAM,CAAC,CAAA;AACrD,GAAA;AAED;EACA,IAAIhL,MAAM,CAAC4G,KAAK,EAAE;AAChB,IAAA,IAAMic,UAAU,GAAG,SAAbA,UAAUA,CAAIjd,SAAoC,EAAA;MAAA,OAAKgd,uBAAuB,CAAChd,SAAc,CAAC,CAAA;AAAA,KAAA,CAAA;AACpG,IAAA,OAAO5F,MAAM,CAAC4G,KAAK,CAAC6R,IAAI,CAACoK,UAAU,CAAC,CAAA;AACrC,GAAA;AAED,EAAA,OAAO,KAAK,CAAA;AACd;;ACnCA;;;;;;;AAOG;AACqB,SAAAC,YAAYA,CAACC,SAA0B,EAAEC,SAAc,EAAEC,SAAc,EAAA;AAC7F,EAAA,IAAQ5H,KAAK,GAAY0H,SAAS,CAA1B1H,KAAK;IAAE6H,KAAK,GAAKH,SAAS,CAAnBG,KAAK,CAAA;AACpB,EAAA,OAAO,CAAC5e,UAAU,CAAC+W,KAAK,EAAE2H,SAAS,CAAC,IAAI,CAAC1e,UAAU,CAAC4e,KAAK,EAAED,SAAS,CAAC,CAAA;AACvE;;ACbA;;;;;;AAMG;AACqB,SAAAE,YAAYA,CAACC,UAAsB,EAAEvG,IAAI,EAAO;AAAA,EAAA,IAAXA,IAAI,KAAA,KAAA,CAAA,EAAA;AAAJA,IAAAA,IAAI,GAAG,IAAI,CAAA;AAAA,GAAA;AACtE,EAAA,IAAQkF,IAAI,GAAmDqB,UAAU,CAAjErB,IAAI;IAAEC,KAAK,GAA4CoB,UAAU,CAA3DpB,KAAK;IAAEC,GAAG,GAAuCmB,UAAU,CAApDnB,GAAG;IAAAoB,gBAAA,GAAuCD,UAAU,CAA/ClB,IAAI;AAAJA,IAAAA,IAAI,GAAAmB,gBAAA,KAAG,KAAA,CAAA,GAAA,CAAC,GAAAA,gBAAA;IAAAC,kBAAA,GAA6BF,UAAU,CAArCjB,MAAM;AAANA,IAAAA,MAAM,GAAAmB,kBAAA,KAAG,KAAA,CAAA,GAAA,CAAC,GAAAA,kBAAA;IAAAC,kBAAA,GAAiBH,UAAU,CAAzBhB,MAAM;AAANA,IAAAA,MAAM,GAAAmB,kBAAA,KAAG,KAAA,CAAA,GAAA,CAAC,GAAAA,kBAAA,CAAA;AAC1D,EAAA,IAAMC,OAAO,GAAG5jB,IAAI,CAAC6jB,GAAG,CAAC1B,IAAI,EAAEC,KAAK,GAAG,CAAC,EAAEC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,CAAC,CAAA;EACpE,IAAMxF,QAAQ,GAAG,IAAIhd,IAAI,CAAC4jB,OAAO,CAAC,CAACzD,MAAM,EAAE,CAAA;EAC3C,OAAOlD,IAAI,GAAGD,QAAQ,GAAGA,QAAQ,CAAC/V,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;AAChD;;ACTA;;;;;AAKG;AACqB,SAAAuM,WAAWA,CACjCD,WAA4B,EAC5BuQ,WAAwB;AAAA,EAAA,IAAxBA;AAAAA,IAAAA,YAAsB,EAAE,CAAA;AAAA,GAAA;EAExB,IAAI,CAACvQ,WAAW,EAAE;AAChB,IAAA,OAAO,EAAE,CAAA;AACV,GAAA;EACD,IAAIwQ,SAAS,GAA0B,EAAE,CAAA;EACzC,IAAItiB,UAAU,IAAI8R,WAAW,EAAE;AAC7BwQ,IAAAA,SAAS,GAAGA,SAAS,CAAC9a,MAAM,CAC1BsK,WAAW,CAAC9R,UAAU,CAAE,CAACkF,GAAG,CAAC,UAACvC,OAAe,EAAI;AAC/C,MAAA,IAAMgS,QAAQ,GAAO0N,GAAAA,GAAAA,SAAS,CAAC5L,IAAI,CAAC,GAAG,CAAG,CAAA;MAC1C,OAAO;AACL9B,QAAAA,QAAQ,EAARA,QAAQ;AACRhS,QAAAA,OAAO,EAAPA,OAAO;QACP4f,KAAK,EAAK5N,QAAQ,GAAIhS,GAAAA,GAAAA,OAAAA;OACvB,CAAA;AACH,KAAC,CAAC,CACH,CAAA;AACF,GAAA;AACD,EAAA,OAAOvB,MAAM,CAACC,IAAI,CAACyQ,WAAW,CAAC,CAACrQ,MAAM,CAAC,UAACoB,GAAG,EAAEtB,GAAG,EAAI;IAClD,IAAIA,GAAG,KAAKvB,UAAU,EAAE;AACtB,MAAA,IAAMwiB,WAAW,GAAI1Q,WAAiC,CAACvQ,GAAG,CAAC,CAAA;AAC3D,MAAA,IAAIuB,aAAa,CAAC0f,WAAW,CAAC,EAAE;AAC9B3f,QAAAA,GAAG,GAAGA,GAAG,CAAC2E,MAAM,CAACuK,WAAW,CAACyQ,WAAW,EAAAhb,EAAAA,CAAAA,MAAA,CAAM6a,SAAS,EAAA,CAAE9gB,GAAG,CAAA,CAAC,CAAC,CAAC,CAAA;AAChE,OAAA;AACF,KAAA;AACD,IAAA,OAAOsB,GAAG,CAAA;GACX,EAAEyf,SAAS,CAAC,CAAA;AACf;;ACnCA;;;;;;;;;;;;;;;;;;AAkBG;AACqB,SAAAG,aAAaA,CAAU7Q,MAA6B,EAAA;AAC1E,EAAA,IAAM8Q,OAAO,GAAG,IAAI3K,kBAAkB,EAAK,CAAA;EAC3C,IAAInG,MAAM,CAACtP,MAAM,EAAE;AACjBsP,IAAAA,MAAM,CAACzJ,OAAO,CAAC,UAACvG,KAAK,EAAI;AACvB,MAAA,IAAQ+S,QAAQ,GAAc/S,KAAK,CAA3B+S,QAAQ;QAAEhS,OAAO,GAAKf,KAAK,CAAjBe,OAAO,CAAA;AACzB;MACA,IAAMggB,IAAI,GAAGhO,QAAQ,KAAK,GAAG,GAAG,EAAE,GAAGiO,MAAM,CAACjO,QAAQ,CAAC,CAAA;AACrD;AACA;AACA,MAAA,IAAIgO,IAAI,CAACrgB,MAAM,GAAG,CAAC,IAAIqgB,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;AACrCA,QAAAA,IAAI,CAACvC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAClB,OAAA;AACD,MAAA,IAAIzd,OAAO,EAAE;AACX+f,QAAAA,OAAO,CAACnK,SAAS,CAAC5V,OAAO,EAAEggB,IAAI,CAAC,CAAA;AACjC,OAAA;AACH,KAAC,CAAC,CAAA;AACH,GAAA;EACD,OAAOD,OAAO,CAACG,WAAW,CAAA;AAC5B;;ACtCA;;;;AAIG;AACqB,SAAAC,kBAAkBA,CAAUC,YAA+B,EAAA;AACjF,EAAA,OAAO3hB,MAAM,CAACC,IAAI,CAAC0hB,YAAY,CAAC,CAACthB,MAAM,CAAC,UAACoB,GAAG,EAAEtB,GAAG,EAAI;IACnD,IAAIA,GAAG,KAAK,UAAU,EAAE;AACtB,MAAA,OAAOsB,GAAG,CAAA;AACX,KAAA,MAAM;AAAA,MAAA,IAAAG,SAAA,CAAA;AACL,MAAA,IAAMwf,WAAW,GAAIO,YAAkC,CAACxhB,GAAG,CAAC,CAAA;AAC5D,MAAA,IAAIuB,aAAa,CAAC0f,WAAW,CAAC,EAAE;AAAA,QAAA,IAAA7gB,SAAA,CAAA;AAC9B,QAAA,OAAAE,QAAA,CAAA,EAAA,EACKgB,GAAG,GAAAlB,SAAA,GAAAA,EAAAA,EAAAA,SAAA,CACLJ,GAAG,IAAGuhB,kBAAkB,CAACN,WAAW,CAAC,EAAA7gB,SAAA,EAAA,CAAA;AAEzC,OAAA;AACD,MAAA,OAAAE,QAAA,CAAA,EAAA,EAAYgB,GAAG,GAAAG,SAAA,GAAA,EAAA,EAAAA,SAAA,CAAGzB,GAAG,CAAA,GAAGihB,WAAW,EAAAxf,SAAA,EAAA,CAAA;AACpC,KAAA;GACF,EAAE,EAAoB,CAAC,CAAA;AAC1B;;ACtBA;;;;AAIG;AACqB,SAAAggB,UAAUA,CAACC,QAAgB,EAAA;EACjD,IAAI,CAACA,QAAQ,EAAE;AACb,IAAA,OAAO,EAAE,CAAA;AACV,GAAA;AAED;AACA;AACA;AAEA;AACA;AACA,EAAA,IAAM3H,IAAI,GAAG,IAAI/c,IAAI,CAAC0kB,QAAQ,CAAC,CAAA;EAE/B,IAAMC,IAAI,GAAG7C,GAAG,CAAC/E,IAAI,CAAC6H,WAAW,EAAE,EAAE,CAAC,CAAC,CAAA;AACvC,EAAA,IAAMC,EAAE,GAAG/C,GAAG,CAAC/E,IAAI,CAAC+H,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;EACtC,IAAMC,EAAE,GAAGjD,GAAG,CAAC/E,IAAI,CAACiI,OAAO,EAAE,EAAE,CAAC,CAAC,CAAA;EACjC,IAAMC,EAAE,GAAGnD,GAAG,CAAC/E,IAAI,CAACmI,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAA;EAClC,IAAMC,EAAE,GAAGrD,GAAG,CAAC/E,IAAI,CAACqI,UAAU,EAAE,EAAE,CAAC,CAAC,CAAA;EACpC,IAAMC,EAAE,GAAGvD,GAAG,CAAC/E,IAAI,CAACuI,UAAU,EAAE,EAAE,CAAC,CAAC,CAAA;EACpC,IAAMC,GAAG,GAAGzD,GAAG,CAAC/E,IAAI,CAACyI,eAAe,EAAE,EAAE,CAAC,CAAC,CAAA;AAE1C,EAAA,OAAUb,IAAI,GAAA,GAAA,GAAIE,EAAE,GAAA,GAAA,GAAIE,EAAE,GAAA,GAAA,GAAIE,EAAE,GAAA,GAAA,GAAIE,EAAE,GAAA,GAAA,GAAIE,EAAE,GAAA,GAAA,GAAIE,GAAG,CAAA;AACrD;;ACvBA;;;;;;;;AAQG;AACW,SAAUE,mBAAmBA,CACzCvS,cAAiC,EACjCC,qBAAsC,EAAA;EAEtC,IAAI,CAACA,qBAAqB,EAAE;AAC1B,IAAA,OAAOD,cAAc,CAAA;AACtB,GAAA;AACD,EAAA,IAAgBE,SAAS,GAAkCF,cAAc,CAAjEG,MAAM;IAA0BC,cAAc,GAAKJ,cAAc,CAA9CK,WAAW,CAAA;AACtC,EAAA,IAAIF,MAAM,GAAGG,WAAW,CAACL,qBAAqB,CAAC,CAAA;EAC/C,IAAII,WAAW,GAAGJ,qBAAqB,CAAA;AACvC,EAAA,IAAI,CAAC/C,OAAO,CAACkD,cAAc,CAAC,EAAE;IAC5BC,WAAW,GAAGxE,YAAY,CAACuE,cAAc,EAAEH,qBAAqB,EAAE,IAAI,CAAmB,CAAA;IACzFE,MAAM,GAAG,GAAApK,MAAA,CAAImK,SAAS,CAAEnK,CAAAA,MAAM,CAACoK,MAAM,CAAC,CAAA;AACvC,GAAA;EACD,OAAO;AAAEE,IAAAA,WAAW,EAAXA,WAAW;AAAEF,IAAAA,MAAM,EAANA,MAAAA;GAAQ,CAAA;AAChC;;AC3BA;;;;AAIG;AACH,SAASqS,qBAAqBA,CAA0CC,IAAO,EAAA;AAC7E,EAAA,KAAK,IAAM3iB,GAAG,IAAI2iB,IAAI,EAAE;IACtB,IAAMC,OAAO,GAAyBD,IAAI,CAAA;AAC1C,IAAA,IAAMllB,KAAK,GAAGmlB,OAAO,CAAC5iB,GAAG,CAAC,CAAA;AAC1B,IAAA,IAAIA,GAAG,KAAKb,OAAO,IAAI,OAAO1B,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC+E,UAAU,CAAC,GAAG,CAAC,EAAE;AACzEogB,MAAAA,OAAO,CAAC5iB,GAAG,CAAC,GAAGX,kBAAkB,GAAG5B,KAAK,CAAA;AAC1C,KAAA,MAAM;AACLmlB,MAAAA,OAAO,CAAC5iB,GAAG,CAAC,GAAG6iB,eAAe,CAAIplB,KAAK,CAAC,CAAA;AACzC,KAAA;AACF,GAAA;AACD,EAAA,OAAOklB,IAAI,CAAA;AACb,CAAA;AAEA;;;;AAIG;AACH,SAASG,oBAAoBA,CAA0CH,IAAS,EAAA;AAC9E,EAAA,KAAK,IAAIvf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuf,IAAI,CAAC5hB,MAAM,EAAEqC,CAAC,EAAE,EAAE;IACpCuf,IAAI,CAACvf,CAAC,CAAC,GAAGyf,eAAe,CAAIF,IAAI,CAACvf,CAAC,CAAC,CAAM,CAAA;AAC3C,GAAA;AACD,EAAA,OAAOuf,IAAI,CAAA;AACb,CAAA;AAEA;;;;;AAKG;AACqB,SAAAE,eAAeA,CAA0CE,UAAa,EAAA;AAC5F,EAAA,IAAIA,UAAU,CAACC,WAAW,KAAKnjB,MAAM,EAAE;AACrC,IAAA,OAAO6iB,qBAAqB,CAAApiB,QAAA,CAASyiB,EAAAA,EAAAA,UAAU,CAAE,CAAC,CAAA;AACnD,GAAA;AACD,EAAA,IAAI9lB,KAAK,CAACC,OAAO,CAAC6lB,UAAU,CAAC,EAAE;AAC7B,IAAA,OAAOD,oBAAoB,CAAA7c,EAAAA,CAAAA,MAAA,CAAQ8c,UAAU,CAAC,CAAC,CAAA;AAChD,GAAA;AACD,EAAA,OAAOA,UAAU,CAAA;AACnB;;AC/CA;;;;;AAKG;IACSE,mBAmEX;AAnED,CAAA,UAAYA,kBAAkB,EAAA;AAC5B;AACAA,EAAAA,kBAAA,CAAA,gBAAA,CAAA,GAAA,MAAuB,CAAA;AACvB;AACAA,EAAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,0BAAyC,CAAA;AACzC;AACAA,EAAAA,kBAAA,CAAA,UAAA,CAAA,GAAA,KAAgB,CAAA;AAChB;AACAA,EAAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,IAAc,CAAA;AACd;AACAA,EAAAA,kBAAA,CAAA,YAAA,CAAA,GAAA,OAAoB,CAAA;AACpB;AACAA,EAAAA,kBAAA,CAAA,aAAA,CAAA,GAAA,QAAsB,CAAA;AACtB;AACAA,EAAAA,kBAAA,CAAA,kBAAA,CAAA,GAAA,WAA8B,CAAA;AAC9B;AACAA,EAAAA,kBAAA,CAAA,WAAA,CAAA,GAAA,KAAiB,CAAA;AACjB;AACAA,EAAAA,kBAAA,CAAA,eAAA,CAAA,GAAA,UAA0B,CAAA;AAC1B;AACAA,EAAAA,kBAAA,CAAA,YAAA,CAAA,GAAA,MAAmB,CAAA;AACnB;AACAA,EAAAA,kBAAA,CAAA,gBAAA,CAAA,GAAA,WAA4B,CAAA;AAC5B;AACAA,EAAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,SAAwB,CAAA;AACxB;AACAA,EAAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,QAAuB,CAAA;AACvB;AACAA,EAAAA,kBAAA,CAAA,UAAA,CAAA,GAAA,KAAgB,CAAA;AAChB;AACAA,EAAAA,kBAAA,CAAA,YAAA,CAAA,GAAA,OAAoB,CAAA;AACpB;AACAA,EAAAA,kBAAA,CAAA,eAAA,CAAA,GAAA,eAA+B,CAAA;AAC/B;AACAA,EAAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,SAAwB,CAAA;AACxB;AACAA,EAAAA,kBAAA,CAAA,oBAAA,CAAA,GAAA,qBAA0C,CAAA;AAC1C;AACAA,EAAAA,kBAAA,CAAA,oBAAA,CAAA,GAAA,qBAA0C,CAAA;AAC1C;AACA;AACAA,EAAAA,kBAAA,CAAA,kBAAA,CAAA,GAAA,uBAA0C,CAAA;AAC1C;AACAA,EAAAA,kBAAA,CAAA,cAAA,CAAA,GAAA,WAA0B,CAAA;AAC1B;;AAEG;AACHA,EAAAA,kBAAA,CAAA,mBAAA,CAAA,GAAA,cAAkC,CAAA;AAClC;AACAA,EAAAA,kBAAA,CAAA,UAAA,CAAA,GAAA,QAAmB,CAAA;AACnB;AACA;AACAA,EAAAA,kBAAA,CAAA,oBAAA,CAAA,GAAA,yDAA4E,CAAA;AAC5E;AACAA,EAAAA,kBAAA,CAAA,kBAAA,CAAA,GAAA,2BAA8C,CAAA;AAC9C;AACAA,EAAAA,kBAAA,CAAA,wBAAA,CAAA,GAAA,qDAA8E,CAAA;AAC9E;AACAA,EAAAA,kBAAA,CAAA,4BAAA,CAAA,GAAA,wCAAqE,CAAA;AACrE;;AAEG;AACHA,EAAAA,kBAAA,CAAA,iCAAA,CAAA,GAAA,kEAAoG,CAAA;AACpG;;AAEG;AACHA,EAAAA,kBAAA,CAAA,WAAA,CAAA,GAAA,oCAAgD,CAAA;AAClD,CAAC,EAnEWA,kBAAkB,KAAlBA,kBAAkB,GAmE7B,EAAA,CAAA,CAAA;;ACjDD;;;;;;AAMG;AANH,IAOqBC,eAAe,gBAAA,YAAA;AASlC;;;;AAIG;EACH,SAAAA,eAAAA,CAAY5gB,UAAa,EAAA;AAXzB;AAAA,IAAA,IAAA,CACSA,UAAU,GAAA,KAAA,CAAA,CAAA;AAEnB;IAAA,IACA6gB,CAAAA,SAAS,GAAiB,EAAE,CAAA;IAQ1B,IAAI,CAAC7gB,UAAU,GAAGA,UAAU,CAAA;IAC5B,IAAI,CAAC8gB,SAAS,CAAC9gB,UAAU,EAAEsZ,aAAa,CAAItZ,UAAU,CAAC,CAAC,CAAA;AAC1D,GAAA;AAEA;;;;;;AAMG;AANH,EAAA,IAAAiR,MAAA,GAAA2P,eAAA,CAAA1P,SAAA,CAAA;EAAAD,MAAA,CAOA6P,SAAS,GAAT,SAAAA,UAAUhmB,MAAS,EAAEqe,IAAY,EAAA;AAAA,IAAA,IAAArb,SAAA,CAAA;IAC/B,IAAMJ,GAAG,GAAG6C,GAAG,CAACzF,MAAM,EAAEsB,MAAM,EAAE+c,IAAI,CAAC,CAAA;AACrC,IAAA,IAAM4H,gBAAgB,GAAA/iB,QAAA,CAAA,EAAA,EAAQlD,MAAM,GAAAgD,SAAA,GAAAA,EAAAA,EAAAA,SAAA,CAAG1B,MAAM,CAAA,GAAGsB,GAAG,EAAAI,SAAA,EAAE,CAAA;AACrD,IAAA,IAAMkjB,QAAQ,GAAG,IAAI,CAACH,SAAS,CAACnjB,GAAG,CAAC,CAAA;IACpC,IAAI,CAACsjB,QAAQ,EAAE;AACb,MAAA,IAAI,CAACH,SAAS,CAACnjB,GAAG,CAAC,GAAGqjB,gBAAgB,CAAA;KACvC,MAAM,IAAI,CAAC5Q,OAAO,CAAC6Q,QAAQ,EAAED,gBAAgB,CAAC,EAAE;AAC/C/lB,MAAAA,OAAO,CAAC+C,KAAK,CAAC,kBAAkB,EAAEwb,IAAI,CAACC,SAAS,CAACwH,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AACpEhmB,MAAAA,OAAO,CAAC+C,KAAK,CAAC,aAAa,EAAEwb,IAAI,CAACC,SAAS,CAACuH,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;AACvE,MAAA,MAAM,IAAI3gB,KAAK,CACoC1C,gDAAAA,GAAAA,GAAG,mFAAgF,CACrI,CAAA;AACF,KAAA;AACH,GAAA;AAEA;AACG,MADH;AAAAuT,EAAAA,MAAA,CAEAgQ,YAAY,GAAZ,SAAAA,eAAY;IACV,OAAO,IAAI,CAACJ,SAAS,CAAA;AACvB,GAAA;AAEA;;;;;;;AAOG,MAPH;EAAA5P,MAAA,CAQA/P,OAAO,GAAP,SAAAA,OAAAA,CAAQpG,MAAS,EAAEomB,SAAY,EAAElhB,UAAa,EAAA;IAC5C,IAAI,CAACmQ,OAAO,CAACnQ,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC,EAAE;AACzC,MAAA,MAAM,IAAII,KAAK,CAAC,gGAAgG,CAAC,CAAA;AAClH,KAAA;IACD,IAAI,CAAC0gB,SAAS,CAAChmB,MAAM,EAAEwe,aAAa,CAAIxe,MAAM,CAAC,CAAC,CAAA;AAEhD,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;AAEA;;;;AAIG,MAJH;EAAAmW,MAAA,CAKAkQ,aAAa,GAAb,SAAAA,cAA4BnR,OAAU,EAAEkR,SAAa,EAAA;AACnD,IAAA,MAAM,IAAI9gB,KAAK,CAAC,yEAAyE,CAAC,CAAA;AAC5F,GAAA;AAEA;;;;AAIG,MAJH;EAAA6Q,MAAA,CAKA/C,WAAW,GAAX,SAAAA,YAAYkT,YAA6B,EAAEC,UAAqB,EAAA;AAC9D,IAAA,MAAM,IAAIjhB,KAAK,CAAC,uEAAuE,CAAC,CAAA;AAC1F,GAAA;AAEA;;;;;;;;AAQG,MARH;AAAA6Q,EAAAA,MAAA,CASAqQ,gBAAgB,GAAhB,SAAAA,iBACEJ,SAAY,EACZlR,OAAU,EACVuR,eAA0C,EAC1CC,gBAA4C,EAC5CC,SAA6B,EAAA;AAE7B,IAAA,MAAM,IAAIrhB,KAAK,CAAC,4EAA4E,CAAC,CAAA;GAC9F,CAAA;AAAA,EAAA,OAAAwgB,eAAA,CAAA;AAAA,CAAA,EAAA;;AC1HH;;;;;;;;;AASG;AACH,SAASc,WAAWA,CAClB9gB,SAAmC,EACnC+gB,WAAgB,EAChB3hB,UAAa,EACblF,MAAS,EAAA;AAET,EAAA,IAAM4I,OAAO,GAAGX,sBAAsB,CAAUnC,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAE5E,SAAS,EAAE,IAAI,CAAC,CAAA;AAC/FsI,EAAAA,OAAO,CAACY,OAAO,CAAC,UAACxJ,MAAM,EAAI;AACzB,IAAA,IAAMmV,eAAe,GAAG0R,WAAW,CAACzR,SAAS,CAAC,UAAC/G,IAAI,EAAA;AAAA,MAAA,OAAKgH,OAAO,CAAChH,IAAI,EAAErO,MAAM,CAAC,CAAA;KAAC,CAAA,CAAA;AAC9E,IAAA,IAAImV,eAAe,KAAK,CAAC,CAAC,EAAE;AAC1B0R,MAAAA,WAAW,CAAC5iB,IAAI,CAACjE,MAAM,CAAC,CAAA;MACxB,IAAM8mB,UAAU,GAAGhc,wBAAwB,CAAUhF,SAAS,EAAE9F,MAAM,EAAEkF,UAAU,EAAE,IAAI,CAAC,CAAA;AACzF4hB,MAAAA,UAAU,CAACtd,OAAO,CAAC,UAACT,CAAC,EAAI;QACvB,IAAInH,cAAc,IAAImH,CAAC,IAAIA,CAAC,CAACnH,cAAc,CAAC,EAAE;UAC5C4H,OAAO,CAACxJ,MAAM,CAAC4B,cAAc,CAAC,EAAE,UAACvB,KAAK,EAAI;YACxCumB,WAAW,CAAU9gB,SAAS,EAAE+gB,WAAW,EAAE3hB,UAAU,EAAE7E,KAAU,CAAC,CAAA;AACtE,WAAC,CAAC,CAAA;AACH,SAAA;AACH,OAAC,CAAC,CAAA;MACF,IAAImB,SAAS,IAAIxB,MAAM,IAAI,CAACH,KAAK,CAACC,OAAO,CAACE,MAAM,CAACmO,KAAK,CAAC,IAAI,OAAOnO,MAAM,CAACmO,KAAK,KAAK,SAAS,EAAE;QAC5FyY,WAAW,CAAU9gB,SAAS,EAAE+gB,WAAW,EAAE3hB,UAAU,EAAElF,MAAM,CAACmO,KAAU,CAAC,CAAA;AAC5E,OAAA;AACF,KAAA;AACH,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA;;;;;AAKG;AACqB,SAAA4Y,YAAYA,CAClC7hB,UAAa,EAAA;AAEb,EAAA,IAAMY,SAAS,GAAG,IAAIggB,eAAe,CAAU5gB,UAAU,CAAC,CAAA;EAC1D,IAAM2hB,WAAW,GAAQ,EAAE,CAAA;EAE3BD,WAAW,CAAC9gB,SAAS,EAAE+gB,WAAW,EAAE3hB,UAAU,EAAEA,UAAU,CAAC,CAAA;AAE3D,EAAA,OAAOY,SAAS,CAACqgB,YAAY,EAAE,CAAA;AACjC;;;;"}