{"version":3,"file":"utils.cjs.production.min.js","sources":["../src/isObject.ts","../src/constants.ts","../src/getUiOptions.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/schema/getFirstMatchingOption.ts","../src/getDiscriminatorFieldFromSchema.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/mergeSchemas.ts","../src/schema/retrieveSchema.ts","../src/schema/getClosestMatchingOption.ts","../src/schema/getDefaultFormState.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/sanitizeDataForNewSchema.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/replaceStringParameters.ts","../src/enumOptionsValueForIndex.ts","../src/enumOptionsIsSelected.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getSubmitButtonOptions.ts","../src/enums.ts","../src/getWidget.tsx","../src/hashForSchema.ts","../src/idGenerators.ts","../src/toConstant.ts","../src/pad.ts","../src/toErrorList.ts","../src/parser/ParserValidator.ts","../src/parser/schemaParser.ts","../src/allowAdditionalItems.ts","../src/asNumber.ts","../src/canExpand.ts","../src/createErrorHandler.ts","../src/dataURItoBlob.ts","../src/englishStringTranslator.ts","../src/enumOptionsDeselectValue.ts","../src/enumOptionsIndexForValue.ts","../src/enumOptionsSelectValue.ts","../src/getInputProps.ts","../src/getTemplate.ts","../src/hasWidget.ts","../src/labelValue.ts","../src/localToUTC.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/toErrorSchema.ts","../src/unwrapErrorHandler.ts","../src/utcToLocal.ts","../src/validationDataMerge.ts","../src/withIdRefPrefix.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== 'undefined' && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== 'undefined' && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === 'object' && thing !== null && !Array.isArray(thing);\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = '__additional_property';\nexport const ADDITIONAL_PROPERTIES_KEY = 'additionalProperties';\nexport const ALL_OF_KEY = 'allOf';\nexport const ANY_OF_KEY = 'anyOf';\nexport const CONST_KEY = 'const';\nexport const DEFAULT_KEY = 'default';\nexport const DEFINITIONS_KEY = 'definitions';\nexport const DEPENDENCIES_KEY = 'dependencies';\nexport const ENUM_KEY = 'enum';\nexport const ERRORS_KEY = '__errors';\nexport const ID_KEY = '$id';\nexport const IF_KEY = 'if';\nexport const ITEMS_KEY = 'items';\nexport const JUNK_OPTION_ID = '_$junk_option_schema_id$_';\nexport const NAME_KEY = '$name';\nexport const ONE_OF_KEY = 'oneOf';\nexport const PROPERTIES_KEY = 'properties';\nexport const REQUIRED_KEY = 'required';\nexport const SUBMIT_BTN_OPTIONS_KEY = 'submitButtonOptions';\nexport const REF_KEY = '$ref';\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = '__rjsf_additionalProperties';\nexport const ROOT_SCHEMA_PREFIX = '__rjsf_rootSchema';\nexport const UI_FIELD_KEY = 'ui:field';\nexport const UI_WIDGET_KEY = 'ui:widget';\nexport const UI_OPTIONS_KEY = 'ui:options';\nexport const UI_GLOBAL_OPTIONS_KEY = 'ui:globalOptions';\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from './constants';\nimport isObject from './isObject';\nimport { FormContextType, GlobalUISchemaOptions, RJSFSchema, StrictRJSFSchema, UIOptionsType, UiSchema } from './types';\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off. Any `globalOptions` will always be returned, unless they are overridden by options in the `uiSchema`.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - An object containing all the `ui:xxx` options with the `ui:` stripped off along with all `globalOptions`\n */\nexport default function getUiOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  uiSchema: UiSchema<T, S, F> = {},\n  globalOptions: GlobalUISchemaOptions = {}\n): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf('ui:') === 0)\n    .reduce(\n      (options, key) => {\n        const value = uiSchema[key];\n        if (key === UI_WIDGET_KEY && isObject(value)) {\n          console.error('Setting options via ui:widget object is no longer supported, use ui:options instead');\n          return options;\n        }\n        if (key === UI_OPTIONS_KEY && isObject(value)) {\n          return { ...options, ...value };\n        }\n        return { ...options, [key.substring(3)]: value };\n      },\n      { ...globalOptions }\n    );\n}\n","import isEqualWith from 'lodash/isEqualWith';\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === 'function' && typeof other === 'function') {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from 'jsonpointer';\nimport omit from 'lodash/omit';\n\nimport { REF_KEY } from './constants';\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(key: string, object: GenericObjectType) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<S extends StrictRJSFSchema = RJSFSchema>(\n  $ref?: string,\n  rootSchema: S = {} as S\n): S {\n  let ref = $ref || '';\n  if (ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { PROPERTIES_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If we have a discriminator field, then we will use this to make the determination\n    if (discriminatorField && has(option, [PROPERTIES_KEY, discriminatorField])) {\n      const value = get(formData, discriminatorField);\n      const discriminator = get(option, [PROPERTIES_KEY, discriminatorField], {});\n      if (validator.isValid(discriminator, value, rootSchema)) {\n        return i;\n      }\n    } else if (option[PROPERTIES_KEY]) {\n      // If the schema describes an object then we need to add slightly more\n      // strict matching to the schema, because unless the schema uses the\n      // \"requires\" keyword, an object will match the schema as long as it\n      // doesn't have matching keys with a conflicting type. To do this we use an\n      // \"anyOf\" with an array of requires. This augmentation expresses that the\n      // schema should match if any of the keys in the schema are present on the\n      // object and pass validation.\n      //\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option[PROPERTIES_KEY]).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","import getMatchingOption from './getMatchingOption';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S,\n  discriminatorField?: string\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema, discriminatorField);\n}\n","import get from 'lodash/get';\nimport isString from 'lodash/isString';\n\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the `discriminator.propertyName` when defined in the `schema` if it is a string. A warning is generated when\n * it is not a string. Returns `undefined` when a valid discriminator is not present.\n *\n * @param schema - The schema from which the discriminator is potentially obtained\n * @returns - The `discriminator.propertyName` if it exists in the schema, otherwise `undefined`\n */\nexport default function getDiscriminatorFieldFromSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  let discriminator: string | undefined;\n  const maybeString = get(schema, 'discriminator.propertyName', undefined);\n  if (isString(maybeString)) {\n    discriminator = maybeString;\n  } else if (maybeString !== undefined) {\n    console.warn(`Expecting discriminator to be a string, got \"${typeof maybeString}\" instead`);\n  }\n  return discriminator;\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return 'array';\n  }\n  if (typeof value === 'string') {\n    return 'string';\n  }\n  if (value == null) {\n    return 'null';\n  }\n  if (typeof value === 'boolean') {\n    return 'boolean';\n  }\n  if (!isNaN(value)) {\n    return 'number';\n  }\n  if (typeof value === 'object') {\n    return 'object';\n  }\n  // Default to string if we can't figure it out\n  return 'string';\n}\n","import guessType from './guessType';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return 'string';\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return 'object';\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes('null')) {\n    type = type.find((type) => type !== 'null');\n  }\n\n  return type;\n}\n","import union from 'lodash/union';\n\nimport { REQUIRED_KEY } from './constants';\nimport getSchemaType from './getSchemaType';\nimport isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(obj1: GenericObjectType, obj2: GenericObjectType) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === 'object' || getSchemaType(obj2) === 'object') &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from 'lodash/get';\nimport set from 'lodash/set';\nimport times from 'lodash/times';\nimport mergeAllOf, { Options } from 'json-schema-merge-allof';\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  DEPENDENCIES_KEY,\n  IF_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from '../constants';\nimport findSchemaDefinition, { splitKeyElementFromObject } from '../findSchemaDefinition';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport guessType from '../guessType';\nimport isObject from '../isObject';\nimport mergeSchemas from '../mergeSchemas';\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getFirstMatchingOption from './getFirstMatchingOption';\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S = {} as S, rawFormData?: T): S {\n  return retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, rawFormData)[0];\n}\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema. If `expandAllBranches` is true, then the `retrieveSchemaInteral()` results for both\n * conditions will be returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A list of schemas with the appropriate conditions resolved, possibly with all branches expanded\n */\nexport function resolveCondition<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const { if: expression, then, else: otherwise, ...resolvedSchemaLessConditional } = schema;\n\n  const conditionValue = validator.isValid(expression as S, formData, rootSchema);\n  let resolvedSchemas = [resolvedSchemaLessConditional as S];\n  let schemas: S[] = [];\n  if (expandAllBranches) {\n    if (then && typeof then !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, then as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n    if (otherwise && typeof otherwise !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, otherwise as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n  } else {\n    const conditionalSchema = conditionValue ? then : otherwise;\n    if (conditionalSchema && typeof conditionalSchema !== 'boolean') {\n      schemas = schemas.concat(\n        retrieveSchemaInternal<T, S, F>(validator, conditionalSchema as S, rootSchema, formData, expandAllBranches)\n      );\n    }\n  }\n  if (schemas.length) {\n    resolvedSchemas = schemas.map((s) => mergeSchemas(resolvedSchemaLessConditional, s) as S);\n  }\n  return resolvedSchemas.flatMap((s) =>\n    retrieveSchemaInternal<T, S, F>(validator, s, rootSchema, formData, expandAllBranches)\n  );\n}\n\n/** Given a list of lists of allOf, anyOf or oneOf values, create a list of lists of all permutations of the values. The\n * `listOfLists` is expected to be all resolved values of the 1st...nth schemas within an `allOf`, `anyOf` or `oneOf`.\n * From those lists, build a matrix for each `xxxOf` where there is more than one schema for a row in the list of lists.\n *\n * For example:\n * - If there are three xxxOf rows (A, B, C) and they have been resolved such that there is only one A, two B and three\n *   C schemas then:\n *   - The permutation for the first row is `[[A]]`\n *   - The permutations for the second row are `[[A,B1], [A,B2]]`\n *   - The permutations for the third row are `[[A,B1,C1], [A,B1,C2], [A,B1,C3], [A,B2,C1], [A,B2,C2], [A,B2,C3]]`\n *\n * @param listOfLists - The list of lists of elements that represent the allOf, anyOf or oneOf resolved values in order\n * @returns - The list of all permutations of schemas for a set of `xxxOf`s\n */\nexport function getAllPermutationsOfXxxOf<S extends StrictRJSFSchema = RJSFSchema>(listOfLists: S[][]) {\n  const allPermutations: S[][] = listOfLists.reduce<S[][]>(\n    (permutations, list) => {\n      // When there are more than one set of schemas for a row, duplicate the set of permutations and add in the values\n      if (list.length > 1) {\n        return list.flatMap((element) => times(permutations.length, (i) => [...permutations[i]].concat(element)));\n      }\n      // Otherwise just push in the single value into the current set of permutations\n      permutations.forEach((permutation) => permutation.push(list[0]));\n      return permutations;\n    },\n    [[]] as S[][] // Start with an empty list\n  );\n\n  return allPermutations;\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `resolveDependencies()` helper calls. If\n * `expandAllBranches` is true, then all possible dependencies and/or allOf branches are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas having its references, dependencies and allOf schemas resolved\n */\nexport function resolveSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S, F>(validator, schema, rootSchema, expandAllBranches, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchemas = resolveDependencies<T, S, F>(validator, schema, rootSchema, expandAllBranches, formData);\n    return resolvedSchemas.flatMap((s) => {\n      return retrieveSchemaInternal<T, S, F>(validator, s, rootSchema, formData, expandAllBranches);\n    });\n  }\n  if (ALL_OF_KEY in schema && Array.isArray(schema.allOf)) {\n    const allOfSchemaElements: S[][] = schema.allOf.map((allOfSubschema) =>\n      retrieveSchemaInternal<T, S, F>(validator, allOfSubschema as S, rootSchema, formData, expandAllBranches)\n    );\n    const allPermutations = getAllPermutationsOfXxxOf<S>(allOfSchemaElements);\n    return allPermutations.map((permutation) => ({ ...schema, allOf: permutation }));\n  }\n  // No $ref or dependencies or allOf attribute was found, returning the original schema.\n  return [schema];\n}\n\n/** Resolves references within a schema and then returns the `retrieveSchemaInternal()` of the resolved schema. Passes\n * the `expandAllBranches` flag down to the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list schemas retrieved after having all references resolved\n */\nexport function resolveReference<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Retrieve the referenced schema definition.\n  const refSchema = findSchemaDefinition<S>($ref, rootSchema);\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchemaInternal<T, S, F>(\n    validator,\n    { ...refSchema, ...localSchema },\n    rootSchema,\n    formData,\n    expandAllBranches\n  );\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, theSchema: S, rootSchema?: S, aFormData?: T): S {\n  // Clone the schema so that we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType = aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S['additionalProperties'] = {};\n    if (typeof schema.additionalProperties !== 'boolean') {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S, F>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if ('type' in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else if (ANY_OF_KEY in schema.additionalProperties! || ONE_OF_KEY in schema.additionalProperties!) {\n        additionalProperties = {\n          type: 'object',\n          ...schema.additionalProperties,\n        };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Internal handler that retrieves an expanded schema that has had all of its conditions, additional properties,\n * references and dependencies resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData`\n * that is used to do the potentially recursive resolution. If `expandAllBranches` is true, then all possible branches\n * of the schema and its references, conditions and dependencies are returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @param [expandAllBranches=false] - Flag, if true, will return all possible branches of conditions, any/oneOf and\n *          dependencies as a list of schemas\n * @returns - The schema(s) resulting from having its conditions, additional properties, references and dependencies\n *          resolved. Multiple schemas may be returned if `expandAllBranches` is true.\n */\nexport function retrieveSchemaInternal<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, rawFormData?: T, expandAllBranches = false): S[] {\n  if (!isObject(schema)) {\n    return [{} as S];\n  }\n  const resolvedSchemas = resolveSchema<T, S, F>(validator, schema, rootSchema, expandAllBranches, rawFormData);\n  return resolvedSchemas.flatMap((s: S) => {\n    let resolvedSchema = s;\n    if (IF_KEY in resolvedSchema) {\n      return resolveCondition<T, S, F>(validator, resolvedSchema, rootSchema, expandAllBranches, rawFormData as T);\n    }\n    if (ALL_OF_KEY in schema) {\n      try {\n        resolvedSchema = mergeAllOf(s, {\n          deep: false,\n        } as Options) as S;\n      } catch (e) {\n        console.warn('could not merge subschemas in allOf:\\n', e);\n        const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n        return resolvedSchemaWithoutAllOf as S;\n      }\n    }\n    const hasAdditionalProperties =\n      ADDITIONAL_PROPERTIES_KEY in resolvedSchema && resolvedSchema.additionalProperties !== false;\n    if (hasAdditionalProperties) {\n      return stubExistingAdditionalProperties<T, S, F>(validator, resolvedSchema, rootSchema, rawFormData as T);\n    }\n\n    return resolvedSchema;\n  });\n}\n\n/** Resolves an `anyOf` or `oneOf` within a schema (if present) to the list of schemas returned from\n * `retrieveSchemaInternal()` for the best matching option. If `expandAllBranches` is true, then a list of schemas for ALL\n * options are retrieved and returned.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema, defaults to an empty object\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function resolveAnyOrOneOfSchemas<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, expandAllBranches: boolean, rawFormData?: T) {\n  let anyOrOneOf: S[] | undefined;\n  if (Array.isArray(schema.oneOf)) {\n    anyOrOneOf = schema.oneOf as S[];\n  } else if (Array.isArray(schema.anyOf)) {\n    anyOrOneOf = schema.anyOf as S[];\n  }\n  if (anyOrOneOf) {\n    // Ensure that during expand all branches we pass an object rather than undefined so that all options are interrogated\n    const formData = rawFormData === undefined && expandAllBranches ? ({} as T) : rawFormData;\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    anyOrOneOf = anyOrOneOf.map((s) => {\n      if (REF_KEY in s) {\n        // For this ref situation, don't expand all branches and just pick the first/only schema result\n        return resolveReference<T, S, F>(validator, s, rootSchema, false, formData)[0];\n      }\n      return s;\n    });\n    // Call this to trigger the set of isValid() calls that the schema parser will need\n    const option = getFirstMatchingOption<T, S, F>(validator, formData, anyOrOneOf, rootSchema, discriminator);\n    if (expandAllBranches) {\n      return anyOrOneOf;\n    }\n    schema = anyOrOneOf[option] as S;\n  }\n  return [schema];\n}\n\n/** Resolves dependencies within a schema and its 'anyOf/oneOf' children. Passes the `expandAllBranches` flag down to\n * the `resolveAnyOrOneOfSchema()` and `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The list of schemas with their dependencies resolved\n */\nexport function resolveDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  const resolvedSchemas = resolveAnyOrOneOfSchemas<T, S, F>(\n    validator,\n    remainingSchema as S,\n    rootSchema,\n    expandAllBranches,\n    formData\n  );\n  return resolvedSchemas.flatMap((resolvedSchema) =>\n    processDependencies<T, S, F>(validator, dependencies, resolvedSchema, rootSchema, expandAllBranches, formData)\n  );\n}\n\n/** Processes all the `dependencies` recursively into the list of `resolvedSchema`s as needed. Passes the\n * `expandAllBranches` flag down to the `withDependentSchema()` and the recursive `processDependencies()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  dependencies: S['dependencies'],\n  resolvedSchema: S,\n  rootSchema: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  let schemas = [resolvedSchema];\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (!expandAllBranches && get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (resolvedSchema.properties && !(dependencyKey in resolvedSchema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schemas[0] = withDependentProperties<S>(resolvedSchema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schemas = withDependentSchema<T, S, F>(\n        validator,\n        resolvedSchema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        expandAllBranches,\n        formData\n      );\n    }\n    return schemas.flatMap((schema) =>\n      processDependencies<T, S, F>(validator, remainingDependencies, schema, rootSchema, expandAllBranches, formData)\n    );\n  }\n  return schemas;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionallyRequired?: string[]\n) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references. Passes the `expandAllBranches` flag\n * down to the `retrieveSchemaInternal()`, `resolveReference()` and `withExactlyOneSubschema()` helper calls.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData]- The current formData to assist retrieving a schema\n * @returns - The list of schemas with the dependent schema resolved into them\n */\nexport function withDependentSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const dependentSchemas = retrieveSchemaInternal<T, S, F>(\n    validator,\n    dependencyValue,\n    rootSchema,\n    formData,\n    expandAllBranches\n  );\n  return dependentSchemas.flatMap((dependent) => {\n    const { oneOf, ...dependentSchema } = dependent;\n    schema = mergeSchemas(schema, dependentSchema) as S;\n    // Since it does not contain oneOf, we return the original schema.\n    if (oneOf === undefined) {\n      return schema;\n    }\n    // Resolve $refs inside oneOf.\n    const resolvedOneOfs = oneOf.map((subschema) => {\n      if (typeof subschema === 'boolean' || !(REF_KEY in subschema)) {\n        return [subschema as S];\n      }\n      return resolveReference<T, S, F>(validator, subschema as S, rootSchema, expandAllBranches, formData);\n    });\n    const allPermutations = getAllPermutationsOfXxxOf(resolvedOneOfs);\n    return allPermutations.flatMap((resolvedOneOf) =>\n      withExactlyOneSubschema<T, S, F>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        resolvedOneOf,\n        expandAllBranches,\n        formData\n      )\n    );\n  });\n}\n\n/** Returns a list of `schema`s with the best choice from the `oneOf` options merged into it. If `expandAllBranches` is\n * true, then a list of schemas for ALL options are retrieved and returned. Passes the `expandAllBranches` flag down to\n * the `retrieveSchemaInternal()` helper call.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param expandAllBranches - Flag, if true, will return all possible branches of conditions, any/oneOf and dependencies\n *          as a list of schemas\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - Either an array containing the best matching option or all options if `expandAllBranches` is true\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S['oneOf'],\n  expandAllBranches: boolean,\n  formData?: T\n): S[] {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === 'boolean' || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: 'object',\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      return validator.isValid(conditionSchema, formData, rootSchema) || expandAllBranches;\n    }\n    return false;\n  });\n\n  if (!expandAllBranches && validSubschemas!.length !== 1) {\n    console.warn(\"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\");\n    return [schema];\n  }\n  return validSubschemas.flatMap((s) => {\n    const subschema: S = s as S;\n    const [dependentSubschema] = splitKeyElementFromObject(dependencyKey, subschema.properties as GenericObjectType);\n    const dependentSchema = { ...subschema, properties: dependentSubschema };\n    const schemas = retrieveSchemaInternal<T, S, F>(\n      validator,\n      dependentSchema,\n      rootSchema,\n      formData,\n      expandAllBranches\n    );\n    return schemas.map((s) => mergeSchemas(schema, s) as S);\n  });\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport isString from 'lodash/isString';\nimport reduce from 'lodash/reduce';\nimport times from 'lodash/times';\n\nimport getFirstMatchingOption from './getFirstMatchingOption';\nimport retrieveSchema from './retrieveSchema';\nimport { ONE_OF_KEY, REF_KEY, JUNK_OPTION_ID } from '../constants';\nimport guessType from '../guessType';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION: StrictRJSFSchema = {\n  type: 'object',\n  $id: JUNK_OPTION_ID,\n  properties: {\n    __not_really_there__: {\n      type: 'number',\n    },\n  },\n};\n\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  schema?: S,\n  formData: any = {}\n): number {\n  let totalScore = 0;\n  if (schema) {\n    if (isObject(schema.properties)) {\n      totalScore += reduce(\n        schema.properties,\n        (score, value, key) => {\n          const formValue = get(formData, key);\n          if (typeof value === 'boolean') {\n            return score;\n          }\n          if (has(value, REF_KEY)) {\n            const newSchema = retrieveSchema<T, S, F>(validator, value as S, rootSchema, formValue);\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, newSchema, formValue || {});\n          }\n          if (has(value, ONE_OF_KEY) && formValue) {\n            return (\n              score + getClosestMatchingOption<T, S, F>(validator, rootSchema, formValue, get(value, ONE_OF_KEY) as S[])\n            );\n          }\n          if (value.type === 'object') {\n            return score + calculateIndexScore<T, S, F>(validator, rootSchema, value as S, formValue || {});\n          }\n          if (value.type === guessType(formValue)) {\n            // If the types match, then we bump the score by one\n            let newScore = score + 1;\n            if (value.default) {\n              // If the schema contains a readonly default value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.default ? 1 : -1;\n            } else if (value.const) {\n              // If the schema contains a const value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.const ? 1 : -1;\n            }\n            // TODO eventually, deal with enums/arrays\n            return newScore;\n          }\n          return score;\n        },\n        0\n      );\n    } else if (isString(schema.type) && schema.type === guessType(formData)) {\n      totalScore += 1;\n    }\n  }\n  return totalScore;\n}\n\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n *          determine which option is selected\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  formData: T | undefined,\n  options: S[],\n  selectedOption = -1,\n  discriminatorField?: string\n): number {\n  // Reduce the array of options down to a list of the indexes that are considered matching options\n  const allValidIndexes = options.reduce((validList: number[], option, index: number) => {\n    const testOptions: S[] = [JUNK_OPTION as S, option];\n    const match = getFirstMatchingOption<T, S, F>(validator, formData, testOptions, rootSchema, discriminatorField);\n    // The match is the real option, so add its index to list of valid indexes\n    if (match === 1) {\n      validList.push(index);\n    }\n    return validList;\n  }, []);\n\n  // There is only one valid index, so return it!\n  if (allValidIndexes.length === 1) {\n    return allValidIndexes[0];\n  }\n  if (!allValidIndexes.length) {\n    // No indexes were valid, so we'll score all the options, add all the indexes\n    times(options.length, (i) => allValidIndexes.push(i));\n  }\n  type BestType = { bestIndex: number; bestScore: number };\n  // Score all the options in the list of valid indexes and return the index with the best score\n  const { bestIndex }: BestType = allValidIndexes.reduce(\n    (scoreData: BestType, index: number) => {\n      const { bestScore } = scoreData;\n      let option = options[index];\n      if (has(option, REF_KEY)) {\n        option = retrieveSchema<T, S, F>(validator, option, rootSchema, formData);\n      }\n      const score = calculateIndexScore(validator, rootSchema, option, formData);\n      if (score > bestScore) {\n        return { bestIndex: index, bestScore: score };\n      }\n      return scoreData;\n    },\n    { bestIndex: selectedOption, bestScore: 0 }\n  );\n  return bestIndex;\n}\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { ANY_OF_KEY, DEFAULT_KEY, DEPENDENCIES_KEY, PROPERTIES_KEY, ONE_OF_KEY, REF_KEY } from '../constants';\nimport findSchemaDefinition from '../findSchemaDefinition';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport getSchemaType from '../getSchemaType';\nimport isObject from '../isObject';\nimport isFixedItems from '../isFixedItems';\nimport mergeDefaultsWithFormData from '../mergeDefaultsWithFormData';\nimport mergeObjects from '../mergeObjects';\nimport {\n  Experimental_DefaultFormStateBehavior,\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from '../types';\nimport isMultiSelect from './isMultiSelect';\nimport retrieveSchema, { resolveDependencies } from './retrieveSchema';\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== 'boolean') {\n        return item as S;\n      }\n    }\n  } else if (schema.items && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n    return schema.items as S;\n  }\n  if (additionalItems !== AdditionalItemsHandling.Ignore && isObject(schema.additionalItems)) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value, the value of\n * `includeUndefinedValues`, the value of `emptyObjectFields` and if its parent field is required. Generally undefined\n * `computedDefault` values are added only when `includeUndefinedValues` is either true/\"excludeObjectChildren\". If `\n * includeUndefinedValues` is false and `emptyObjectFields` is not \"skipDefaults\", then non-undefined and non-empty-object\n * values will be added based on certain conditions.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param isParentRequired - The optional boolean that indicates whether the parent field is required\n * @param requiredFields - The list of fields that are required\n * @param experimental_defaultFormStateBehavior - Optional configuration object, if provided, allows users to override\n *        default form state behavior\n */\nfunction maybeAddDefaultToObject<T = any>(\n  obj: GenericObjectType,\n  key: string,\n  computedDefault: T | T[] | undefined,\n  includeUndefinedValues: boolean | 'excludeObjectChildren',\n  isParentRequired: boolean,\n  requiredFields: string[] = [],\n  experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior = {}\n) {\n  const { emptyObjectFields = 'populateAllDefaults' } = experimental_defaultFormStateBehavior;\n  if (includeUndefinedValues) {\n    obj[key] = computedDefault;\n  } else if (emptyObjectFields !== 'skipDefaults') {\n    if (isObject(computedDefault)) {\n      // Store computedDefault if it's a non-empty object(e.g. not {}) and satisfies certain conditions\n      // Condition 1: If computedDefault is not empty or if the key is a required field\n      // Condition 2: If the parent object is required or emptyObjectFields is not 'populateRequiredDefaults'\n      if (\n        (!isEmpty(computedDefault) || requiredFields.includes(key)) &&\n        (isParentRequired || emptyObjectFields !== 'populateRequiredDefaults')\n      ) {\n        obj[key] = computedDefault;\n      }\n    } else if (\n      // Store computedDefault if it's a defined primitive (e.g., true) and satisfies certain conditions\n      // Condition 1: computedDefault is not undefined\n      // Condition 2: If emptyObjectFields is 'populateAllDefaults' or if the key is a required field\n      computedDefault !== undefined &&\n      (emptyObjectFields === 'populateAllDefaults' || requiredFields.includes(key))\n    ) {\n      obj[key] = computedDefault;\n    }\n  }\n}\n\ninterface ComputeDefaultsProps<T = any, S extends StrictRJSFSchema = RJSFSchema> {\n  parentDefaults?: T;\n  rootSchema?: S;\n  rawFormData?: T;\n  includeUndefinedValues?: boolean | 'excludeObjectChildren';\n  _recurseList?: string[];\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior;\n  required?: boolean;\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [props] - Optional props for this function\n * @param [props.parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [props.rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [props.rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [props.includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [props._recurseList=[]] - The list of ref names currently being recursed, used to prevent infinite recursion\n * @param [props.experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @param [props.required] - Optional flag, if true, indicates this schema was required in the parent schema.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  rawSchema: S,\n  {\n    parentDefaults,\n    rawFormData,\n    rootSchema = {} as S,\n    includeUndefinedValues = false,\n    _recurseList = [],\n    experimental_defaultFormStateBehavior = undefined,\n    required = false,\n  }: ComputeDefaultsProps<T, S> = {}\n): T | T[] | undefined {\n  const formData: T = (isObject(rawFormData) ? rawFormData : {}) as T;\n  const schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  // If we get a new schema, then we need to recompute defaults again for the new schema found.\n  let schemaToCompute: S | null = null;\n  let updatedRecurseList = _recurseList;\n\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(defaults!, schema.default as GenericObjectType) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    const refName = schema[REF_KEY];\n    // Use referenced schema defaults for this node.\n    if (!_recurseList.includes(refName!)) {\n      updatedRecurseList = _recurseList.concat(refName!);\n      schemaToCompute = findSchemaDefinition<S>(refName, rootSchema);\n    }\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(validator, schema, rootSchema, false, formData);\n    schemaToCompute = resolvedSchema[0]; // pick the first element from resolve dependencies\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(validator, itemSchema, {\n        rootSchema,\n        includeUndefinedValues,\n        _recurseList,\n        experimental_defaultFormStateBehavior,\n        parentDefaults: Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rawFormData: formData as T,\n      })\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    if (schema.oneOf!.length === 0) {\n      return undefined;\n    }\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    schemaToCompute = schema.oneOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.oneOf as S[],\n        0,\n        discriminator\n      )\n    ] as S;\n  } else if (ANY_OF_KEY in schema) {\n    if (schema.anyOf!.length === 0) {\n      return undefined;\n    }\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    schemaToCompute = schema.anyOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.anyOf as S[],\n        0,\n        discriminator\n      )\n    ] as S;\n  }\n\n  if (schemaToCompute) {\n    return computeDefaults<T, S, F>(validator, schemaToCompute, {\n      rootSchema,\n      includeUndefinedValues,\n      _recurseList: updatedRecurseList,\n      experimental_defaultFormStateBehavior,\n      parentDefaults: defaults as T | undefined,\n      rawFormData: formData as T,\n    });\n  }\n\n  // No defaults defined for this node, fallback to generic typed ones.\n  if (defaults === undefined) {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType<S>(schema)) {\n    // We need to recurse for object schema inner default values.\n    case 'object': {\n      const objectDefaults = Object.keys(schema.properties || {}).reduce((acc: GenericObjectType, key: string) => {\n        // Compute the defaults for this node, with the parent defaults we might\n        // have from a previous run: defaults[key].\n        const computedDefault = computeDefaults<T, S, F>(validator, get(schema, [PROPERTIES_KEY, key]), {\n          rootSchema,\n          _recurseList,\n          experimental_defaultFormStateBehavior,\n          includeUndefinedValues: includeUndefinedValues === true,\n          parentDefaults: get(defaults, [key]),\n          rawFormData: get(formData, [key]),\n          required: schema.required?.includes(key),\n        });\n        maybeAddDefaultToObject<T>(\n          acc,\n          key,\n          computedDefault,\n          includeUndefinedValues,\n          required,\n          schema.required,\n          experimental_defaultFormStateBehavior\n        );\n        return acc;\n      }, {}) as T;\n      if (schema.additionalProperties) {\n        // as per spec additionalProperties may be either schema or boolean\n        const additionalPropertiesSchema = isObject(schema.additionalProperties) ? schema.additionalProperties : {};\n        const keys = new Set<string>();\n        if (isObject(defaults)) {\n          Object.keys(defaults as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => keys.add(key));\n        }\n        let formDataRequired: string[];\n        if (isObject(formData)) {\n          formDataRequired = [];\n          Object.keys(formData as GenericObjectType)\n            .filter((key) => !schema.properties || !schema.properties[key])\n            .forEach((key) => {\n              keys.add(key);\n              formDataRequired.push(key);\n            });\n        }\n        keys.forEach((key) => {\n          const computedDefault = computeDefaults(validator, additionalPropertiesSchema as S, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            includeUndefinedValues: includeUndefinedValues === true,\n            parentDefaults: get(defaults, [key]),\n            rawFormData: get(formData, [key]),\n            required: schema.required?.includes(key),\n          });\n          // Since these are additional properties we don’t need to add the `experimental_defaultFormStateBehavior` prop\n          maybeAddDefaultToObject<T>(\n            objectDefaults as GenericObjectType,\n            key,\n            computedDefault,\n            includeUndefinedValues,\n            required,\n            formDataRequired\n          );\n        });\n      }\n      return objectDefaults;\n    }\n    case 'array': {\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Fallback, idx);\n          return computeDefaults<T, S, F>(validator, schemaItem, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            parentDefaults: item,\n          });\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S, F>(validator, schemaItem, {\n            rootSchema,\n            _recurseList,\n            experimental_defaultFormStateBehavior,\n            rawFormData: item,\n            parentDefaults: get(defaults, [idx]),\n          });\n        }) as T[];\n      }\n\n      const ignoreMinItemsFlagSet = experimental_defaultFormStateBehavior?.arrayMinItems === 'requiredOnly';\n      if (ignoreMinItemsFlagSet && !required) {\n        // If no form data exists or defaults are set leave the field empty/non-existent, otherwise\n        // return form data/defaults\n        return defaults ? defaults : undefined;\n      }\n\n      const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n      if (\n        !schema.minItems ||\n        isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n        schema.minItems <= defaultsLength\n      ) {\n        return defaults ? defaults : [];\n      }\n\n      const defaultEntries: T[] = (defaults || []) as T[];\n      const fillerSchema: S = getInnerSchemaForArrayItem<S>(schema, AdditionalItemsHandling.Invert);\n      const fillerDefault = fillerSchema.default;\n\n      // Calculate filler entries for remaining items (minItems - existing raw data/defaults)\n      const fillerEntries: T[] = new Array(schema.minItems - defaultsLength).fill(\n        computeDefaults<any, S, F>(validator, fillerSchema, {\n          parentDefaults: fillerDefault,\n          rootSchema,\n          _recurseList,\n          experimental_defaultFormStateBehavior,\n        })\n      ) as T[];\n      // then fill up the rest with either the item default or empty, up to minItems\n      return defaultEntries.concat(fillerEntries);\n    }\n  }\n\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | 'excludeObjectChildren' = false,\n  experimental_defaultFormStateBehavior?: Experimental_DefaultFormStateBehavior\n) {\n  if (!isObject(theSchema)) {\n    throw new Error('Invalid schema: ' + theSchema);\n  }\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, formData);\n  const defaults = computeDefaults<T, S, F>(validator, schema, {\n    rootSchema,\n    includeUndefinedValues,\n    experimental_defaultFormStateBehavior,\n    rawFormData: formData,\n  });\n  if (formData === undefined || formData === null || (typeof formData === 'number' && isNaN(formData))) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return Array.isArray(schema.items) && schema.items.length > 0 && schema.items.every((item) => isObject(item));\n}\n","import get from 'lodash/get';\n\nimport isObject from './isObject';\nimport { GenericObjectType } from '../src';\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(defaults?: T, formData?: T): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value);\n      }\n      return value;\n    });\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(defaults ? get(defaults, key) : {}, get(formData, key));\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from './isObject';\nimport { GenericObjectType } from './types';\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | 'preventDuplicates' = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === 'preventDuplicates') {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return (Array.isArray(schema.enum) && schema.enum.length === 1) || CONST_KEY in schema;\n}\n","import isConstant from '../isConstant';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema: S = {} as S\n) {\n  const schema = retrieveSchema<T, S, F>(validator, theSchema, rootSchema, undefined);\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every((altSchemas) => typeof altSchemas !== 'boolean' && isConstant(altSchemas));\n  }\n  return false;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\n\nimport isSelect from './isSelect';\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema?: S) {\n  if (!schema.uniqueItems || !schema.items || typeof schema.items === 'boolean') {\n    return false;\n  }\n  return isSelect<T, S, F>(validator, schema.items as S, rootSchema);\n}\n","import getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://rjsf-team.github.io/react-jsonschema-form/docs/usage/widgets/#hidden-widgets\n    'widget' in getUiOptions<T, S, F>(uiSchema) && getUiOptions<T, S, F>(uiSchema)['widget'] !== 'hidden'\n  );\n}\n","import { UI_WIDGET_KEY } from '../constants';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === 'files') {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(validator, schema.items as S, rootSchema);\n    return itemsSchema.type === 'string' && itemsSchema.format === 'data-url';\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from '../constants';\nimport getSchemaType from '../getSchemaType';\nimport getUiOptions from '../getUiOptions';\nimport isCustomWidget from '../isCustomWidget';\nimport {\n  FormContextType,\n  GlobalUISchemaOptions,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from '../types';\nimport isFilesArray from './isFilesArray';\nimport isMultiSelect from './isMultiSelect';\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S,\n  globalOptions?: GlobalUISchemaOptions\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalOptions);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === 'array') {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === 'object') {\n    displayLabel = false;\n  }\n  if (schemaType === 'boolean' && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from '../mergeObjects';\nimport { ErrorSchema, FormContextType, RJSFSchema, StrictRJSFSchema, ValidationData, ValidatorType } from '../types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n *        removed in the next major release.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from 'lodash/get';\nimport has from 'lodash/has';\n\nimport { FormContextType, GenericObjectType, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport { PROPERTIES_KEY, REF_KEY } from '../constants';\nimport retrieveSchema from './retrieveSchema';\n\nconst NO_VALUE = Symbol('no Value');\n\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S, newSchema?: S, oldSchema?: S, data: any = {}): T {\n  // By default, we will clear the form data\n  let newFormData;\n  // If the new schema is of type object and that object contains a list of properties\n  if (has(newSchema, PROPERTIES_KEY)) {\n    // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n    const removeOldSchemaData: GenericObjectType = {};\n    if (has(oldSchema, PROPERTIES_KEY)) {\n      const properties = get(oldSchema, PROPERTIES_KEY, {});\n      Object.keys(properties).forEach((key) => {\n        if (has(data, key)) {\n          removeOldSchemaData[key] = undefined;\n        }\n      });\n    }\n    const keys: string[] = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n    // Create a place to store nested data that will be a side-effect of the filter\n    const nestedData: GenericObjectType = {};\n    keys.forEach((key) => {\n      const formValue = get(data, key);\n      let oldKeyedSchema: S = get(oldSchema, [PROPERTIES_KEY, key], {});\n      let newKeyedSchema: S = get(newSchema, [PROPERTIES_KEY, key], {});\n      // Resolve the refs if they exist\n      if (has(oldKeyedSchema, REF_KEY)) {\n        oldKeyedSchema = retrieveSchema<T, S, F>(validator, oldKeyedSchema, rootSchema, formValue);\n      }\n      if (has(newKeyedSchema, REF_KEY)) {\n        newKeyedSchema = retrieveSchema<T, S, F>(validator, newKeyedSchema, rootSchema, formValue);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaTypeForKey = get(oldKeyedSchema, 'type');\n      const newSchemaTypeForKey = get(newKeyedSchema, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n        if (has(removeOldSchemaData, key)) {\n          // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n          delete removeOldSchemaData[key];\n        }\n        // If it is an object, we'll recurse and store the resulting sanitized data for the key\n        if (newSchemaTypeForKey === 'object' || (newSchemaTypeForKey === 'array' && Array.isArray(formValue))) {\n          // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n          const itemData = sanitizeDataForNewSchema<T, S, F>(\n            validator,\n            rootSchema,\n            newKeyedSchema,\n            oldKeyedSchema,\n            formValue\n          );\n          if (itemData !== undefined || newSchemaTypeForKey === 'array') {\n            // only put undefined values for the array type and not the object type\n            nestedData[key] = itemData;\n          }\n        } else {\n          // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n          // with the new default or const. This allows the case where two schemas differ that only by the default/const\n          // value to be properly selected\n          const newOptionDefault = get(newKeyedSchema, 'default', NO_VALUE);\n          const oldOptionDefault = get(oldKeyedSchema, 'default', NO_VALUE);\n          if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n            if (oldOptionDefault === formValue) {\n              // If the old default matches the formValue, we'll update the new value to match the new default\n              removeOldSchemaData[key] = newOptionDefault;\n            } else if (get(newKeyedSchema, 'readOnly') === true) {\n              // If the new schema has the default set to read-only, treat it like a const and remove the value\n              removeOldSchemaData[key] = undefined;\n            }\n          }\n\n          const newOptionConst = get(newKeyedSchema, 'const', NO_VALUE);\n          const oldOptionConst = get(oldKeyedSchema, 'const', NO_VALUE);\n          if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n            // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n            removeOldSchemaData[key] = oldOptionConst === formValue ? newOptionConst : undefined;\n          }\n        }\n      }\n    });\n\n    newFormData = {\n      ...data,\n      ...removeOldSchemaData,\n      ...nestedData,\n    };\n    // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n  } else if (get(oldSchema, 'type') === 'array' && get(newSchema, 'type') === 'array' && Array.isArray(data)) {\n    let oldSchemaItems = get(oldSchema, 'items');\n    let newSchemaItems = get(newSchema, 'items');\n    // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n    // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n    if (\n      typeof oldSchemaItems === 'object' &&\n      typeof newSchemaItems === 'object' &&\n      !Array.isArray(oldSchemaItems) &&\n      !Array.isArray(newSchemaItems)\n    ) {\n      if (has(oldSchemaItems, REF_KEY)) {\n        oldSchemaItems = retrieveSchema<T, S, F>(validator, oldSchemaItems as S, rootSchema, data as T);\n      }\n      if (has(newSchemaItems, REF_KEY)) {\n        newSchemaItems = retrieveSchema<T, S, F>(validator, newSchemaItems as S, rootSchema, data as T);\n      }\n      // Now get types and see if they are the same\n      const oldSchemaType = get(oldSchemaItems, 'type');\n      const newSchemaType = get(newSchemaItems, 'type');\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaType || oldSchemaType === newSchemaType) {\n        const maxItems = get(newSchema, 'maxItems', -1);\n        if (newSchemaType === 'object') {\n          newFormData = data.reduce((newValue, aValue) => {\n            const itemValue = sanitizeDataForNewSchema<T, S, F>(\n              validator,\n              rootSchema,\n              newSchemaItems as S,\n              oldSchemaItems as S,\n              aValue\n            );\n            if (itemValue !== undefined && (maxItems < 0 || newValue.length < maxItems)) {\n              newValue.push(itemValue);\n            }\n            return newValue;\n          }, []);\n        } else {\n          newFormData = maxItems > 0 && data.length > maxItems ? data.slice(0, maxItems) : data;\n        }\n      }\n    } else if (\n      typeof oldSchemaItems === 'boolean' &&\n      typeof newSchemaItems === 'boolean' &&\n      oldSchemaItems === newSchemaItems\n    ) {\n      // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n      newFormData = data;\n    }\n    // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n  }\n  return newFormData as T;\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ALL_OF_KEY, DEPENDENCIES_KEY, ID_KEY, ITEMS_KEY, PROPERTIES_KEY, REF_KEY } from '../constants';\nimport isObject from '../isObject';\nimport { FormContextType, IdSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport retrieveSchema from './retrieveSchema';\nimport getSchemaType from '../getSchemaType';\n\n/** An internal helper that generates an `IdSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param idPrefix - The prefix to use for the id\n * @param idSeparator - The separator to use for the path segments in the id\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `IdSchema` object for the `schema`\n */\nfunction toIdSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  idPrefix: string,\n  idSeparator: string,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toIdSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        idPrefix,\n        idSeparator,\n        id,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchemaInternal<T, S, F>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      idPrefix,\n      idSeparator,\n      id,\n      rootSchema,\n      formData,\n      _recurseList\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (getSchemaType<S>(schema) === 'object' && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchemaInternal<T, S, F>(\n        validator,\n        isObject(field) ? field : {},\n        idPrefix,\n        idSeparator,\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        _recurseList\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = 'root',\n  idSeparator = '_'\n): IdSchema<T> {\n  return toIdSchemaInternal<T, S, F>(validator, schema, idPrefix, idSeparator, id, rootSchema, formData);\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\n\nimport {\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  ONE_OF_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from '../constants';\nimport getDiscriminatorFieldFromSchema from '../getDiscriminatorFieldFromSchema';\nimport { FormContextType, PathSchema, RJSFSchema, StrictRJSFSchema, ValidatorType } from '../types';\nimport getClosestMatchingOption from './getClosestMatchingOption';\nimport retrieveSchema from './retrieveSchema';\n\n/** An internal helper that generates an `PathSchema` object for the `schema`, recursively with protection against\n * infinite recursion\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [_recurseList=[]] - The list of retrieved schemas currently being recursed, used to prevent infinite recursion\n * @returns - The `PathSchema` object for the `schema`\n */\nfunction toPathSchemaInternal<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name: string,\n  rootSchema?: S,\n  formData?: T,\n  _recurseList: S[] = []\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(validator, schema, rootSchema, formData);\n    const sameSchemaIndex = _recurseList.findIndex((item) => isEqual(item, _schema));\n    if (sameSchemaIndex === -1) {\n      return toPathSchemaInternal<T, S, F>(\n        validator,\n        _schema,\n        name,\n        rootSchema,\n        formData,\n        _recurseList.concat(_schema)\n      );\n    }\n  }\n\n  let pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, ''),\n  } as PathSchema;\n\n  if (ONE_OF_KEY in schema || ANY_OF_KEY in schema) {\n    const xxxOf: S[] = ONE_OF_KEY in schema ? (schema.oneOf as S[]) : (schema.anyOf as S[]);\n    const discriminator = getDiscriminatorFieldFromSchema<S>(schema);\n    const index = getClosestMatchingOption<T, S, F>(validator, rootSchema!, formData, xxxOf, 0, discriminator);\n    const _schema: S = xxxOf![index] as S;\n    pathSchema = {\n      ...pathSchema,\n      ...toPathSchemaInternal<T, S, F>(validator, _schema, name, rootSchema, formData, _recurseList),\n    };\n  }\n\n  if (ADDITIONAL_PROPERTIES_KEY in schema && schema[ADDITIONAL_PROPERTIES_KEY] !== false) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchemaInternal<T, S, F>(\n        validator,\n        schema.items as S,\n        `${name}.${i}`,\n        rootSchema,\n        element,\n        _recurseList\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchemaInternal<T, S, F>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property]),\n        _recurseList\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name = '',\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  return toPathSchemaInternal(validator, schema, name, rootSchema, formData);\n}\n","import deepEquals from './deepEquals';\nimport {\n  ErrorSchema,\n  Experimental_DefaultFormStateBehavior,\n  FormContextType,\n  GlobalUISchemaOptions,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from './types';\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getClosestMatchingOption,\n  getFirstMatchingOption,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  sanitizeDataForNewSchema,\n  toIdSchema,\n  toPathSchema,\n} from './schema';\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator`, `rootSchema`, or `experimental_defaultFormStateBehavior` to each method.\n * Since these generally do not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements SchemaUtilsType<T, S, F>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S, F>;\n  experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   * @param experimental_defaultFormStateBehavior - Configuration flags to allow users to override default form state behavior\n   */\n  constructor(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S,\n    experimental_defaultFormStateBehavior: Experimental_DefaultFormStateBehavior\n  ) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n    this.experimental_defaultFormStateBehavior = experimental_defaultFormStateBehavior;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S,\n    experimental_defaultFormStateBehavior = {}\n  ): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return (\n      this.validator !== validator ||\n      !deepEquals(this.rootSchema, rootSchema) ||\n      !deepEquals(this.experimental_defaultFormStateBehavior, experimental_defaultFormStateBehavior)\n    );\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | 'excludeObjectChildren' = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S, F>(\n      this.validator,\n      schema,\n      formData,\n      this.rootSchema,\n      includeUndefinedValues,\n      this.experimental_defaultFormStateBehavior\n    );\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @param [globalOptions={}] - The optional Global UI Schema from which to get any fallback `xxx` options\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>, globalOptions?: GlobalUISchemaOptions) {\n    return getDisplayLabel<T, S, F>(this.validator, schema, uiSchema, this.rootSchema, globalOptions);\n  }\n\n  /** Determines which of the given `options` provided most closely matches the `formData`.\n   * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n   *\n   * The closest match is determined using the number of matching properties, and more heavily favors options with\n   * matching readOnly, default, or const values.\n   *\n   * @param formData - The form data associated with the schema\n   * @param options - The list of options that can be selected from\n   * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n   */\n  getClosestMatchingOption(\n    formData: T | undefined,\n    options: S[],\n    selectedOption?: number,\n    discriminatorField?: string\n  ): number {\n    return getClosestMatchingOption<T, S, F>(\n      this.validator,\n      this.rootSchema,\n      formData,\n      options,\n      selectedOption,\n      discriminatorField\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n   * Always returns the first option if there is nothing that matches.\n   *\n   * @param formData - The current formData, if any, used to figure out a match\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The firstindex of the matched option or 0 if none is available\n   */\n  getFirstMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string): number {\n    return getFirstMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   * Deprecated, use `getFirstMatchingOption()` instead.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @param [discriminatorField] - The optional name of the field within the options object whose value is used to\n   *          determine which option is selected\n   * @returns - The index of the matched option or 0 if none is available\n   * @deprecated\n   */\n  getMatchingOption(formData: T | undefined, options: S[], discriminatorField?: string) {\n    return getMatchingOption<T, S, F>(this.validator, formData, options, this.rootSchema, discriminatorField);\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(this.validator, schema, uiSchema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   * @deprecated - Use the `validationDataMerge()` function exported from `@rjsf/utils` instead. This function will be\n   *        removed in the next major release.\n   */\n  mergeValidationData(validationData: ValidationData<T>, additionalErrorSchema?: ErrorSchema<T>): ValidationData<T> {\n    return mergeValidationData<T, S, F>(this.validator, validationData, additionalErrorSchema);\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData?: T) {\n    return retrieveSchema<T, S, F>(this.validator, schema, this.rootSchema, rawFormData);\n  }\n\n  /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n   * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n   * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n   * old schemas that are non-existent in the new schema are set to `undefined`.\n   *\n   * @param [newSchema] - The new schema for which the data is being sanitized\n   * @param [oldSchema] - The old schema from which the data originated\n   * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n   * @returns - The new form data, with all the fields uniquely associated with the old schema set\n   *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n   */\n  sanitizeDataForNewSchema(newSchema?: S, oldSchema?: S, data?: any): T {\n    return sanitizeDataForNewSchema(this.validator, this.rootSchema, newSchema, oldSchema, data);\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(schema: S, id?: string | null, formData?: T, idPrefix = 'root', idSeparator = '_'): IdSchema<T> {\n    return toIdSchema<T, S, F>(this.validator, schema, id, this.rootSchema, formData, idPrefix, idSeparator);\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S, F>(this.validator, schema, name, this.rootSchema, formData);\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [experimental_defaultFormStateBehavior] Optional configuration object, if provided, allows users to override default form state behavior\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  experimental_defaultFormStateBehavior = {}\n): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema, experimental_defaultFormStateBehavior);\n}\n","/** Potentially substitutes all replaceable parameters with the associated value(s) from the `params` if available. When\n * a `params` array is provided, each value in the array is used to replace any of the replaceable parameters in the\n * `inputString` using the `%1`, `%2`, etc. replacement specifiers.\n *\n * @param inputString - The string which will be potentially updated with replacement parameters\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The updated string with any replacement specifiers replaced\n */\nexport default function replaceStringParameters(inputString: string, params?: string[]) {\n  let output = inputString;\n  if (Array.isArray(params)) {\n    const parts = output.split(/(%\\d)/);\n    params.forEach((param, index) => {\n      const partIndex = parts.findIndex((part) => part === `%${index + 1}`);\n      if (partIndex >= 0) {\n        parts[partIndex] = param;\n      }\n    });\n    output = parts.join('');\n  }\n  return output;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>['value']\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex.map((index) => enumOptionsValueForIndex(index, allEnumOptions)).filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index = valueIndex === '' || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'],\n  selected: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { ErrorSchema } from './types';\nimport { ERRORS_KEY } from './constants';\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath = (Array.isArray(pathOfError) && pathOfError.length > 0) || typeof pathOfError === 'string';\n    let errorBlock: ErrorSchema = hasPath ? get(this.errorSchema, pathOfError) : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList) ? [...errorOrList] : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from './types';\nimport { RJSFSchema } from './types';\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from './constants';\nimport getUiOptions from './getUiOptions';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema, UISchemaSubmitButtonOptions } from './types';\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: 'Submit',\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[SUBMIT_BTN_OPTIONS_KEY] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","/** An enumeration of all the translatable strings used by `@rjsf/core` and its themes. The value of each of the\n * enumeration keys is expected to be the actual english string. Some strings contain replaceable parameter values\n * as indicated by `%1`, `%2`, etc. The number after the `%` indicates the order of the parameter. The ordering of\n * parameters is important because some languages may choose to put the second parameter before the first in its\n * translation. Also, some strings are rendered using `markdown-to-jsx` and thus support markdown and inline html.\n */\nexport enum TranslatableString {\n  /** Fallback title of an array item, used by ArrayField */\n  ArrayItemTitle = 'Item',\n  /** Missing items reason, used by ArrayField */\n  MissingItems = 'Missing items definition',\n  /** Yes label, used by BooleanField */\n  YesLabel = 'Yes',\n  /** No label, used by BooleanField */\n  NoLabel = 'No',\n  /** Close label, used by ErrorList */\n  CloseLabel = 'Close',\n  /** Errors label, used by ErrorList */\n  ErrorsLabel = 'Errors',\n  /** New additionalProperties string default value, used by ObjectField */\n  NewStringDefault = 'New Value',\n  /** Add button title, used by AddButton */\n  AddButton = 'Add',\n  /** Add button title, used by AddButton */\n  AddItemButton = 'Add Item',\n  /** Copy button title, used by IconButton */\n  CopyButton = 'Copy',\n  /** Move down button title, used by IconButton */\n  MoveDownButton = 'Move down',\n  /** Move up button title, used by IconButton */\n  MoveUpButton = 'Move up',\n  /** Remove button title, used by IconButton */\n  RemoveButton = 'Remove',\n  /** Now label, used by AltDateWidget */\n  NowLabel = 'Now',\n  /** Clear label, used by AltDateWidget */\n  ClearLabel = 'Clear',\n  /** Aria date label, used by DateWidget */\n  AriaDateLabel = 'Select a date',\n  /** File preview label, used by FileWidget */\n  PreviewLabel = 'Preview',\n  /** Decrement button aria label, used by UpDownWidget */\n  DecrementAriaLabel = 'Decrease value by 1',\n  /** Increment button aria label, used by UpDownWidget */\n  IncrementAriaLabel = 'Increase value by 1',\n  // Strings with replaceable parameters\n  /** Unknown field type reason, where %1 will be replaced with the type as provided by SchemaField */\n  UnknownFieldType = 'Unknown field type %1',\n  /** Option prefix, where %1 will be replaced with the option index as provided by MultiSchemaField */\n  OptionPrefix = 'Option %1',\n  /** Option prefix, where %1 and %2 will be replaced by the schema title and option index, respectively as provided by\n   * MultiSchemaField\n   */\n  TitleOptionPrefix = '%1 option %2',\n  /** Key label, where %1 will be replaced by the label as provided by WrapIfAdditionalTemplate */\n  KeyLabel = '%1 Key',\n  // Strings with replaceable parameters AND/OR that support markdown and html\n  /** Invalid object field configuration as provided by the ObjectField */\n  InvalidObjectField = 'Invalid \"%1\" object field configuration: <em>%2</em>.',\n  /** Unsupported field schema, used by UnsupportedField */\n  UnsupportedField = 'Unsupported field schema.',\n  /** Unsupported field schema, where %1 will be replaced by the idSchema.$id as provided by UnsupportedField */\n  UnsupportedFieldWithId = 'Unsupported field schema for field <code>%1</code>.',\n  /** Unsupported field schema, where %1 will be replaced by the reason string as provided by UnsupportedField */\n  UnsupportedFieldWithReason = 'Unsupported field schema: <em>%1</em>.',\n  /** Unsupported field schema, where %1 and %2 will be replaced by the idSchema.$id and reason strings, respectively,\n   * as provided by UnsupportedField\n   */\n  UnsupportedFieldWithIdAndReason = 'Unsupported field schema for field <code>%1</code>: <em>%2</em>.',\n  /** File name, type and size info, where %1, %2 and %3 will be replaced by the file name, file type and file size as\n   * provided by FileWidget\n   */\n  FilesInfo = '<strong>%1</strong> (%2, %3 bytes)',\n}\n","import { createElement } from 'react';\nimport ReactIs from 'react-is';\nimport get from 'lodash/get';\nimport set from 'lodash/set';\n\nimport { FormContextType, RJSFSchema, Widget, RegistryWidgetsType, StrictRJSFSchema } from './types';\nimport getSchemaType from './getSchemaType';\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: 'CheckboxWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    hidden: 'HiddenWidget',\n  },\n  string: {\n    text: 'TextWidget',\n    password: 'PasswordWidget',\n    email: 'EmailWidget',\n    hostname: 'TextWidget',\n    ipv4: 'TextWidget',\n    ipv6: 'TextWidget',\n    uri: 'URLWidget',\n    'data-url': 'FileWidget',\n    radio: 'RadioWidget',\n    select: 'SelectWidget',\n    textarea: 'TextareaWidget',\n    hidden: 'HiddenWidget',\n    date: 'DateWidget',\n    datetime: 'DateTimeWidget',\n    'date-time': 'DateTimeWidget',\n    'alt-date': 'AltDateWidget',\n    'alt-datetime': 'AltDateTimeWidget',\n    time: 'TimeWidget',\n    color: 'ColorWidget',\n    file: 'FileWidget',\n  },\n  number: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  integer: {\n    text: 'TextWidget',\n    select: 'SelectWidget',\n    updown: 'UpDownWidget',\n    range: 'RangeWidget',\n    radio: 'RadioWidget',\n    hidden: 'HiddenWidget',\n  },\n  array: {\n    select: 'SelectWidget',\n    checkboxes: 'CheckboxesWidget',\n    files: 'FileWidget',\n    hidden: 'HiddenWidget',\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  AWidget: Widget<T, S, F>\n) {\n  let MergedWidget: Widget<T, S, F> | undefined = get(AWidget, 'MergedWidget');\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions = (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, 'MergedWidget', MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === 'function' ||\n    (widget && ReactIs.isForwardRef(createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== 'string') {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === 'string') {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** JS has no built-in hashing function, so rolling our own\n *  based on Java's hashing fn:\n *  http://www.java2s.com/example/nodejs-utility-method/string-hash/hashcode-4dc2b.html\n *\n * @param string - The string for which to get the hash\n * @returns - The resulting hash of the string in hex format\n */\nfunction hashString(string: string): string {\n  let hash = 0;\n  for (let i = 0; i < string.length; i += 1) {\n    const chr = string.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return hash.toString(16);\n}\n\n/** Stringifies the schema and returns the hash of the resulting string.\n *\n * @param schema - The schema for which the hash is desired\n * @returns - The string obtained from the hash of the stringified schema\n */\nexport default function hashForSchema<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  return hashString(JSON.stringify(schema));\n}\n","import isString from 'lodash/isString';\n\nimport { IdSchema } from './types';\nimport { ID_KEY } from './constants';\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'description');\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'error');\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'examples');\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'help');\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, 'title');\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(id: IdSchema<T> | string, includeExamples = false) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : '';\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(id)}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n","import { CONST_KEY, ENUM_KEY } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (ENUM_KEY in schema && Array.isArray(schema.enum) && schema.enum.length === 1) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error('schema cannot be inferred as a constant');\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = '0' + s;\n  }\n  return s;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { ErrorSchema, GenericObjectType, RJSFValidationError } from './types';\n\n/** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n *\n * @param errorSchema - The `ErrorSchema` instance to convert\n * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n * @returns - The list of `RJSFValidationErrors` extracted from the `errorSchema`\n */\nexport default function toErrorList<T = any>(\n  errorSchema?: ErrorSchema<T>,\n  fieldPath: string[] = []\n): RJSFValidationError[] {\n  if (!errorSchema) {\n    return [];\n  }\n  let errorList: RJSFValidationError[] = [];\n  if (ERRORS_KEY in errorSchema) {\n    errorList = errorList.concat(\n      errorSchema[ERRORS_KEY]!.map((message: string) => {\n        const property = `.${fieldPath.join('.')}`;\n        return {\n          property,\n          message,\n          stack: `${property} ${message}`,\n        };\n      })\n    );\n  }\n  return Object.keys(errorSchema).reduce((acc, key) => {\n    if (key !== ERRORS_KEY) {\n      const childSchema = (errorSchema as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        acc = acc.concat(toErrorList(childSchema, [...fieldPath, key]));\n      }\n    }\n    return acc;\n  }, errorList);\n}\n","import get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { ID_KEY } from '../constants';\nimport hashForSchema from '../hashForSchema';\nimport {\n  CustomValidator,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from '../types';\n\n/** The type of the map of schema hash to schema\n */\nexport type SchemaMap<S extends StrictRJSFSchema = RJSFSchema> = {\n  [hash: string]: S;\n};\n\n/** An implementation of the `ValidatorType` interface that is designed for use in capturing schemas used by the\n * `isValid()` function. The rest of the implementation of the interface throws errors when it is attempted to be used.\n * An instance of the object allows the caller to capture the schemas used in calls to the `isValid()` function. These\n * captured schema, along with the root schema used to construct the object are stored in the map of schemas keyed by\n * the hashed value of the schema. NOTE: After hashing the schema, an $id with the hash value is added to the\n * schema IF that schema doesn't already have an $id, prior to putting the schema into the map.\n */\nexport default class ParserValidator<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  implements ValidatorType<T, S, F>\n{\n  /** The rootSchema provided during construction of the class */\n  readonly rootSchema: S;\n\n  /** The map of schemas encountered by the ParserValidator */\n  schemaMap: SchemaMap<S> = {};\n\n  /** Construct the ParserValidator for the given `rootSchema`. This `rootSchema` will be stashed in the `schemaMap`\n   * first.\n   *\n   * @param rootSchema - The root schema against which this validator will be executed\n   */\n  constructor(rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.addSchema(rootSchema, hashForSchema<S>(rootSchema));\n  }\n\n  /** Adds the given `schema` to the `schemaMap` keyed by the `hash` or `ID_KEY` if present on the `schema`. If the\n   * schema does not have an `ID_KEY`, then the `hash` will be added as the `ID_KEY` to allow the schema to be\n   * associated with it's `hash` for future use (by a schema compiler).\n   *\n   * @param schema - The schema which is to be added to the map\n   * @param hash - The hash value at which to map the schema\n   */\n  addSchema(schema: S, hash: string) {\n    const key = get(schema, ID_KEY, hash);\n    const identifiedSchema = { ...schema, [ID_KEY]: key };\n    const existing = this.schemaMap[key];\n    if (!existing) {\n      this.schemaMap[key] = identifiedSchema;\n    } else if (!isEqual(existing, identifiedSchema)) {\n      console.error('existing schema:', JSON.stringify(existing, null, 2));\n      console.error('new schema:', JSON.stringify(identifiedSchema, null, 2));\n      throw new Error(\n        `Two different schemas exist with the same key ${key}! What a bad coincidence. If possible, try adding an $id to one of the schemas`\n      );\n    }\n  }\n\n  /** Returns the current `schemaMap` to the caller\n   */\n  getSchemaMap() {\n    return this.schemaMap;\n  }\n\n  /** Implements the `ValidatorType` `isValid()` method to capture the `schema` in the `schemaMap`. Throws an error when\n   * the `rootSchema` is not the same as the root schema provided during construction.\n   *\n   * @param schema - The schema to record in the `schemaMap`\n   * @param _formData - The formData parameter that is ignored\n   * @param rootSchema - The root schema associated with the schema\n   * @throws - Error when the given `rootSchema` differs from the root schema provided during construction\n   */\n  isValid(schema: S, _formData: T, rootSchema: S): boolean {\n    if (!isEqual(rootSchema, this.rootSchema)) {\n      throw new Error('Unexpectedly calling isValid() with a rootSchema that differs from the construction rootSchema');\n    }\n    this.addSchema(schema, hashForSchema<S>(schema));\n\n    return false;\n  }\n\n  /** Implements the `ValidatorType` `rawValidation()` method to throw an error since it is never supposed to be called\n   *\n   * @param _schema - The schema parameter that is ignored\n   * @param _formData - The formData parameter that is ignored\n   */\n  rawValidation<Result = any>(_schema: S, _formData?: T): { errors?: Result[]; validationError?: Error } {\n    throw new Error('Unexpectedly calling the `rawValidation()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `toErrorList()` method to throw an error since it is never supposed to be called\n   *\n   * @param _errorSchema - The error schema parameter that is ignored\n   * @param _fieldPath - The field path parameter that is ignored\n   */\n  toErrorList(_errorSchema?: ErrorSchema<T>, _fieldPath?: string[]): RJSFValidationError[] {\n    throw new Error('Unexpectedly calling the `toErrorList()` method during schema parsing');\n  }\n\n  /** Implements the `ValidatorType` `validateFormData()` method to throw an error since it is never supposed to be\n   * called\n   *\n   * @param _formData - The formData parameter that is ignored\n   * @param _schema - The schema parameter that is ignored\n   * @param _customValidate - The customValidate parameter that is ignored\n   * @param _transformErrors - The transformErrors parameter that is ignored\n   * @param _uiSchema - The uiSchema parameter that is ignored\n   */\n  validateFormData(\n    _formData: T,\n    _schema: S,\n    _customValidate?: CustomValidator<T, S, F>,\n    _transformErrors?: ErrorTransformer<T, S, F>,\n    _uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    throw new Error('Unexpectedly calling the `validateFormData()` method during schema parsing');\n  }\n}\n","import forEach from 'lodash/forEach';\nimport isEqual from 'lodash/isEqual';\n\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '../types';\nimport { PROPERTIES_KEY, ITEMS_KEY } from '../constants';\nimport ParserValidator, { SchemaMap } from './ParserValidator';\nimport { retrieveSchemaInternal, resolveAnyOrOneOfSchemas } from '../schema/retrieveSchema';\n\n/** Recursive function used to parse the given `schema` belonging to the `rootSchema`. The `validator` is used to\n * capture the sub-schemas that the `isValid()` function is called with. For each schema returned by the\n * `retrieveSchemaInternal()`, the `resolveAnyOrOneOfSchemas()` function is called. For each of the schemas returned\n * from THAT call have `properties`, then each of the sub-schema property objects are then recursively parsed.\n *\n * @param validator - The `ParserValidator` implementation used to capture `isValid()` calls during parsing\n * @param recurseList - The list of schemas returned from the `retrieveSchemaInternal`, preventing infinite recursion\n * @param rootSchema - The root schema from which the schema parsing began\n * @param schema - The current schema element being parsed\n */\nfunction parseSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  validator: ParserValidator<T, S, F>,\n  recurseList: S[],\n  rootSchema: S,\n  schema: S\n) {\n  const schemas = retrieveSchemaInternal<T, S, F>(validator, schema, rootSchema, undefined, true);\n  schemas.forEach((schema) => {\n    const sameSchemaIndex = recurseList.findIndex((item) => isEqual(item, schema));\n    if (sameSchemaIndex === -1) {\n      recurseList.push(schema);\n      const allOptions = resolveAnyOrOneOfSchemas<T, S, F>(validator, schema, rootSchema, true);\n      allOptions.forEach((s) => {\n        if (PROPERTIES_KEY in s && s[PROPERTIES_KEY]) {\n          forEach(schema[PROPERTIES_KEY], (value) => {\n            parseSchema<T, S, F>(validator, recurseList, rootSchema, value as S);\n          });\n        }\n      });\n      if (ITEMS_KEY in schema && !Array.isArray(schema.items) && typeof schema.items !== 'boolean') {\n        parseSchema<T, S, F>(validator, recurseList, rootSchema, schema.items as S);\n      }\n    }\n  });\n}\n\n/** Parses the given `rootSchema` to extract out all the sub-schemas that maybe contained within it. Returns a map of\n * the hash of the schema to schema/sub-schema.\n *\n * @param rootSchema - The root schema to parse for sub-schemas used by `isValid()` calls\n * @returns - The `SchemaMap` of all schemas that were parsed\n */\nexport default function schemaParser<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  rootSchema: S\n): SchemaMap<S> {\n  const validator = new ParserValidator<T, S, F>(rootSchema);\n  const recurseList: S[] = [];\n\n  parseSchema(validator, recurseList, rootSchema, rootSchema);\n\n  return validator.getSchemaMap();\n}\n","import isObject from './isObject';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<S extends StrictRJSFSchema = RJSFSchema>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn('additionalItems=true is currently not supported');\n  }\n  return isObject(schema.additionalItems);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === '') {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === 'number' && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, UiSchema } from './types';\nimport getUiOptions from './getUiOptions';\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  uiSchema: UiSchema<T, S, F> = {},\n  formData?: T\n) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ERRORS_KEY } from './constants';\nimport { FieldValidation, FormValidation, GenericObjectType } from './types';\n\n/** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n *\n * @param formData - The form data around which the error handler is created\n * @returns - A `FormValidation` object based on the `formData` structure\n */\nexport default function createErrorHandler<T = any>(formData: T): FormValidation<T> {\n  const handler: FieldValidation = {\n    // We store the list of errors for this node in a property named __errors\n    // to avoid name collision with a possible sub schema field named\n    // 'errors' (see `utils.toErrorSchema`).\n    [ERRORS_KEY]: [],\n    addError(message: string) {\n      this[ERRORS_KEY]!.push(message);\n    },\n  };\n  if (Array.isArray(formData)) {\n    return formData.reduce((acc, value, key) => {\n      return { ...acc, [key]: createErrorHandler(value) };\n    }, handler);\n  }\n  if (isPlainObject(formData)) {\n    const formObject: GenericObjectType = formData as GenericObjectType;\n    return Object.keys(formObject).reduce((acc, key) => {\n      return { ...acc, [key]: createErrorHandler(formObject[key]) };\n    }, handler as FormValidation<T>);\n  }\n  return handler as FormValidation<T>;\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(',');\n  // Split params\n  const params: string[] = splitted[0].split(';');\n  // Get mime-type from params\n  const type: string = params[0].replace('data:', '');\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split('=')[0] === 'name';\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = 'unknown';\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here, which we decode to make it human-readable\n    name = decodeURI(properties[0].split('=')[1]);\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  try {\n    const binary = atob(splitted[1]);\n    const array = [];\n    for (let i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    // Create the blob object\n    const blob = new window.Blob([new Uint8Array(array)], { type });\n\n    return { blob, name };\n  } catch (error) {\n    return { blob: { size: 0, type: (error as Error).message }, name: dataURI };\n  }\n}\n","import { TranslatableString } from './enums';\nimport replaceStringParameters from './replaceStringParameters';\n\n/** Translates a `TranslatableString` value `stringToTranslate` into english. When a `params` array is provided, each\n * value in the array is used to replace any of the replaceable parameters in the `stringToTranslate` using the `%1`,\n * `%2`, etc. replacement specifiers.\n *\n * @param stringToTranslate - The `TranslatableString` value to convert to english\n * @param params - The optional list of replaceable parameter values to substitute into the english string\n * @returns - The `stringToTranslate` itself with any replaceable parameter values substituted\n */\nexport default function englishStringTranslator(stringToTranslate: TranslatableString, params?: string[]): string {\n  return replaceStringParameters(stringToTranslate, params);\n}\n","import isEqual from 'lodash/isEqual';\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsIsSelected from './enumOptionsIsSelected';\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<S extends StrictRJSFSchema = RJSFSchema>(\n  value: EnumOptionsType<S>['value'] | EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) => (enumOptionsIsSelected(opt.value, value) ? String(index) : undefined))\n    .filter((opt) => typeof opt !== 'undefined') as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from './types';\nimport enumOptionsValueForIndex from './enumOptionsValueForIndex';\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<S extends StrictRJSFSchema = RJSFSchema>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>['value'][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (value) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected.slice(0, index).concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n","import rangeSpec from './rangeSpec';\nimport { FormContextType, InputPropsType, RJSFSchema, StrictRJSFSchema, UIOptionsType } from './types';\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || 'text',\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === 'number') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = 'any';\n      }\n    } else if (schema.type === 'integer') {\n      inputProps.type = 'number';\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import { FormContextType, TemplatesType, Registry, UIOptionsType, StrictRJSFSchema, RJSFSchema } from './types';\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(name: Name, registry: Registry<T, S, F>, uiOptions: UIOptionsType<T, S, F> = {}): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === 'ButtonTemplates') {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) || templates[name]\n  );\n}\n","import getWidget from './getWidget';\nimport { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema, Widget } from './types';\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (err.message && (err.message.startsWith('No widget') || err.message.startsWith('Unsupported widget'))) {\n      return false;\n    }\n    throw e;\n  }\n}\n","import { ReactElement } from 'react';\n\n/** Helper function that will return the value to use for a widget `label` based on `hideLabel`. The `fallback` is used\n * as the return value from the function when `hideLabel` is true. Due to the implementation of theme components, it\n * may be necessary to return something other than `undefined` to cause the theme component to not render a label. Some\n * themes require may `false` and others may require an empty string.\n *\n * @param [label] - The label string or component to render when not hidden\n * @param [hideLabel] - Flag, if true, will cause the label to be hidden\n * @param [fallback] - One of 3 values, `undefined` (the default), `false` or an empty string\n * @returns - `fallback` if `hideLabel` is true, otherwise `label`\n */\nexport function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: ''): undefined | string;\nexport default function labelValue(label?: string | ReactElement, hideLabel?: boolean, fallback?: false | '') {\n  return hideLabel ? fallback : label;\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import toConstant from './toConstant';\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from './types';\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== 'production') {\n    console.warn('The enumNames property is deprecated and may be removed in a future major release.');\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label = (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) || String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from './types';\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(properties: string[], order?: string[]): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1 ? `properties '${arr.join(\"', '\")}'` : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter((prop) => prop === '*' || propertyHash[prop]);\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf('*');\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(`uiSchema order list does not contain ${errorPropList(rest)}`);\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf('*')) {\n    throw new Error('uiSchema order list contains more than one wildcard item');\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","import { DateObject } from './types';\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(dateString?: string, includeTime = true): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error('Unable to parse date ' + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<S extends StrictRJSFSchema = RJSFSchema>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S['additionalProperties']) => schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from 'react';\n\nimport deepEquals from './deepEquals';\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(component: React.Component, nextProps: any, nextState: any) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from './types';\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import toPath from 'lodash/toPath';\n\nimport { ErrorSchema, RJSFValidationError } from './types';\nimport ErrorSchemaBuilder from './ErrorSchemaBuilder';\n\n/** Transforms a rjsf validation errors list:\n * [\n *   {property: '.level1.level2[2].level3', message: 'err a'},\n *   {property: '.level1.level2[2].level3', message: 'err b'},\n *   {property: '.level1.level2[4].level3', message: 'err b'},\n * ]\n * Into an error tree:\n * {\n *   level1: {\n *     level2: {\n *       2: {level3: {errors: ['err a', 'err b']}},\n *       4: {level3: {errors: ['err b']}},\n *     }\n *   }\n * };\n *\n * @param errors - The list of RJSFValidationError objects\n * @returns - The `ErrorSchema` built from the list of `RJSFValidationErrors`\n */\nexport default function toErrorSchema<T = any>(errors: RJSFValidationError[]): ErrorSchema<T> {\n  const builder = new ErrorSchemaBuilder<T>();\n  if (errors.length) {\n    errors.forEach((error) => {\n      const { property, message } = error;\n      // When the property is the root element, just use an empty array for the path\n      const path = property === '.' ? [] : toPath(property);\n      // If the property is at the root (.level1) then toPath creates\n      // an empty array element at the first index. Remove it.\n      if (path.length > 0 && path[0] === '') {\n        path.splice(0, 1);\n      }\n      if (message) {\n        builder.addErrors(message, path);\n      }\n    });\n  }\n  return builder.ErrorSchema;\n}\n","import isPlainObject from 'lodash/isPlainObject';\n\nimport { ErrorSchema, FormValidation, GenericObjectType } from './types';\n\n/** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError()` functions from it\n *\n * @param errorHandler - The `FormValidation` error handling structure\n * @returns - The `ErrorSchema` resulting from the stripping of the `addError()` function\n */\nexport default function unwrapErrorHandler<T = any>(errorHandler: FormValidation<T>): ErrorSchema<T> {\n  return Object.keys(errorHandler).reduce((acc, key) => {\n    if (key === 'addError') {\n      return acc;\n    } else {\n      const childSchema = (errorHandler as GenericObjectType)[key];\n      if (isPlainObject(childSchema)) {\n        return {\n          ...acc,\n          [key]: unwrapErrorHandler(childSchema),\n        };\n      }\n      return { ...acc, [key]: childSchema };\n    }\n  }, {} as ErrorSchema<T>);\n}\n","import pad from './pad';\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return '';\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n","import isEmpty from 'lodash/isEmpty';\n\nimport mergeObjects from './mergeObjects';\nimport toErrorList from './toErrorList';\nimport { ErrorSchema, ValidationData } from './types';\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `toErrorList()` on the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The optional additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function validationDataMerge<T = any>(\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(oldErrorSchema, additionalErrorSchema, true) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import { REF_KEY, ROOT_SCHEMA_PREFIX } from './constants';\nimport { RJSFSchema, StrictRJSFSchema } from './types';\n\n/** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixObject<S extends StrictRJSFSchema = RJSFSchema>(node: S): S {\n  for (const key in node) {\n    const realObj: { [k: string]: any } = node;\n    const value = realObj[key];\n    if (key === REF_KEY && typeof value === 'string' && value.startsWith('#')) {\n      realObj[key] = ROOT_SCHEMA_PREFIX + value;\n    } else {\n      realObj[key] = withIdRefPrefix<S>(value);\n    }\n  }\n  return node;\n}\n\n/** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n * `withIdRefPrefix` for any other elements.\n *\n * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n */\nfunction withIdRefPrefixArray<S extends StrictRJSFSchema = RJSFSchema>(node: S[]): S[] {\n  for (let i = 0; i < node.length; i++) {\n    node[i] = withIdRefPrefix<S>(node[i]) as S;\n  }\n  return node;\n}\n\n/** Recursively prefixes all `$ref`s in a schema with the value of the `ROOT_SCHEMA_PREFIX` constant.\n * This is used in isValid to make references to the rootSchema\n *\n * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n * @returns - A copy of the `schemaNode` with updated `$ref`s\n */\nexport default function withIdRefPrefix<S extends StrictRJSFSchema = RJSFSchema>(schemaNode: S): S | S[] {\n  if (schemaNode.constructor === Object) {\n    return withIdRefPrefixObject<S>({ ...schemaNode });\n  }\n  if (Array.isArray(schemaNode)) {\n    return withIdRefPrefixArray<S>([...schemaNode]);\n  }\n  return schemaNode;\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ID_KEY","IF_KEY","ITEMS_KEY","JUNK_OPTION_ID","NAME_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","SUBMIT_BTN_OPTIONS_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","ROOT_SCHEMA_PREFIX","UI_FIELD_KEY","UI_WIDGET_KEY","UI_OPTIONS_KEY","getUiOptions","uiSchema","globalOptions","Object","keys","filter","key","indexOf","reduce","options","_extends2","value","console","error","_extends","substring","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","Error","decodeURIComponent","current","jsonpointer","get","undefined","_splitKeyElementFromO","remaining","subSchema","length","getMatchingOption","validator","formData","discriminatorField","i","option","has","discriminator","isValid","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","_objectDestructuringEmpty","allOf","slice","push","assign","getFirstMatchingOption","getDiscriminatorFieldFromSchema","schema","maybeString","isString","warn","guessType","isNaN","getSchemaType","type","properties","additionalProperties","includes","find","mergeSchemas","obj1","obj2","acc","left","right","union","retrieveSchema","rawFormData","retrieveSchemaInternal","getAllPermutationsOfXxxOf","listOfLists","permutations","list","flatMap","element","times","concat","forEach","permutation","resolveReference","expandAllBranches","localSchema","_objectWithoutPropertiesLoose","_excluded2","refSchema","resolvedSchemas","resolveDependencies","s","allOfSubschema","resolveSchema","resolvedSchema","expression","then","otherwise","resolvedSchemaLessConditional","_excluded","conditionValue","schemas","conditionalSchema","resolveCondition","mergeAllOf","deep","e","_excluded3","theSchema","aFormData","set","stubExistingAdditionalProperties","resolveAnyOrOneOfSchemas","anyOrOneOf","oneOf","dependencies","remainingSchema","_excluded4","processDependencies","_loop","dependencyKey","additionallyRequired","remainingDependencies","dependencyValue","from","Set","dependent","dependentSchema","_excluded5","subschema","resolvedOneOf","validSubschemas","conditionPropertySchema","_properties","conditionSchema","withExactlyOneSubschema","withDependentSchema","v","_ret","AdditionalItemsHandling","JUNK_OPTION","$id","__not_really_there__","calculateIndexScore","totalScore","score","formValue","newSchema","getClosestMatchingOption","newScore","selectedOption","allValidIndexes","validList","index","scoreData","bestScore","bestIndex","isFixedItems","items","every","item","mergeDefaultsWithFormData","defaults","defaultsArray","idx","mergeObjects","concatArrays","toMerge","result","isConstant","isSelect","altSchemas","isMultiSelect","uniqueItems","getInnerSchemaForArrayItem","additionalItems","Ignore","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","isParentRequired","requiredFields","experimental_defaultFormStateBehavior","_experimental_default2","emptyObjectFields","isEmpty","computeDefaults","rawSchema","_temp","_ref","parentDefaults","_ref$rootSchema","_ref$includeUndefined","_ref$_recurseList","_recurseList","_ref$experimental_def","_ref$required","schemaToCompute","updatedRecurseList","refName","itemSchema","objectDefaults","_schema$required","formDataRequired","additionalPropertiesSchema","add","_schema$required2","schemaItem","Fallback","arrayMinItems","defaultsLength","minItems","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","_uiOptions$label","label","displayLabel","schemaType","mergeValidationData","validationData","additionalErrorSchema","oldErrors","errors","oldErrorSchema","errorSchema","toErrorList","NO_VALUE","Symbol","sanitizeDataForNewSchema","oldSchema","data","newFormData","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","itemData","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","newValue","aValue","itemValue","toIdSchemaInternal","idPrefix","idSeparator","id","_schema","findIndex","isEqual","idSchema","name","field","fieldId","toIdSchema","toPathSchemaInternal","_pathSchema","pathSchema","replace","xxxOf","property","toPathSchema","SchemaUtils","this","_proto","prototype","getValidator","doesSchemaUtilsDiffer","replaceStringParameters","inputString","params","output","parts","split","param","partIndex","part","join","enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","val","Number","enumOptionsIsSelected","selected","some","sel","ErrorSchemaBuilder","initialSchema","resetAllErrors","getOrCreateErrorBlock","pathOfError","errorBlock","cloneDeep","addErrors","errorOrList","_errorsList","errorsList","apply","setErrors","listToAdd","clearErrors","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","TranslatableString","DEFAULT_OPTIONS","props","disabled","submitText","norender","widgetMap","boolean","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","time","color","file","number","updown","range","integer","array","checkboxes","files","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","createElement","isMemo","AWidget","MergedWidget","defaultOptions","defaultProps","_jsx","jsx","mergeWidgetOptions","hashForSchema","hash","charCodeAt","toString","hashString","JSON","stringify","idGenerator","suffix","descriptionId","errorId","examplesId","helpId","toConstant","pad","num","width","String","fieldPath","errorList","message","stack","childSchema","isPlainObject","ParserValidator","schemaMap","addSchema","identifiedSchema","existing","getSchemaMap","_formData","rawValidation","_errorSchema","_fieldPath","validateFormData","_customValidate","_transformErrors","_uiSchema","parseSchema","recurseList","includeExamples","examples","test","n","_getUiOptions$expanda","expandable","maxProperties","createErrorHandler","_handler","handler","addError","formObject","_extends3","dataURI","splitted","decodeURI","binary","atob","blob","window","Blob","Uint8Array","size","stringToTranslate","multiple","selectedIndexes","opt","all","sort","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","uiOptions","registry","templates","err","hideLabel","fallback","dateString","toJSON","optionIndex","schemaWithEnumNames","enumNames","aSchemaDef","aSchema","title","order","arr","arrayToHash","prev","curr","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","lastIndexOf","complete","splice","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaRequiresTrueValue","component","nextProps","nextState","state","dateObject","_dateObject$hour","_dateObject$minute","_dateObject$second","utcTime","UTC","builder","path","toPath","ErrorSchema","unwrapErrorHandler","errorHandler","jsonDate","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","withIdRefPrefix","schemaNode","constructor","node","withIdRefPrefixObject","withIdRefPrefixArray"],"mappings":"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"}